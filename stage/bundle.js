(()=>{"use strict";var e={250:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(537),r=n.n(i),s=n(645),o=n.n(s)()(r());o.push([e.id,"body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}","",{version:3,sources:["webpack://./assets/styles.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,SAAS;AACb;AACA;IACI,iCAAiC;IACjC,oCAAoC;IACpC,0BAA0B;IAC1B,4BAA4B;IAC5B,kBAAkB;AACtB",sourcesContent:["body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}"],sourceRoot:""}]);const a=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,s){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);i&&o[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var s={},o=[],a=0;a<e.length;a++){var h=e[a],c=i.base?h[0]+i.base:h[0],d=s[c]||0,l="".concat(c," ").concat(d);s[c]=d+1;var u=n(l),m={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var f=r(m,i);i.byIndex=a,t.splice(a,0,{identifier:l,updater:f,references:1})}o.push(l)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var s=i(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<s.length;o++){var a=n(s[o]);t[a].references--}for(var h=i(e,r),c=0;c<s.length;c++){var d=n(s[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=h}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},882:(e,t,n)=>{e.exports=n.p+"ed17f79baa7055d36fac.png"}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.u=e=>e+".bundle.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{var e=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,t=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,i=/[^-+\dA-Z]/g,r={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},s={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(e).padStart(t,"0")},a=function(e){var t=e.y,n=e.m,i=e.d,r=e._,s=e.dayName,o=e.short,a=void 0!==o&&o,h=new Date,c=new Date;c.setDate(c[r+"Date"]()-1);var d=new Date;return d.setDate(d[r+"Date"]()+1),h[r+"FullYear"]()===t&&h[r+"Month"]()===n&&h[r+"Date"]()===i?a?"Tdy":"Today":c[r+"FullYear"]()===t&&c[r+"Month"]()===n&&c[r+"Date"]()===i?a?"Ysd":"Yesterday":d[r+"FullYear"]()===t&&d[r+"Month"]()===n&&d[r+"Date"]()===i?a?"Tmw":"Tomorrow":s},h=function(e){var t=new Date(e.getFullYear(),e.getMonth(),e.getDate());t.setDate(t.getDate()-(t.getDay()+6)%7+3);var n=new Date(t.getFullYear(),0,4);n.setDate(n.getDate()-(n.getDay()+6)%7+3);var i=t.getTimezoneOffset()-n.getTimezoneOffset();t.setHours(t.getHours()-i);var r=(t-n)/6048e5;return 1+Math.floor(r)},c=function(e){var t=e.getDay();return 0===t&&(t=7),t},d=function(e){return(String(e).match(t)||[""]).pop().replace(i,"").replace(/GMT\+0000/g,"UTC")};function l(t){const n=new Date;console.log("("+function(t,n,i,l){if(1!==arguments.length||"string"!=typeof t||/\d/.test(t)||(n=t,t=void 0),(t=t||0===t?t:new Date)instanceof Date||(t=new Date(t)),isNaN(t))throw TypeError("Invalid date");var u=(n=String(r[n]||n||r.default)).slice(0,4);"UTC:"!==u&&"GMT:"!==u||(n=n.slice(4),i=!0,"GMT:"===u&&(l=!0));var m=function(){return i?"getUTC":"get"},f=function(){return t[m()+"Date"]()},v=function(){return t[m()+"Day"]()},p=function(){return t[m()+"Month"]()},w=function(){return t[m()+"FullYear"]()},E=function(){return t[m()+"Hours"]()},y=function(){return t[m()+"Minutes"]()},g=function(){return t[m()+"Seconds"]()},M=function(){return t[m()+"Milliseconds"]()},D=function(){return i?0:t.getTimezoneOffset()},b=function(){return h(t)},x=function(){return c(t)},T={d:function(){return f()},dd:function(){return o(f())},ddd:function(){return s.dayNames[v()]},DDD:function(){return a({y:w(),m:p(),d:f(),_:m(),dayName:s.dayNames[v()],short:!0})},dddd:function(){return s.dayNames[v()+7]},DDDD:function(){return a({y:w(),m:p(),d:f(),_:m(),dayName:s.dayNames[v()+7]})},m:function(){return p()+1},mm:function(){return o(p()+1)},mmm:function(){return s.monthNames[p()]},mmmm:function(){return s.monthNames[p()+12]},yy:function(){return String(w()).slice(2)},yyyy:function(){return o(w(),4)},h:function(){return E()%12||12},hh:function(){return o(E()%12||12)},H:function(){return E()},HH:function(){return o(E())},M:function(){return y()},MM:function(){return o(y())},s:function(){return g()},ss:function(){return o(g())},l:function(){return o(M(),3)},L:function(){return o(Math.floor(M()/10))},t:function(){return E()<12?s.timeNames[0]:s.timeNames[1]},tt:function(){return E()<12?s.timeNames[2]:s.timeNames[3]},T:function(){return E()<12?s.timeNames[4]:s.timeNames[5]},TT:function(){return E()<12?s.timeNames[6]:s.timeNames[7]},Z:function(){return l?"GMT":i?"UTC":d(t)},o:function(){return(D()>0?"-":"+")+o(100*Math.floor(Math.abs(D())/60)+Math.abs(D())%60,4)},p:function(){return(D()>0?"-":"+")+o(Math.floor(Math.abs(D())/60),2)+":"+o(Math.floor(Math.abs(D())%60),2)},S:function(){return["th","st","nd","rd"][f()%10>3?0:(f()%100-f()%10!=10)*f()%10]},W:function(){return b()},WW:function(){return o(b())},N:function(){return x()}};return n.replace(e,(function(e){return e in T?T[e]():e.slice(1,e.length-1)}))}(n,"yyyy/mm/dd HH:MM:ss.l")+") JS: "+t)}const u=new Map;function m(e,t){return()=>{const n=u.get(e);n&&clearTimeout(n),u.set(e,setTimeout(e,t))}}var f=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};const v=10,p={TILES:{EMPTY:{x:0,y:0,w:v,h:v},1:{x:10,y:0,w:v,h:v},2:{x:20,y:0,w:v,h:v},3:{x:30,y:0,w:v,h:v},4:{x:40,y:0,w:v,h:v},5:{x:50,y:0,w:v,h:v},6:{x:60,y:0,w:v,h:v},7:{x:70,y:0,w:v,h:v},8:{x:80,y:0,w:v,h:v},MINE:{x:90,y:0,w:v,h:v},HIDDEN:{x:100,y:0,w:v,h:v},FLAG:{x:110,y:0,w:v,h:v},CLOSE:{x:120,y:0,w:v,h:v}},MODAL:{BACK:{x:0,y:80,w:24,h:v},BACK_HOVERED:{x:24,y:80,w:24,h:v}},MAIN_MENU:{TITLE:{x:0,y:10,w:95,h:v},EASY:{x:0,y:20,w:26,h:v},EASY_HOVERED:{x:26,y:20,w:26,h:v},MEDIUM:{x:0,y:30,w:35,h:v},MEDIUM_HOVERED:{x:35,y:30,w:30,h:v},HARD:{x:0,y:40,w:25,h:v},HARD_HOVERED:{x:25,y:40,w:26,h:v},CUSTOM:{x:0,y:50,w:38,h:v},CUSTOM_HOVERED:{x:38,y:50,w:26,h:v}},RETRY_MODAL:{TITLE:{x:0,y:60,w:45,h:v},RETRY:{x:0,y:70,w:30,h:v},RETRY_HOVERED:{x:30,y:70,w:30,h:v}},SUCCESS_MODAL:{TITLE:{x:0,y:90,w:52,h:v},RESET:{x:0,y:100,w:53,h:v},RESET_HOVERED:{x:53,y:100,w:53,h:v}}},w=document.getElementById("canvas"),E=w.getContext("2d"),y=new Image,g=new Promise((e=>{y.addEventListener("load",(()=>{l("Finished loading spritesheet"),e()}))}));function M(e,t){return f(this,void 0,void 0,(function*(){yield g.then((()=>{E.drawImage(y,e.x,e.y,e.w,e.h,t.x,t.y,t.w,t.h)}))}))}y.src=new URL(n(882),n.b).toString();class D{constructor(){this.eventListeners=new Map}addEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,[...i,t])}removeEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,i.filter((e=>e===t)))}callEventListeners(e,t){var n;(null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[]).forEach((e=>e(t)))}}const b=(e,t)=>e.reduce(((e,n)=>e.sprite[t]*e.scale>n.sprite[t]*n.scale?e:n));function x(e,t){const n=w.getBoundingClientRect();return[Math.round(e-n.left),Math.round(t-n.top)]}function T(e,t,n){return e>n.x&&t>n.y&&e<n.x+n.w&&t<n.y+n.h}class S extends D{constructor(e){super(),this.elements=e,this.tallestElement=b(e,"h"),this.longestElement=b(e,"w"),this.elementHitboxes=new Map,this.hoveredElement=null,this.handlePointerMove=e=>{const[t,n]=x(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())if(T(t,n,i))return void(this.hoveredElement!==e&&(this.hoveredElement=e,this.callEventListeners("hover",{hoveredElement:e})));null!==this.hoveredElement&&(this.hoveredElement=null,this.callEventListeners("hover",{hoveredElement:null}))},this.handlePointerDown=e=>{const[t,n]=x(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())T(t,n,i)&&this.callEventListeners("press",{pressedElement:e});return null},this.registerEvents()}draw(e){return t=this,n=void 0,r=function*(){e||(e={x:0,y:0,w:w.width,h:w.height});let t=e.h*(.5/this.elements.length)/(this.tallestElement.sprite.h*this.tallestElement.scale);return t*this.longestElement.sprite.w*this.longestElement.scale>=.9*e.w&&(t=.9*e.w/(this.longestElement.sprite.w*this.longestElement.scale)),new Promise((n=>{let i=e.y+this.tallestElement.sprite.h*t*.5;this.elements.forEach((n=>{const r=n.sprite.w*n.scale*t,s=n.sprite.h*n.scale*t,o={x:e.x+(e.w/2-r/2),y:i,w:r,h:s};n.interactable&&this.elementHitboxes.set(n.id,o);const a=(h=n.sprite,JSON.parse(JSON.stringify(h)));var h;n.id===this.hoveredElement&&"hoveredSprite"in n&&(a.x=n.hoveredSprite.x,a.y=n.hoveredSprite.y),M(a,o),i+=1.5*s})),n()}))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){window.addEventListener("pointermove",this.handlePointerMove),window.addEventListener("pointerdown",this.handlePointerDown)}deregisterEvents(){window.removeEventListener("pointermove",this.handlePointerMove),window.removeEventListener("pointerdown",this.handlePointerDown)}}const L=e=>({x:e.x,y:e.y});const A={id:"menu.main.title",sprite:p.MAIN_MENU.TITLE,scale:1},C={id:"menu.main.easy_button",sprite:p.MAIN_MENU.EASY,hoveredSprite:L(p.MAIN_MENU.EASY_HOVERED),scale:1.25,interactable:!0},N={id:"menu.main.medium_button",sprite:p.MAIN_MENU.MEDIUM,hoveredSprite:L(p.MAIN_MENU.MEDIUM_HOVERED),scale:1.25,interactable:!0},O={id:"menu.main.hard_button",sprite:p.MAIN_MENU.HARD,hoveredSprite:L(p.MAIN_MENU.HARD_HOVERED),scale:1.25,interactable:!0},P=(p.MAIN_MENU.CUSTOM,L(p.MAIN_MENU.CUSTOM_HOVERED),[A,C,N,O]);var I,R,H=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)},_=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n};const U=30;class Y extends D{constructor(e){super(),I.set(this,void 0),R.set(this,void 0),this.fieldSize=e,this.reset(),this.pointerDownEvent=null,this.handleWheel=e=>{const t=H(this,R,"f")+-.005*e.deltaY;t>.2&&t<4&&(_(this,R,t,"f"),this.callEventListeners("move",{translation:H(this,I,"f"),scale:H(this,R,"f")}))},this.handlePointerDown=e=>{e.preventDefault(),null==this.pointerDownEvent&&(this.pointerDownEvent={touches:[],moveOrScale:!1,distance:null,timeout:setTimeout((()=>{null==this.pointerDownEvent||this.pointerDownEvent.moveOrScale||(this.callEventListeners("longpress",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button}),this.pointerDownEvent=null)}),200)}),this.pointerDownEvent.touches.push(e)},this.handlePointerMove=e=>{if(e.preventDefault(),null==this.pointerDownEvent)return;if(1===this.pointerDownEvent.touches.length){const t=e.clientX-this.pointerDownEvent.touches[0].clientX,n=e.clientY-this.pointerDownEvent.touches[0].clientY;if(!this.pointerDownEvent.moveOrScale&&Math.abs(t)<7.5&&Math.abs(n)<7.5)return;H(this,I,"f").x+=t,H(this,I,"f").y+=n;const i=this.fieldSize.w*U*H(this,R,"f")/2,r=this.fieldSize.h*U*H(this,R,"f")/2;H(this,I,"f").x=Math.min(H(this,I,"f").x,i),H(this,I,"f").x=Math.max(H(this,I,"f").x,-i),H(this,I,"f").y=Math.min(H(this,I,"f").y,r),H(this,I,"f").y=Math.max(H(this,I,"f").y,-r)}else{const e=this.pointerDownEvent.touches[0],t=this.pointerDownEvent.touches[1],n=Math.hypot(e.clientX-t.clientX,e.clientY-t.clientY);null!=this.pointerDownEvent.distance&&(_(this,R,H(this,R,"f")+.005*(n-this.pointerDownEvent.distance),"f"),_(this,R,Math.max(H(this,R,"f"),.2),"f"),_(this,R,Math.min(H(this,R,"f"),4),"f")),this.pointerDownEvent.distance=n}this.pointerDownEvent.moveOrScale=!0;const t=this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId));this.pointerDownEvent.touches[t]=e,this.callEventListeners("move",{translation:H(this,I,"f"),scale:H(this,R,"f")})},this.handlePointerOut=e=>{e.preventDefault(),null!=this.pointerDownEvent&&(this.pointerDownEvent.touches.length>1?(this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),this.pointerDownEvent.distance=null):(clearTimeout(this.pointerDownEvent.timeout),this.pointerDownEvent=null))},this.handlePointerUp=e=>{if(e.preventDefault(),null!=this.pointerDownEvent){if(this.pointerDownEvent.touches.length>1)return this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),void(this.pointerDownEvent.distance=null);this.pointerDownEvent.moveOrScale||this.callEventListeners("press",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button}),clearTimeout(this.pointerDownEvent.timeout),this.pointerDownEvent=null}},this.registerEvents()}middleTranslation(){return{x:w.width/2-this.scale*(this.fieldSize.w*U/2),y:w.height/2-this.scale*(this.fieldSize.h*U/2)}}get translation(){return H(this,I,"f")}get scale(){return H(this,R,"f")}toCanvasPos(e,t){const n=this.middleTranslation();return{x:n.x+(this.translation.x+e*U*this.scale),y:n.y+(this.translation.y+t*U*this.scale)}}toWorldPos(e,t){const n=this.middleTranslation(),i=w.getBoundingClientRect();return{x:Math.floor((e-i.left-n.x-this.translation.x)/this.scale/U),y:Math.floor((t-i.left-n.y-this.translation.y)/this.scale/U)}}reset(){_(this,R,Math.min(w.width/(this.fieldSize.w*U*1.1),w.height/(this.fieldSize.h*U*1.1)),"f"),_(this,R,Math.max(H(this,R,"f"),.2),"f"),_(this,R,Math.min(H(this,R,"f"),4),"f"),_(this,I,{x:0,y:0},"f")}registerEvents(){w.addEventListener("wheel",this.handleWheel),w.addEventListener("pointerdown",this.handlePointerDown),w.addEventListener("pointermove",this.handlePointerMove),w.addEventListener("pointerout",this.handlePointerOut),w.addEventListener("pointerup",this.handlePointerUp)}deregisterEvents(){w.removeEventListener("wheel",this.handleWheel),w.removeEventListener("pointerdown",this.handlePointerDown),w.removeEventListener("pointermove",this.handlePointerMove),w.removeEventListener("pointerout",this.handlePointerOut),w.removeEventListener("pointerup",this.handlePointerUp)}}I=new WeakMap,R=new WeakMap;const W={id:"modal.close_button",sprite:p.TILES.CLOSE,scale:1},z={id:"modal.back_button",sprite:p.MODAL.BACK,hoveredSprite:L(p.MODAL.BACK_HOVERED),scale:1.25,interactable:!0};class B extends S{constructor(e){super(e)}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){yield new Promise((e=>{const t=w.width,n=w.height;E.fillStyle="rgba(0, 0, 0, 0.4)",E.fillRect(0,0,t,n);const i=t>n?.8*n:.8*t,r=t/2-i/2,s=n/2-i/2,o=i/10;for(let e=0;e<10;e++)for(let t=0;t<10;t++){const n={x:r+t*o,y:s+e*o,w:o,h:o};let i={x:p.TILES.EMPTY.w/2,y:p.TILES.EMPTY.h/2,w:1,h:1};0!==t&&9!==t&&0!==e&&9!==e||(9===t&&0===e?(i=W.sprite,this.elementHitboxes.set(W.id,n)):i=p.TILES.HIDDEN),M(i,n)}e({x:r+o,y:s+o,w:i-2*o,h:i-2*o})})).then((t=>e.draw.call(this,t)))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}}const k={id:"modal.retry.title",sprite:p.RETRY_MODAL.TITLE,scale:1},j={id:"modal.retry.retry_button",sprite:p.RETRY_MODAL.RETRY,hoveredSprite:L(p.RETRY_MODAL.RETRY_HOVERED),scale:1.25,interactable:!0},F=[k,j,z],V=B.bind(B,F),Z={id:"modal.success.title",sprite:p.SUCCESS_MODAL.TITLE,scale:1},J={id:"modal.success.reset_button",sprite:p.SUCCESS_MODAL.RESET,hoveredSprite:L(p.SUCCESS_MODAL.RESET_HOVERED),scale:1.25,interactable:!0},G=[Z,J,z],X=B.bind(B,G);var K=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};l("Creating WASM worker");const $=new Worker(new URL(n.p+n.u(827),n.b)),q=new Map;l("Registering WebIO event listener for Go"),$.addEventListener("message",(e=>{if(e.data){const t=e.data,[n,i]=q.get(t.id);t.success?n(t.data):(l("Error response for '"+t.cmd+"': "+t.data),i(t.data))}}));let Q=!1;const ee=[];function te(e,t,n){return new Promise(((i,r)=>{const s=function(e,t){return{cmd:e,id:e+Date.now(),data:t}}(e,t);q.set(s.id,[i,r]),n||Q?$.postMessage(s):(l(e+" message received, but worker hasn't connected yet. Adding to queue"),ee.push(s))}))}function ne(e){return K(this,void 0,void 0,(function*(){const t=te("ping",null,!0),n=new Promise(((t,n)=>setTimeout(n,e)));try{return yield Promise.race([t,n]),Q=!0,ee.forEach((e=>{$.postMessage(e)})),ee.length=0,!0}catch(e){return!1}}))}(function(){return K(this,void 0,void 0,(function*(){let e=0,t=100;for(;!Q&&e<5;)l("Sending ping with timeout "+t+"ms"),e++,(yield ne(t))||(t*=2,l("Ping timeout reached"));if(e>=5)throw new Error("Max pings 5 reached, assuming WASM module is not functional")}))})().then((()=>{l("Response to ping received, worker connected")}));var ie,re=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))},se=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n},oe=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class ae{constructor(){ie.set(this,void 0),this.modal=null,se(this,ie,!0,"f")}open(e){this.modal=e,se(this,ie,!1,"f")}close(){if(!this.modal)throw new Error("No modal to close");this.hide(),this.modal=null}get hidden(){return oe(this,ie,"f")}hide(){if(!this.modal)throw new Error("No modal to hide");this.modal.deregisterEvents(),se(this,ie,!0,"f")}reveal(){if(!this.modal)throw new Error("No modal to reveal");this.modal.registerEvents(),se(this,ie,!1,"f")}draw(){return re(this,void 0,void 0,(function*(){oe(this,ie,"f")||(yield this.modal.draw())}))}deregisterEvents(){var e;null===(e=this.modal)||void 0===e||e.deregisterEvents()}}function he(e){e.preventDefault()}ie=new WeakMap;class ce{constructor(e,t,n,i){this.fieldSize={w:e,h:t},this.numMines=n,this.handleBack=i,this.camera=new Y(this.fieldSize),this.camera.addEventListener("press",this.handlePress.bind(this)),this.camera.addEventListener("longpress",this.handleLongPress.bind(this)),this.camera.addEventListener("move",this.draw.bind(this)),this.modal=new ae,this.drawWithLimit=m(this.draw.bind(this),100),this.reset(),this.registerEvents()}reset(){this.camera.reset(),this.gameOver=!1,te("init",{width:this.fieldSize.w,height:this.fieldSize.h,mines:this.numMines}).then(this.draw.bind(this))}draw(){return re(this,void 0,void 0,(function*(){yield te("appearance").then(this.drawAppearance.bind(this)).then(this.modal.draw.bind(this.modal))}))}registerEvents(){window.addEventListener("resize",this.drawWithLimit),w.addEventListener("contextmenu",he),this.modal.hidden&&this.camera.registerEvents()}deregisterEvents(){window.removeEventListener("resize",this.drawWithLimit),w.removeEventListener("contextmenu",he),this.camera.deregisterEvents(),this.modal.deregisterEvents()}drawAppearance(e){return re(this,void 0,void 0,(function*(){const t=w.width,n=w.height;E.clearRect(0,0,t,n);const i=[];for(let t=0;t<this.fieldSize.h;++t)for(let n=0;n<this.fieldSize.w;++n){const r=p.TILES[e[t][n]],s=this.camera.toCanvasPos(n,t);i.push(M(r,{x:s.x,y:s.y,w:U*this.camera.scale,h:U*this.camera.scale}))}return Promise.all(i)}))}handleState(e){switch(e.state){case"win":this.gameOver=!0,l("Win detected, displaying success modal"),this.handleEndGameModal(X,J.id);break;case"loss":this.gameOver=!0,l("Loss detected, displaying retry modal"),setTimeout(this.handleEndGameModal.bind(this,V,j.id),1e3)}}handleEndGameModal(e,t){return re(this,void 0,void 0,(function*(){const n=new e;this.modal.open(n),n.addEventListener("hover",this.draw.bind(this)),n.addEventListener("press",(e=>{switch(e.pressedElement){case W.id:this.modal.hide(),this.camera.registerEvents(),this.draw();break;case t:this.modal.close(),this.camera.registerEvents(),this.reset(),this.draw();break;case z.id:this.deregisterEvents(),this.handleBack()}})),this.camera.deregisterEvents(),yield this.draw()}))}handlePress(e){this.gameOver?this.modal.hidden&&(this.modal.reveal(),this.camera.deregisterEvents(),this.draw()):0===e.button?te("uncover",e.pos).then((e=>re(this,void 0,void 0,(function*(){yield this.draw(),this.handleState(e)})))):2===e.button&&te("flag",e.pos).then(this.draw.bind(this))}handleLongPress(e){this.gameOver||0!==e.button||te("flag",e.pos).then(this.draw.bind(this))}}var de=n(379),le=n.n(de),ue=n(795),me=n.n(ue),fe=n(569),ve=n.n(fe),pe=n(565),we=n.n(pe),Ee=n(216),ye=n.n(Ee),ge=n(589),Me=n.n(ge),De=n(250),be={};function xe(){w.width=window.innerWidth,w.height=window.innerHeight,E.imageSmoothingEnabled=!1}be.styleTagTransform=Me(),be.setAttributes=we(),be.insert=ve().bind(null,"head"),be.domAPI=me(),be.insertStyleElement=ye(),le()(De.Z,be),De.Z&&De.Z.locals&&De.Z.locals,window.addEventListener("resize",xe),xe();const Te=new class extends S{constructor(){super(P),super.addEventListener("press",this.draw.bind(this)),super.addEventListener("hover",this.draw.bind(this)),this.drawWithLimit=m(this.draw.bind(this),100),this.registerEvents()}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){return function(e){return f(this,void 0,void 0,(function*(){e||(e={x:0,y:0,w:w.width,h:w.height}),E.clearRect(e.x,e.y,e.w,e.h)}))}().then(e.draw.bind(this))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){super.registerEvents(),window.addEventListener("resize",this.drawWithLimit)}deregisterEvents(){super.deregisterEvents(),window.removeEventListener("resize",this.drawWithLimit)}};Te.addEventListener("press",(e=>{let t,n,i;switch(Te.deregisterEvents(),e.pressedElement){case C.id:t=9,n=9,i=10;break;case N.id:t=16,n=16,i=40;break;case O.id:t=30,n=16,i=99}new ce(t,n,i,(()=>{Te.registerEvents(),Te.draw()}))})),Te.draw()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,