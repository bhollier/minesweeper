(()=>{"use strict";var e={250:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(537),r=n.n(i),s=n(645),o=n.n(s)()(r());o.push([e.id,"body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}","",{version:3,sources:["webpack://./assets/styles.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,SAAS;AACb;AACA;IACI,iCAAiC;IACjC,oCAAoC;IACpC,0BAA0B;IAC1B,4BAA4B;IAC5B,kBAAkB;AACtB",sourcesContent:["body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}"],sourceRoot:""}]);const a=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,s){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);i&&o[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var s={},o=[],a=0;a<e.length;a++){var h=e[a],c=i.base?h[0]+i.base:h[0],d=s[c]||0,l="".concat(c," ").concat(d);s[c]=d+1;var u=n(l),p={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=r(p,i);i.byIndex=a,t.splice(a,0,{identifier:l,updater:m,references:1})}o.push(l)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var s=i(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<s.length;o++){var a=n(s[o]);t[a].references--}for(var h=i(e,r),c=0;c<s.length;c++){var d=n(s[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=h}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},882:(e,t,n)=>{e.exports=n.p+"16579aa28cba396948f1.png"}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.u=e=>e+".bundle.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{var e=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,t=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,i=/[^-+\dA-Z]/g,r={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},s={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(e).padStart(t,"0")},a=function(e){var t=e.y,n=e.m,i=e.d,r=e._,s=e.dayName,o=e.short,a=void 0!==o&&o,h=new Date,c=new Date;c.setDate(c[r+"Date"]()-1);var d=new Date;return d.setDate(d[r+"Date"]()+1),h[r+"FullYear"]()===t&&h[r+"Month"]()===n&&h[r+"Date"]()===i?a?"Tdy":"Today":c[r+"FullYear"]()===t&&c[r+"Month"]()===n&&c[r+"Date"]()===i?a?"Ysd":"Yesterday":d[r+"FullYear"]()===t&&d[r+"Month"]()===n&&d[r+"Date"]()===i?a?"Tmw":"Tomorrow":s},h=function(e){var t=new Date(e.getFullYear(),e.getMonth(),e.getDate());t.setDate(t.getDate()-(t.getDay()+6)%7+3);var n=new Date(t.getFullYear(),0,4);n.setDate(n.getDate()-(n.getDay()+6)%7+3);var i=t.getTimezoneOffset()-n.getTimezoneOffset();t.setHours(t.getHours()-i);var r=(t-n)/6048e5;return 1+Math.floor(r)},c=function(e){var t=e.getDay();return 0===t&&(t=7),t},d=function(e){return(String(e).match(t)||[""]).pop().replace(i,"").replace(/GMT\+0000/g,"UTC")};function l(t){const n=new Date;console.log("("+function(t,n,i,l){if(1!==arguments.length||"string"!=typeof t||/\d/.test(t)||(n=t,t=void 0),(t=t||0===t?t:new Date)instanceof Date||(t=new Date(t)),isNaN(t))throw TypeError("Invalid date");var u=(n=String(r[n]||n||r.default)).slice(0,4);"UTC:"!==u&&"GMT:"!==u||(n=n.slice(4),i=!0,"GMT:"===u&&(l=!0));var p=function(){return i?"getUTC":"get"},m=function(){return t[p()+"Date"]()},v=function(){return t[p()+"Day"]()},w=function(){return t[p()+"Month"]()},f=function(){return t[p()+"FullYear"]()},y=function(){return t[p()+"Hours"]()},E=function(){return t[p()+"Minutes"]()},g=function(){return t[p()+"Seconds"]()},D=function(){return t[p()+"Milliseconds"]()},M=function(){return i?0:t.getTimezoneOffset()},x=function(){return h(t)},b=function(){return c(t)},T={d:function(){return m()},dd:function(){return o(m())},ddd:function(){return s.dayNames[v()]},DDD:function(){return a({y:f(),m:w(),d:m(),_:p(),dayName:s.dayNames[v()],short:!0})},dddd:function(){return s.dayNames[v()+7]},DDDD:function(){return a({y:f(),m:w(),d:m(),_:p(),dayName:s.dayNames[v()+7]})},m:function(){return w()+1},mm:function(){return o(w()+1)},mmm:function(){return s.monthNames[w()]},mmmm:function(){return s.monthNames[w()+12]},yy:function(){return String(f()).slice(2)},yyyy:function(){return o(f(),4)},h:function(){return y()%12||12},hh:function(){return o(y()%12||12)},H:function(){return y()},HH:function(){return o(y())},M:function(){return E()},MM:function(){return o(E())},s:function(){return g()},ss:function(){return o(g())},l:function(){return o(D(),3)},L:function(){return o(Math.floor(D()/10))},t:function(){return y()<12?s.timeNames[0]:s.timeNames[1]},tt:function(){return y()<12?s.timeNames[2]:s.timeNames[3]},T:function(){return y()<12?s.timeNames[4]:s.timeNames[5]},TT:function(){return y()<12?s.timeNames[6]:s.timeNames[7]},Z:function(){return l?"GMT":i?"UTC":d(t)},o:function(){return(M()>0?"-":"+")+o(100*Math.floor(Math.abs(M())/60)+Math.abs(M())%60,4)},p:function(){return(M()>0?"-":"+")+o(Math.floor(Math.abs(M())/60),2)+":"+o(Math.floor(Math.abs(M())%60),2)},S:function(){return["th","st","nd","rd"][m()%10>3?0:(m()%100-m()%10!=10)*m()%10]},W:function(){return x()},WW:function(){return o(x())},N:function(){return b()}};return n.replace(e,(function(e){return e in T?T[e]():e.slice(1,e.length-1)}))}(n,"yyyy/mm/dd HH:MM:ss.l")+") JS: "+t)}const u=new Map;function p(e,t){return()=>{const n=u.get(e);n&&clearTimeout(n),u.set(e,setTimeout(e,t))}}const m=10,v={TILES:{EMPTY:{x:0,y:0,w:m,h:m},1:{x:10,y:0,w:m,h:m},2:{x:20,y:0,w:m,h:m},3:{x:30,y:0,w:m,h:m},4:{x:40,y:0,w:m,h:m},5:{x:50,y:0,w:m,h:m},6:{x:60,y:0,w:m,h:m},7:{x:70,y:0,w:m,h:m},8:{x:80,y:0,w:m,h:m},MINE:{x:90,y:0,w:m,h:m},HIDDEN:{x:100,y:0,w:m,h:m},FLAG:{x:110,y:0,w:m,h:m},CLOSE:{x:120,y:0,w:m,h:m}},MODAL:{BACK:{x:0,y:90,w:24,h:m},BACK_HOVERED:{x:24,y:90,w:24,h:m}},MAIN_MENU:{TITLE:{x:0,y:10,w:95,h:m},EASY:{x:0,y:20,w:26,h:m},EASY_HOVERED:{x:26,y:20,w:26,h:m},MEDIUM:{x:0,y:30,w:35,h:m},MEDIUM_HOVERED:{x:35,y:30,w:30,h:m},HARD:{x:0,y:40,w:25,h:m},HARD_HOVERED:{x:25,y:40,w:26,h:m},CUSTOM:{x:0,y:50,w:38,h:m},CUSTOM_HOVERED:{x:38,y:50,w:26,h:m},INFINITE:{x:0,y:60,w:43,h:m},INFINITE_HOVERED:{x:43,y:60,w:43,h:m}},RETRY_MODAL:{TITLE:{x:0,y:70,w:45,h:m},RETRY:{x:0,y:80,w:30,h:m},RETRY_HOVERED:{x:30,y:80,w:30,h:m}},SUCCESS_MODAL:{TITLE:{x:0,y:100,w:52,h:m},RESET:{x:0,y:110,w:53,h:m},RESET_HOVERED:{x:53,y:110,w:53,h:m}}},w=document.getElementById("canvas"),f=w.getContext("2d"),y=new Image,E=new Promise((e=>{y.addEventListener("load",(()=>{l("Finished loading spritesheet"),e()}))}));function g(e,t){f.drawImage(y,e.x,e.y,e.w,e.h,t.x,t.y,t.w,t.h)}y.src=new URL(n(882),n.b).toString();class D{constructor(){this.eventListeners=new Map}addEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,[...i,t])}removeEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,i.filter((e=>e===t)))}callEventListeners(e,t){var n;(null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[]).forEach((e=>e(t)))}}function M(e){l("(camera) "+e)}const x=30;class b extends D{constructor(e){super(),this.fieldSize=e,this.reset(),this.pointerDownEvent={touches:[],moveOrScale:!1,moveDistance:0,pinchDistance:null,longPressTimeout:null},this.lastPressTimestamp=0,this.handleWheel=e=>{const t=e.deltaY>0?.8:1.25;this.zoom(t,e.clientX,e.clientY)},this.handlePointerDown=e=>{e.preventDefault(),0==this.pointerDownEvent.touches.length?(M("first pointerdown"),this.pointerDownEvent.longPressTimeout=setTimeout((()=>{0===this.pointerDownEvent.touches.length||this.pointerDownEvent.moveOrScale||(M("longpress timeout"),this.callEventListeners("longpress",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button}))}),200),this.pointerDownEvent.moveOrScale=!1,this.pointerDownEvent.moveDistance=0,this.pointerDownEvent.pinchDistance=null):M("another pointerdown"),this.pointerDownEvent.touches.push(e)},this.handlePointerMove=e=>{if(e.preventDefault(),0===this.pointerDownEvent.touches.length)return;const t=this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId)),n=this.pointerDownEvent.touches[t];if(this.pointerDownEvent.touches[t]=e,1===this.pointerDownEvent.touches.length){const t={x:e.clientX-n.clientX,y:e.clientY-n.clientY},i=Math.hypot(t.x,t.y);if(this.pointerDownEvent.moveDistance+=i,!this.pointerDownEvent.moveOrScale&&this.pointerDownEvent.moveDistance<5)return;if(this.translation.x+=t.x,this.translation.y+=t.y,void 0!==this.fieldSize){const e={x:this.fieldSize.w*x*this.scale,y:this.fieldSize.h*x*this.scale},t={x:0-e.x/2,y:0-e.y/2},n={x:w.width-e.x/2,y:w.height-e.y/2};this.translation.x=Math.min(this.translation.x,n.x),this.translation.x=Math.max(this.translation.x,t.x),this.translation.y=Math.min(this.translation.y,n.y),this.translation.y=Math.max(this.translation.y,t.y)}}else{const e=this.pointerDownEvent.touches[0],t=this.pointerDownEvent.touches[1],n=Math.hypot(e.clientX-t.clientX,e.clientY-t.clientY);if(null!=this.pointerDownEvent.pinchDistance){const i=n/this.pointerDownEvent.pinchDistance,r={x:(e.clientX+t.clientX)/2,y:(e.clientY+t.clientY)/2};this.zoom(i,r.x,r.y)}this.pointerDownEvent.pinchDistance=n}this.pointerDownEvent.moveOrScale||(M("pointer moved, not press event"),this.pointerDownEvent.moveOrScale=!0,clearTimeout(this.pointerDownEvent.longPressTimeout)),this.callEventListeners("move",{})},this.handlePointerCancel=e=>{M("pointercancel")},this.handlePointerOut=e=>{e.preventDefault(),0!=this.pointerDownEvent.touches.length&&(this.pointerDownEvent.touches.length>1?(M("pointerout: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),this.pointerDownEvent.pinchDistance=null):(M("pointerout: no press event"),clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]))},this.handlePointerUp=e=>{if(e.preventDefault(),0!==this.pointerDownEvent.touches.length){if(this.pointerDownEvent.touches.length>1)return M("pointerup: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),void(this.pointerDownEvent.pinchDistance=null);if(this.pointerDownEvent.moveOrScale)M("pointerup");else{M("pointerup: no movement or scaling, press event");const t=Date.now();t-this.lastPressTimestamp>50?(this.lastPressTimestamp=t,this.callEventListeners("press",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button})):M(`last press was ${t-this.lastPressTimestamp}ms ago, no event (min50ms)`)}clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]}},this.registerEvents()}middleTranslation(){return void 0===this.fieldSize?{x:0,y:0}:{x:w.width/2-this.scale*(this.fieldSize.w*x/2),y:w.height/2-this.scale*(this.fieldSize.h*x/2)}}toCanvasPos(e,t){return{x:this.translation.x+e*x*this.scale,y:this.translation.y+t*x*this.scale}}toWorldPos(e,t){return{x:Math.floor((e-this.translation.x)/this.scale/x),y:Math.floor((t-this.translation.y)/this.scale/x)}}zoom(e,t,n){const i=this.scale*e;i>1&&i<4&&(this.translation.x-=(t-this.translation.x)*(e-1),this.translation.y-=(n-this.translation.y)*(e-1),this.scale=i,this.callEventListeners("move",{}))}draw(e){return t=this,n=void 0,r=function*(){const t=w.width,n=w.height;f.clearRect(0,0,t,n);const i=this.visibleTiles;for(let t=i.y;t<i.y+i.h;t++)for(let n=i.x;n<i.x+i.w;n++)if(e[t][n]){const i=v.TILES[e[t][n]],r=this.toCanvasPos(n,t);g(i,{x:r.x,y:r.y,w:x*this.scale,h:x*this.scale})}},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}get visibleTiles(){const e=w.getBoundingClientRect(),t=x*this.scale,n=this.toWorldPos(e.left-t,e.top-t),i=this.toWorldPos(e.right+t,e.bottom+t);return{x:n.x,y:n.y,w:i.x-n.x,h:i.y-n.y}}reset(){void 0!==this.fieldSize?(this.scale=Math.min(w.width/(this.fieldSize.w*x*1.1),w.height/(this.fieldSize.h*x*1.1)),this.scale=Math.max(this.scale,1),this.scale=Math.min(this.scale,4)):this.scale=2,this.translation=this.middleTranslation()}registerEvents(){w.addEventListener("wheel",this.handleWheel),w.addEventListener("pointerdown",this.handlePointerDown),w.addEventListener("pointermove",this.handlePointerMove),w.addEventListener("pointercancel",this.handlePointerCancel),w.addEventListener("pointerout",this.handlePointerOut),w.addEventListener("pointerup",this.handlePointerUp)}deregisterEvents(){w.removeEventListener("wheel",this.handleWheel),w.removeEventListener("pointerdown",this.handlePointerDown),w.removeEventListener("pointermove",this.handlePointerMove),w.removeEventListener("pointercancel",this.handlePointerCancel),w.removeEventListener("pointerout",this.handlePointerOut),w.removeEventListener("pointerup",this.handlePointerUp)}}var T=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};l("Creating WASM worker");const S=new Worker(new URL(n.p+n.u(303),n.b)),L=new Map;l("Registering WebIO event listener for Go"),S.addEventListener("message",(e=>{if(e.data){const t=e.data,[n,i]=L.get(t.id);t.success?n(t.data):(l("Error response for '"+t.cmd+"': "+t.data),i(t.data))}}));let A=!1;const I=[];function P(e,t,n){return new Promise(((i,r)=>{const s=function(e,t){return{cmd:e,id:e+Date.now(),data:t}}(e,t);L.set(s.id,[i,r]),n||A?S.postMessage(s):(l(e+" message received, but worker hasn't connected yet. Adding to queue"),I.push(s))}))}function N(e){return T(this,void 0,void 0,(function*(){const t=P("ping",null,!0),n=new Promise(((t,n)=>setTimeout(n,e)));try{return yield Promise.race([t,n]),A=!0,I.forEach((e=>{S.postMessage(e)})),I.length=0,!0}catch(e){return!1}}))}function O(e){return P("init",e)}function C(e){return P("flag",e)}(function(){return T(this,void 0,void 0,(function*(){let e=0,t=100;for(;!A&&e<5;)l("Sending ping with timeout "+t+"ms"),e++,(yield N(t))||(t*=2,l("Ping timeout reached"));if(e>=5)throw new Error("Max pings 5 reached, assuming WASM module is not functional")}))})().then((()=>{l("Response to ping received, worker connected")}));const R=(e,t)=>e.reduce(((e,n)=>e.sprite[t]*e.scale>n.sprite[t]*n.scale?e:n));function H(e,t){const n=w.getBoundingClientRect();return[Math.round(e-n.left),Math.round(t-n.top)]}function _(e,t,n){return e>n.x&&t>n.y&&e<n.x+n.w&&t<n.y+n.h}class U extends D{constructor(e){super(),this.elements=e,this.tallestElement=R(e,"h"),this.longestElement=R(e,"w"),this.elementHitboxes=new Map,this.hoveredElement=null,this.handlePointerMove=e=>{const[t,n]=H(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())if(_(t,n,i))return void(this.hoveredElement!==e&&(this.hoveredElement=e,this.callEventListeners("hover",{hoveredElement:e})));null!==this.hoveredElement&&(this.hoveredElement=null,this.callEventListeners("hover",{hoveredElement:null}))},this.handlePointerDown=e=>{const[t,n]=H(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())_(t,n,i)&&this.callEventListeners("press",{pressedElement:e});return null},this.registerEvents()}draw(e){return t=this,n=void 0,r=function*(){e||(e={x:0,y:0,w:w.width,h:w.height});let t=e.h*(.5/this.elements.length)/(this.tallestElement.sprite.h*this.tallestElement.scale);return t*this.longestElement.sprite.w*this.longestElement.scale>=.9*e.w&&(t=.9*e.w/(this.longestElement.sprite.w*this.longestElement.scale)),new Promise((n=>{let i=e.y+this.tallestElement.sprite.h*t*.5;this.elements.forEach((n=>{const r=n.sprite.w*n.scale*t,s=n.sprite.h*n.scale*t,o={x:e.x+(e.w/2-r/2),y:i,w:r,h:s};n.interactable&&this.elementHitboxes.set(n.id,o);const a=(h=n.sprite,JSON.parse(JSON.stringify(h)));var h;n.id===this.hoveredElement&&"hoveredSprite"in n&&(a.x=n.hoveredSprite.x,a.y=n.hoveredSprite.y),g(a,o),i+=1.5*s})),n()}))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){window.addEventListener("pointermove",this.handlePointerMove),window.addEventListener("pointerdown",this.handlePointerDown)}deregisterEvents(){window.removeEventListener("pointermove",this.handlePointerMove),window.removeEventListener("pointerdown",this.handlePointerDown)}}const Y=e=>({x:e.x,y:e.y});const W={id:"modal.close_button",sprite:v.TILES.CLOSE,scale:1},z={id:"modal.back_button",sprite:v.MODAL.BACK,hoveredSprite:Y(v.MODAL.BACK_HOVERED),scale:1.25,interactable:!0};class k extends U{constructor(e){super(e)}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){yield new Promise((e=>{const t=w.width,n=w.height;f.fillStyle="rgba(0, 0, 0, 0.4)",f.fillRect(0,0,t,n);const i=t>n?.8*n:.8*t,r=t/2-i/2,s=n/2-i/2,o=i/10;for(let e=0;e<10;e++)for(let t=0;t<10;t++){const n={x:r+t*o,y:s+e*o,w:o,h:o};let i={x:v.TILES.EMPTY.w/2,y:v.TILES.EMPTY.h/2,w:1,h:1};0!==t&&9!==t&&0!==e&&9!==e||(9===t&&0===e?(i=W.sprite,this.elementHitboxes.set(W.id,n)):i=v.TILES.HIDDEN),g(i,n)}e({x:r+o,y:s+o,w:i-2*o,h:i-2*o})})).then((t=>e.draw.call(this,t)))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}}const B={id:"modal.retry.title",sprite:v.RETRY_MODAL.TITLE,scale:1},F={id:"modal.retry.retry_button",sprite:v.RETRY_MODAL.RETRY,hoveredSprite:Y(v.RETRY_MODAL.RETRY_HOVERED),scale:1.25,interactable:!0},j=[B,F,z],V=k.bind(k,j),Z={id:"modal.success.title",sprite:v.SUCCESS_MODAL.TITLE,scale:1},J={id:"modal.success.reset_button",sprite:v.SUCCESS_MODAL.RESET,hoveredSprite:Y(v.SUCCESS_MODAL.RESET_HOVERED),scale:1.25,interactable:!0},X=[Z,J,z],G=k.bind(k,X);var $,q=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))},K=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n},Q=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class ee{constructor(){$.set(this,void 0),this.modal=null,K(this,$,!0,"f")}open(e){this.modal=e,K(this,$,!1,"f")}close(){if(!this.modal)throw new Error("No modal to close");this.hide(),this.modal=null}get hidden(){return Q(this,$,"f")}hide(){if(!this.modal)throw new Error("No modal to hide");this.modal.deregisterEvents(),K(this,$,!0,"f")}reveal(){if(!this.modal)throw new Error("No modal to reveal");this.modal.registerEvents(),K(this,$,!1,"f")}draw(){return q(this,void 0,void 0,(function*(){Q(this,$,"f")||(yield this.modal.draw())}))}deregisterEvents(){var e;null===(e=this.modal)||void 0===e||e.deregisterEvents()}}function te(e){e.preventDefault()}$=new WeakMap;class ne{constructor(e){this.props=e,"w"in this.props&&"h"in this.props?this.camera=new b({w:this.props.w,h:this.props.h}):this.camera=new b,this.camera.addEventListener("press",this.handlePress.bind(this)),this.camera.addEventListener("longpress",this.handleLongPress.bind(this)),this.camera.addEventListener("move",this.draw.bind(this,!1)),this.modal=new ee,this.drawWithLimit=p(this.draw.bind(this,!1),100),this.appearance=null,this.lastAppearanceRequestTimestamp=0,this.reset(),this.registerEvents()}reset(){let e;if(this.camera.reset(),this.gameOver=!1,"w"in this.props&&"h"in this.props&&"numMines"in this.props)e=O({width:this.props.w,height:this.props.h,mines:this.props.numMines});else{if(!("mineDensity"in this.props))throw new Error("unknown game props type");e=O({mineDensity:this.props.mineDensity})}e.then(this.draw.bind(this,!0))}shouldUpdateAppearance(){if(null==this.appearance)return!0;if(Date.now()-this.lastAppearanceRequestTimestamp<100)return!1;const e=this.camera.visibleTiles;return e.x<this.appearance.rect.x+this.appearance.rect.w/6||e.y<this.appearance.rect.y+this.appearance.rect.h/6||e.x+e.w>this.appearance.rect.x+this.appearance.rect.w-this.appearance.rect.w/6||e.y+e.h>this.appearance.rect.y+this.appearance.rect.h-this.appearance.rect.h/6}draw(e){return q(this,void 0,void 0,(function*(){if(e||this.shouldUpdateAppearance()){const e=this.camera.visibleTiles;e.x-=e.w/2,e.y-=e.h/2,e.w*=2,e.h*=2,l(`redrawing, rect x${e.x} y ${e.y} w ${e.w} h ${e.h}`),this.lastAppearanceRequestTimestamp=Date.now(),this.appearance={data:yield(t=e,P("appearance",t)),rect:e}}var t;yield this.camera.draw(this.appearance.data).then(this.modal.draw.bind(this.modal))}))}registerEvents(){window.addEventListener("resize",this.drawWithLimit),w.addEventListener("contextmenu",te),this.modal.hidden&&this.camera.registerEvents()}deregisterEvents(){window.removeEventListener("resize",this.drawWithLimit),w.removeEventListener("contextmenu",te),this.camera.deregisterEvents(),this.modal.deregisterEvents()}handleState(e){switch(e.state){case"win":this.gameOver=!0,l("Win detected, displaying success modal"),this.handleEndGameModal(G,J.id);break;case"loss":this.gameOver=!0,l("Loss detected, displaying retry modal"),setTimeout(this.handleEndGameModal.bind(this,V,F.id),1e3)}}handleEndGameModal(e,t){return q(this,void 0,void 0,(function*(){const n=new e;this.modal.open(n),n.addEventListener("hover",this.draw.bind(this,!1)),n.addEventListener("press",(e=>{switch(e.pressedElement){case W.id:this.modal.hide(),this.camera.registerEvents(),this.draw();break;case t:this.modal.close(),this.camera.registerEvents(),this.reset(),this.draw();break;case z.id:this.deregisterEvents(),this.props.handleBack()}})),this.camera.deregisterEvents(),yield this.draw()}))}handlePress(e){var t;this.gameOver?this.modal.hidden&&(this.modal.reveal(),this.camera.deregisterEvents(),this.draw()):0===e.button?(t=e.pos,P("uncover",t)).then((e=>q(this,void 0,void 0,(function*(){yield this.draw(!0),this.handleState(e)})))):2===e.button&&C(e.pos).then(this.draw.bind(this,!0))}handleLongPress(e){this.gameOver||0!==e.button||C(e.pos).then(this.draw.bind(this,!0))}}const ie={id:"menu.main.title",sprite:v.MAIN_MENU.TITLE,scale:1},re={id:"menu.main.easy_button",sprite:v.MAIN_MENU.EASY,hoveredSprite:Y(v.MAIN_MENU.EASY_HOVERED),scale:1.25,interactable:!0},se={id:"menu.main.medium_button",sprite:v.MAIN_MENU.MEDIUM,hoveredSprite:Y(v.MAIN_MENU.MEDIUM_HOVERED),scale:1.25,interactable:!0},oe={id:"menu.main.hard_button",sprite:v.MAIN_MENU.HARD,hoveredSprite:Y(v.MAIN_MENU.HARD_HOVERED),scale:1.25,interactable:!0},ae={id:"menu.main.infinite_button",sprite:v.MAIN_MENU.INFINITE,hoveredSprite:Y(v.MAIN_MENU.INFINITE_HOVERED),scale:1.25,interactable:!0},he=[ie,re,se,oe,ae];var ce=n(379),de=n.n(ce),le=n(795),ue=n.n(le),pe=n(569),me=n.n(pe),ve=n(565),we=n.n(ve),fe=n(216),ye=n.n(fe),Ee=n(589),ge=n.n(Ee),De=n(250),Me={};function xe(){w.width=window.innerWidth,w.height=window.innerHeight,f.imageSmoothingEnabled=!1,f.webkitImageSmoothingEnabled=!1,f.mozImageSmoothingEnabled=!1}Me.styleTagTransform=ge(),Me.setAttributes=we(),Me.insert=me().bind(null,"head"),Me.domAPI=ue(),Me.insertStyleElement=ye(),de()(De.Z,Me),De.Z&&De.Z.locals&&De.Z.locals,window.addEventListener("resize",xe),xe();const be=new class extends U{constructor(){super(he),super.addEventListener("press",this.draw.bind(this)),super.addEventListener("hover",this.draw.bind(this)),this.drawWithLimit=p(this.draw.bind(this),100),this.registerEvents()}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){return function(e){return t=this,n=void 0,r=function*(){e||(e={x:0,y:0,w:w.width,h:w.height}),f.clearRect(e.x,e.y,e.w,e.h)},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}().then(e.draw.bind(this))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){super.registerEvents(),window.addEventListener("resize",this.drawWithLimit)}deregisterEvents(){super.deregisterEvents(),window.removeEventListener("resize",this.drawWithLimit)}};be.addEventListener("press",(e=>{let t;switch(be.deregisterEvents(),e.pressedElement){case re.id:t={w:9,h:9,numMines:10};break;case se.id:t={w:16,h:16,numMines:40};break;case oe.id:t={w:30,h:16,numMines:99};break;case ae.id:t={mineDensity:40}}new ne(Object.assign(Object.assign({},t),{handleBack:()=>{be.registerEvents(),be.draw()}}))})),E.then(be.draw.bind(be))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,