(()=>{"use strict";var e={250:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(537),r=n.n(i),s=n(645),o=n.n(s)()(r());o.push([e.id,"body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}","",{version:3,sources:["webpack://./assets/styles.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,SAAS;AACb;AACA;IACI,iCAAiC;IACjC,oCAAoC;IACpC,0BAA0B;IAC1B,4BAA4B;IAC5B,kBAAkB;AACtB",sourcesContent:["body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}"],sourceRoot:""}]);const a=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,s){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);i&&o[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var s={},o=[],a=0;a<e.length;a++){var h=e[a],c=i.base?h[0]+i.base:h[0],d=s[c]||0,l="".concat(c," ").concat(d);s[c]=d+1;var u=n(l),m={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var p=r(m,i);i.byIndex=a,t.splice(a,0,{identifier:l,updater:p,references:1})}o.push(l)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var s=i(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<s.length;o++){var a=n(s[o]);t[a].references--}for(var h=i(e,r),c=0;c<s.length;c++){var d=n(s[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=h}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},882:(e,t,n)=>{e.exports=n.p+"16579aa28cba396948f1.png"}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.u=e=>e+".bundle.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{var e=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,t=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,i=/[^-+\dA-Z]/g,r={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},s={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(e).padStart(t,"0")},a=function(e){var t=e.y,n=e.m,i=e.d,r=e._,s=e.dayName,o=e.short,a=void 0!==o&&o,h=new Date,c=new Date;c.setDate(c[r+"Date"]()-1);var d=new Date;return d.setDate(d[r+"Date"]()+1),h[r+"FullYear"]()===t&&h[r+"Month"]()===n&&h[r+"Date"]()===i?a?"Tdy":"Today":c[r+"FullYear"]()===t&&c[r+"Month"]()===n&&c[r+"Date"]()===i?a?"Ysd":"Yesterday":d[r+"FullYear"]()===t&&d[r+"Month"]()===n&&d[r+"Date"]()===i?a?"Tmw":"Tomorrow":s},h=function(e){var t=new Date(e.getFullYear(),e.getMonth(),e.getDate());t.setDate(t.getDate()-(t.getDay()+6)%7+3);var n=new Date(t.getFullYear(),0,4);n.setDate(n.getDate()-(n.getDay()+6)%7+3);var i=t.getTimezoneOffset()-n.getTimezoneOffset();t.setHours(t.getHours()-i);var r=(t-n)/6048e5;return 1+Math.floor(r)},c=function(e){var t=e.getDay();return 0===t&&(t=7),t},d=function(e){return(String(e).match(t)||[""]).pop().replace(i,"").replace(/GMT\+0000/g,"UTC")};function l(t){const n=new Date;console.log("("+function(t,n,i,l){if(1!==arguments.length||"string"!=typeof t||/\d/.test(t)||(n=t,t=void 0),(t=t||0===t?t:new Date)instanceof Date||(t=new Date(t)),isNaN(t))throw TypeError("Invalid date");var u=(n=String(r[n]||n||r.default)).slice(0,4);"UTC:"!==u&&"GMT:"!==u||(n=n.slice(4),i=!0,"GMT:"===u&&(l=!0));var m=function(){return i?"getUTC":"get"},p=function(){return t[m()+"Date"]()},v=function(){return t[m()+"Day"]()},w=function(){return t[m()+"Month"]()},f=function(){return t[m()+"FullYear"]()},E=function(){return t[m()+"Hours"]()},y=function(){return t[m()+"Minutes"]()},g=function(){return t[m()+"Seconds"]()},D=function(){return t[m()+"Milliseconds"]()},M=function(){return i?0:t.getTimezoneOffset()},x=function(){return h(t)},b=function(){return c(t)},T={d:function(){return p()},dd:function(){return o(p())},ddd:function(){return s.dayNames[v()]},DDD:function(){return a({y:f(),m:w(),d:p(),_:m(),dayName:s.dayNames[v()],short:!0})},dddd:function(){return s.dayNames[v()+7]},DDDD:function(){return a({y:f(),m:w(),d:p(),_:m(),dayName:s.dayNames[v()+7]})},m:function(){return w()+1},mm:function(){return o(w()+1)},mmm:function(){return s.monthNames[w()]},mmmm:function(){return s.monthNames[w()+12]},yy:function(){return String(f()).slice(2)},yyyy:function(){return o(f(),4)},h:function(){return E()%12||12},hh:function(){return o(E()%12||12)},H:function(){return E()},HH:function(){return o(E())},M:function(){return y()},MM:function(){return o(y())},s:function(){return g()},ss:function(){return o(g())},l:function(){return o(D(),3)},L:function(){return o(Math.floor(D()/10))},t:function(){return E()<12?s.timeNames[0]:s.timeNames[1]},tt:function(){return E()<12?s.timeNames[2]:s.timeNames[3]},T:function(){return E()<12?s.timeNames[4]:s.timeNames[5]},TT:function(){return E()<12?s.timeNames[6]:s.timeNames[7]},Z:function(){return l?"GMT":i?"UTC":d(t)},o:function(){return(M()>0?"-":"+")+o(100*Math.floor(Math.abs(M())/60)+Math.abs(M())%60,4)},p:function(){return(M()>0?"-":"+")+o(Math.floor(Math.abs(M())/60),2)+":"+o(Math.floor(Math.abs(M())%60),2)},S:function(){return["th","st","nd","rd"][p()%10>3?0:(p()%100-p()%10!=10)*p()%10]},W:function(){return x()},WW:function(){return o(x())},N:function(){return b()}};return n.replace(e,(function(e){return e in T?T[e]():e.slice(1,e.length-1)}))}(n,"yyyy/mm/dd HH:MM:ss.l")+") JS: "+t)}const u=new Map;function m(e,t){return()=>{const n=u.get(e);n&&clearTimeout(n),u.set(e,setTimeout(e,t))}}const p=10,v={TILES:{EMPTY:{x:0,y:0,w:p,h:p},1:{x:10,y:0,w:p,h:p},2:{x:20,y:0,w:p,h:p},3:{x:30,y:0,w:p,h:p},4:{x:40,y:0,w:p,h:p},5:{x:50,y:0,w:p,h:p},6:{x:60,y:0,w:p,h:p},7:{x:70,y:0,w:p,h:p},8:{x:80,y:0,w:p,h:p},MINE:{x:90,y:0,w:p,h:p},HIDDEN:{x:100,y:0,w:p,h:p},FLAG:{x:110,y:0,w:p,h:p},CLOSE:{x:120,y:0,w:p,h:p}},MODAL:{BACK:{x:0,y:90,w:24,h:p},BACK_HOVERED:{x:24,y:90,w:24,h:p}},MAIN_MENU:{TITLE:{x:0,y:10,w:95,h:p},EASY:{x:0,y:20,w:26,h:p},EASY_HOVERED:{x:26,y:20,w:26,h:p},MEDIUM:{x:0,y:30,w:35,h:p},MEDIUM_HOVERED:{x:35,y:30,w:30,h:p},HARD:{x:0,y:40,w:25,h:p},HARD_HOVERED:{x:25,y:40,w:26,h:p},CUSTOM:{x:0,y:50,w:38,h:p},CUSTOM_HOVERED:{x:38,y:50,w:26,h:p},INFINITE:{x:0,y:60,w:43,h:p},INFINITE_HOVERED:{x:43,y:60,w:43,h:p}},RETRY_MODAL:{TITLE:{x:0,y:70,w:45,h:p},RETRY:{x:0,y:80,w:30,h:p},RETRY_HOVERED:{x:30,y:80,w:30,h:p}},SUCCESS_MODAL:{TITLE:{x:0,y:100,w:52,h:p},RESET:{x:0,y:110,w:53,h:p},RESET_HOVERED:{x:53,y:110,w:53,h:p}}},w=document.getElementById("canvas"),f=w.getContext("2d"),E=new Image,y=new Promise((e=>{E.addEventListener("load",(()=>{l("Finished loading spritesheet"),e()}))}));function g(e,t){f.drawImage(E,e.x,e.y,e.w,e.h,t.x,t.y,t.w,t.h)}E.src=new URL(n(882),n.b).toString();class D{constructor(){this.eventListeners=new Map}addEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,[...i,t])}removeEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,i.filter((e=>e===t)))}callEventListeners(e,t){var n;(null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[]).forEach((e=>e(t)))}}function M(e){l("(camera) "+e)}const x=30;class b extends D{constructor(e){super(),this.fieldSize=e,this.reset(),this.pointerDownEvent={touches:[],moveOrScale:!1,distance:null,longPressTimeout:null},this.lastPressTimestamp=0,this.handleWheel=e=>{const t=e.deltaY>0?.8:1.25;this.zoom(t,e.clientX,e.clientY)},this.handlePointerDown=e=>{e.preventDefault(),0==this.pointerDownEvent.touches.length?(M("first pointerdown"),this.pointerDownEvent.longPressTimeout=setTimeout((()=>{0===this.pointerDownEvent.touches.length||this.pointerDownEvent.moveOrScale||(M("longpress timeout"),this.callEventListeners("longpress",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button}),this.pointerDownEvent.touches=[])}),200),this.pointerDownEvent.moveOrScale=!1,this.pointerDownEvent.distance=null):M("another pointerdown"),this.pointerDownEvent.touches.push(e)},this.handlePointerMove=e=>{if(e.preventDefault(),0===this.pointerDownEvent.touches.length)return;const t=this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId)),n=this.pointerDownEvent.touches[t];if(this.pointerDownEvent.touches[t]=e,1===this.pointerDownEvent.touches.length){const t={x:e.clientX-n.clientX,y:e.clientY-n.clientY};if(!this.pointerDownEvent.moveOrScale&&Math.abs(t.x)<7.5&&Math.abs(t.y)<7.5)return;if(this.translation.x+=t.x,this.translation.y+=t.y,void 0!==this.fieldSize){const e={x:this.fieldSize.w*x*this.scale,y:this.fieldSize.h*x*this.scale},t={x:0-e.x/2,y:0-e.y/2},n={x:w.width-e.x/2,y:w.height-e.y/2};this.translation.x=Math.min(this.translation.x,n.x),this.translation.x=Math.max(this.translation.x,t.x),this.translation.y=Math.min(this.translation.y,n.y),this.translation.y=Math.max(this.translation.y,t.y)}}else{const e=this.pointerDownEvent.touches[0],t=this.pointerDownEvent.touches[1],n=Math.hypot(e.clientX-t.clientX,e.clientY-t.clientY);if(null!=this.pointerDownEvent.distance){const i=n/this.pointerDownEvent.distance,r={x:(e.clientX+t.clientX)/2,y:(e.clientY+t.clientY)/2};this.zoom(i,r.x,r.y)}this.pointerDownEvent.distance=n}this.pointerDownEvent.moveOrScale||(M("pointer moved, not press event"),this.pointerDownEvent.moveOrScale=!0,clearTimeout(this.pointerDownEvent.longPressTimeout)),this.callEventListeners("move",{})},this.handlePointerCancel=e=>{M("pointercancel")},this.handlePointerOut=e=>{e.preventDefault(),0!=this.pointerDownEvent.touches.length&&(this.pointerDownEvent.touches.length>1?(M("pointerout: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),this.pointerDownEvent.distance=null):(M("pointerout: no press event"),clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]))},this.handlePointerUp=e=>{if(e.preventDefault(),0!==this.pointerDownEvent.touches.length){if(this.pointerDownEvent.touches.length>1)return M("pointerup: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),void(this.pointerDownEvent.distance=null);if(this.pointerDownEvent.moveOrScale)M("pointerup");else{M("pointerup: no movement or scaling, press event");const t=Date.now();t-this.lastPressTimestamp>50?(this.lastPressTimestamp=t,this.callEventListeners("press",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button})):M(`last press was ${t-this.lastPressTimestamp}ms ago, no event (min50ms)`)}clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]}},this.registerEvents()}middleTranslation(){return void 0===this.fieldSize?{x:0,y:0}:{x:w.width/2-this.scale*(this.fieldSize.w*x/2),y:w.height/2-this.scale*(this.fieldSize.h*x/2)}}toCanvasPos(e,t){return{x:this.translation.x+e*x*this.scale,y:this.translation.y+t*x*this.scale}}toWorldPos(e,t){return{x:Math.floor((e-this.translation.x)/this.scale/x),y:Math.floor((t-this.translation.y)/this.scale/x)}}zoom(e,t,n){const i=this.scale*e;i>.5&&i<4&&(this.translation.x-=(t-this.translation.x)*(e-1),this.translation.y-=(n-this.translation.y)*(e-1),this.scale=i,this.callEventListeners("move",{}))}draw(e){const t=w.width,n=w.height;f.clearRect(0,0,t,n);for(const t in e){const n=Number(t);for(const t in e[n]){const i=Number(t),r=v.TILES[e[n][i]],s=this.toCanvasPos(i,n);g(r,{x:s.x,y:s.y,w:x*this.scale,h:x*this.scale})}}}get visibleTiles(){const e=w.getBoundingClientRect(),t=x*this.scale,n=this.toWorldPos(e.left-t,e.top-t),i=this.toWorldPos(e.right+t,e.bottom+t);return{x:n.x,y:n.y,w:i.x-n.x,h:i.y-n.y}}reset(){void 0!==this.fieldSize?(this.scale=Math.min(w.width/(this.fieldSize.w*x*1.1),w.height/(this.fieldSize.h*x*1.1)),this.scale=Math.max(this.scale,.5),this.scale=Math.min(this.scale,4)):this.scale=1,this.translation=this.middleTranslation()}registerEvents(){w.addEventListener("wheel",this.handleWheel),w.addEventListener("pointerdown",this.handlePointerDown),w.addEventListener("pointermove",this.handlePointerMove),w.addEventListener("pointercancel",this.handlePointerCancel),w.addEventListener("pointerout",this.handlePointerOut),w.addEventListener("pointerup",this.handlePointerUp)}deregisterEvents(){w.removeEventListener("wheel",this.handleWheel),w.removeEventListener("pointerdown",this.handlePointerDown),w.removeEventListener("pointermove",this.handlePointerMove),w.removeEventListener("pointercancel",this.handlePointerCancel),w.removeEventListener("pointerout",this.handlePointerOut),w.removeEventListener("pointerup",this.handlePointerUp)}}var T=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};l("Creating WASM worker");const S=new Worker(new URL(n.p+n.u(303),n.b)),L=new Map;l("Registering WebIO event listener for Go"),S.addEventListener("message",(e=>{if(e.data){const t=e.data,[n,i]=L.get(t.id);t.success?n(t.data):(l("Error response for '"+t.cmd+"': "+t.data),i(t.data))}}));let A=!1;const I=[];function N(e,t,n){return new Promise(((i,r)=>{const s=function(e,t){return{cmd:e,id:e+Date.now(),data:t}}(e,t);L.set(s.id,[i,r]),n||A?S.postMessage(s):(l(e+" message received, but worker hasn't connected yet. Adding to queue"),I.push(s))}))}function P(e){return T(this,void 0,void 0,(function*(){const t=N("ping",null,!0),n=new Promise(((t,n)=>setTimeout(n,e)));try{return yield Promise.race([t,n]),A=!0,I.forEach((e=>{S.postMessage(e)})),I.length=0,!0}catch(e){return!1}}))}function O(e){return N("init",e)}function C(e){return N("flag",e)}(function(){return T(this,void 0,void 0,(function*(){let e=0,t=100;for(;!A&&e<5;)l("Sending ping with timeout "+t+"ms"),e++,(yield P(t))||(t*=2,l("Ping timeout reached"));if(e>=5)throw new Error("Max pings 5 reached, assuming WASM module is not functional")}))})().then((()=>{l("Response to ping received, worker connected")}));const R=(e,t)=>e.reduce(((e,n)=>e.sprite[t]*e.scale>n.sprite[t]*n.scale?e:n));function H(e,t){const n=w.getBoundingClientRect();return[Math.round(e-n.left),Math.round(t-n.top)]}function _(e,t,n){return e>n.x&&t>n.y&&e<n.x+n.w&&t<n.y+n.h}class U extends D{constructor(e){super(),this.elements=e,this.tallestElement=R(e,"h"),this.longestElement=R(e,"w"),this.elementHitboxes=new Map,this.hoveredElement=null,this.handlePointerMove=e=>{const[t,n]=H(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())if(_(t,n,i))return void(this.hoveredElement!==e&&(this.hoveredElement=e,this.callEventListeners("hover",{hoveredElement:e})));null!==this.hoveredElement&&(this.hoveredElement=null,this.callEventListeners("hover",{hoveredElement:null}))},this.handlePointerDown=e=>{const[t,n]=H(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())_(t,n,i)&&this.callEventListeners("press",{pressedElement:e});return null},this.registerEvents()}draw(e){return t=this,n=void 0,r=function*(){e||(e={x:0,y:0,w:w.width,h:w.height});let t=e.h*(.5/this.elements.length)/(this.tallestElement.sprite.h*this.tallestElement.scale);return t*this.longestElement.sprite.w*this.longestElement.scale>=.9*e.w&&(t=.9*e.w/(this.longestElement.sprite.w*this.longestElement.scale)),new Promise((n=>{let i=e.y+this.tallestElement.sprite.h*t*.5;this.elements.forEach((n=>{const r=n.sprite.w*n.scale*t,s=n.sprite.h*n.scale*t,o={x:e.x+(e.w/2-r/2),y:i,w:r,h:s};n.interactable&&this.elementHitboxes.set(n.id,o);const a=(h=n.sprite,JSON.parse(JSON.stringify(h)));var h;n.id===this.hoveredElement&&"hoveredSprite"in n&&(a.x=n.hoveredSprite.x,a.y=n.hoveredSprite.y),g(a,o),i+=1.5*s})),n()}))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){window.addEventListener("pointermove",this.handlePointerMove),window.addEventListener("pointerdown",this.handlePointerDown)}deregisterEvents(){window.removeEventListener("pointermove",this.handlePointerMove),window.removeEventListener("pointerdown",this.handlePointerDown)}}const Y=e=>({x:e.x,y:e.y});const W={id:"modal.close_button",sprite:v.TILES.CLOSE,scale:1},z={id:"modal.back_button",sprite:v.MODAL.BACK,hoveredSprite:Y(v.MODAL.BACK_HOVERED),scale:1.25,interactable:!0};class k extends U{constructor(e){super(e)}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){yield new Promise((e=>{const t=w.width,n=w.height;f.fillStyle="rgba(0, 0, 0, 0.4)",f.fillRect(0,0,t,n);const i=t>n?.8*n:.8*t,r=t/2-i/2,s=n/2-i/2,o=i/10;for(let e=0;e<10;e++)for(let t=0;t<10;t++){const n={x:r+t*o,y:s+e*o,w:o,h:o};let i={x:v.TILES.EMPTY.w/2,y:v.TILES.EMPTY.h/2,w:1,h:1};0!==t&&9!==t&&0!==e&&9!==e||(9===t&&0===e?(i=W.sprite,this.elementHitboxes.set(W.id,n)):i=v.TILES.HIDDEN),g(i,n)}e({x:r+o,y:s+o,w:i-2*o,h:i-2*o})})).then((t=>e.draw.call(this,t)))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}}const B={id:"modal.retry.title",sprite:v.RETRY_MODAL.TITLE,scale:1},F={id:"modal.retry.retry_button",sprite:v.RETRY_MODAL.RETRY,hoveredSprite:Y(v.RETRY_MODAL.RETRY_HOVERED),scale:1.25,interactable:!0},j=[B,F,z],V=k.bind(k,j),Z={id:"modal.success.title",sprite:v.SUCCESS_MODAL.TITLE,scale:1},J={id:"modal.success.reset_button",sprite:v.SUCCESS_MODAL.RESET,hoveredSprite:Y(v.SUCCESS_MODAL.RESET_HOVERED),scale:1.25,interactable:!0},X=[Z,J,z],G=k.bind(k,X);var K,$=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))},q=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n},Q=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class ee{constructor(){K.set(this,void 0),this.modal=null,q(this,K,!0,"f")}open(e){this.modal=e,q(this,K,!1,"f")}close(){if(!this.modal)throw new Error("No modal to close");this.hide(),this.modal=null}get hidden(){return Q(this,K,"f")}hide(){if(!this.modal)throw new Error("No modal to hide");this.modal.deregisterEvents(),q(this,K,!0,"f")}reveal(){if(!this.modal)throw new Error("No modal to reveal");this.modal.registerEvents(),q(this,K,!1,"f")}draw(){return $(this,void 0,void 0,(function*(){Q(this,K,"f")||(yield this.modal.draw())}))}deregisterEvents(){var e;null===(e=this.modal)||void 0===e||e.deregisterEvents()}}function te(e){e.preventDefault()}K=new WeakMap;class ne{constructor(e){this.props=e,"w"in this.props&&"h"in this.props?this.camera=new b({w:this.props.w,h:this.props.h}):this.camera=new b,this.camera.addEventListener("press",this.handlePress.bind(this)),this.camera.addEventListener("longpress",this.handleLongPress.bind(this)),this.camera.addEventListener("move",this.draw.bind(this)),this.modal=new ee,this.drawWithLimit=m(this.draw.bind(this),100),this.lastDrawTimestamp=0,this.reset(),this.registerEvents()}reset(){let e;if(this.camera.reset(),this.gameOver=!1,"w"in this.props&&"h"in this.props&&"numMines"in this.props)e=O({width:this.props.w,height:this.props.h,mines:this.props.numMines});else{if(!("mineDensity"in this.props))throw new Error("unknown game props type");e=O({mineDensity:this.props.mineDensity})}e.then(this.draw.bind(this))}draw(){return $(this,void 0,void 0,(function*(){const e=Date.now();var t;e-this.lastDrawTimestamp>1e3/60&&(this.lastDrawTimestamp=e,yield(t=this.camera.visibleTiles,N("appearance",t)).then(this.camera.draw.bind(this.camera)).then(this.modal.draw.bind(this.modal)))}))}registerEvents(){window.addEventListener("resize",this.drawWithLimit),w.addEventListener("contextmenu",te),this.modal.hidden&&this.camera.registerEvents()}deregisterEvents(){window.removeEventListener("resize",this.drawWithLimit),w.removeEventListener("contextmenu",te),this.camera.deregisterEvents(),this.modal.deregisterEvents()}handleState(e){switch(e.state){case"win":this.gameOver=!0,l("Win detected, displaying success modal"),this.handleEndGameModal(G,J.id);break;case"loss":this.gameOver=!0,l("Loss detected, displaying retry modal"),setTimeout(this.handleEndGameModal.bind(this,V,F.id),1e3)}}handleEndGameModal(e,t){return $(this,void 0,void 0,(function*(){const n=new e;this.modal.open(n),n.addEventListener("hover",this.draw.bind(this)),n.addEventListener("press",(e=>{switch(e.pressedElement){case W.id:this.modal.hide(),this.camera.registerEvents(),this.draw();break;case t:this.modal.close(),this.camera.registerEvents(),this.reset(),this.draw();break;case z.id:this.deregisterEvents(),this.props.handleBack()}})),this.camera.deregisterEvents(),yield this.draw()}))}handlePress(e){var t;this.gameOver?this.modal.hidden&&(this.modal.reveal(),this.camera.deregisterEvents(),this.draw()):0===e.button?(t=e.pos,N("uncover",t)).then((e=>$(this,void 0,void 0,(function*(){yield this.draw(),this.handleState(e)})))):2===e.button&&C(e.pos).then(this.draw.bind(this))}handleLongPress(e){this.gameOver||0!==e.button||C(e.pos).then(this.draw.bind(this))}}const ie={id:"menu.main.title",sprite:v.MAIN_MENU.TITLE,scale:1},re={id:"menu.main.easy_button",sprite:v.MAIN_MENU.EASY,hoveredSprite:Y(v.MAIN_MENU.EASY_HOVERED),scale:1.25,interactable:!0},se={id:"menu.main.medium_button",sprite:v.MAIN_MENU.MEDIUM,hoveredSprite:Y(v.MAIN_MENU.MEDIUM_HOVERED),scale:1.25,interactable:!0},oe={id:"menu.main.hard_button",sprite:v.MAIN_MENU.HARD,hoveredSprite:Y(v.MAIN_MENU.HARD_HOVERED),scale:1.25,interactable:!0},ae={id:"menu.main.infinite_button",sprite:v.MAIN_MENU.INFINITE,hoveredSprite:Y(v.MAIN_MENU.INFINITE_HOVERED),scale:1.25,interactable:!0},he=[ie,re,se,oe,ae];var ce=n(379),de=n.n(ce),le=n(795),ue=n.n(le),me=n(569),pe=n.n(me),ve=n(565),we=n.n(ve),fe=n(216),Ee=n.n(fe),ye=n(589),ge=n.n(ye),De=n(250),Me={};function xe(){w.width=window.innerWidth,w.height=window.innerHeight,f.imageSmoothingEnabled=!1,f.webkitImageSmoothingEnabled=!1,f.mozImageSmoothingEnabled=!1}Me.styleTagTransform=ge(),Me.setAttributes=we(),Me.insert=pe().bind(null,"head"),Me.domAPI=ue(),Me.insertStyleElement=Ee(),de()(De.Z,Me),De.Z&&De.Z.locals&&De.Z.locals,window.addEventListener("resize",xe),xe();const be=new class extends U{constructor(){super(he),super.addEventListener("press",this.draw.bind(this)),super.addEventListener("hover",this.draw.bind(this)),this.drawWithLimit=m(this.draw.bind(this),100),this.registerEvents()}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){return function(e){return t=this,n=void 0,r=function*(){e||(e={x:0,y:0,w:w.width,h:w.height}),f.clearRect(e.x,e.y,e.w,e.h)},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}().then(e.draw.bind(this))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){super.registerEvents(),window.addEventListener("resize",this.drawWithLimit)}deregisterEvents(){super.deregisterEvents(),window.removeEventListener("resize",this.drawWithLimit)}};be.addEventListener("press",(e=>{let t;switch(be.deregisterEvents(),e.pressedElement){case re.id:t={w:9,h:9,numMines:10};break;case se.id:t={w:16,h:16,numMines:40};break;case oe.id:t={w:30,h:16,numMines:99};break;case ae.id:t={mineDensity:40}}new ne(Object.assign(Object.assign({},t),{handleBack:()=>{be.registerEvents(),be.draw()}}))})),y.then(be.draw.bind(be))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUczQzNFLG1CQUNJekQsTUFBTXlELG1CQUNObFQsT0FBT2dQLG9CQUFvQixTQUFVcFQsS0FBS2ljLGlCRWhEbER3QixHQUFTakwsaUJBQWlCLFNBQVVnQixJQUloQyxJQUFJbUssRUFDSixPQUpBRixHQUFTbkcsbUJBSUQ5RCxFQUFNd0csZ0JBQ2QsS0FBSytDLEdBQVlwZCxHQUNiZ2UsRUFBWSxDQUNSdE4sRUFBRyxFQUNIakMsRUFBRyxFQUNIa08sU0FBVSxJQUVkLE1BQ0osS0FBS1UsR0FBY3JkLEdBQ2ZnZSxFQUFZLENBQ1J0TixFQUFHLEdBQ0hqQyxFQUFHLEdBQ0hrTyxTQUFVLElBRWQsTUFDSixLQUFLVyxHQUFZdGQsR0FDYmdlLEVBQVksQ0FDUnROLEVBQUcsR0FDSGpDLEVBQUcsR0FDSGtPLFNBQVUsSUFFZCxNQUNKLEtBQUtZLEdBQWdCdmQsR0FDakJnZSxFQUFZLENBRVJwQixZQUFhLElBS3JCLElBQUlYLEdBQUssT0FBRCx3QkFDRCtCLEdBQVMsQ0FDWmIsV0FBWSxLQUNSVyxHQUFTckgsaUJBQ1RxSCxHQUFTakgsY0FNckJuRSxFQUFrQnlHLEtBQUsyRSxHQUFTakgsS0FBSzJFLEtBQUtzQyxNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9hc3NldHMvc3R5bGVzLmNzcyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vbm9kZV9tb2R1bGVzL2RhdGVmb3JtYXQvbGliL2RhdGVmb3JtYXQuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvdXRpbC50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9kcmF3LnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2V2ZW50LW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvZ2FtZS9jYW1lcmEudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvZ29pby93b3JrZXItaGVscGVyLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2dvaW8vZ29pby50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9tZW51L21lbnUudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvY29tbW9uLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL21lbnUvbW9kYWwudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvbWVudS9yZXRyeS1tb2RhbC50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9tZW51L3N1Y2Nlc3MtbW9kYWwudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvZ2FtZS9nYW1lLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL21lbnUvbWFpbi1tZW51LnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vYXNzZXRzL3N0eWxlcy5jc3M/Zjc2NCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIG1hcmdpbjogMDtcXG59XFxuY2FudmFzIHtcXG4gICAgaW1hZ2UtcmVuZGVyaW5nOiAtbW96LWNyaXNwLWVkZ2VzO1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IC13ZWJraXQtY3Jpc3AtZWRnZXM7XFxuICAgIGltYWdlLXJlbmRlcmluZzogcGl4ZWxhdGVkO1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IGNyaXNwLWVkZ2VzO1xcbiAgICB0b3VjaC1hY3Rpb246IG5vbmU7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL2Fzc2V0cy9zdHlsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksZ0JBQWdCO0lBQ2hCLFNBQVM7QUFDYjtBQUNBO0lBQ0ksaUNBQWlDO0lBQ2pDLG9DQUFvQztJQUNwQywwQkFBMEI7SUFDMUIsNEJBQTRCO0lBQzVCLGtCQUFrQjtBQUN0QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5IHtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG5jYW52YXMge1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IC1tb3otY3Jpc3AtZWRnZXM7XFxuICAgIGltYWdlLXJlbmRlcmluZzogLXdlYmtpdC1jcmlzcC1lZGdlcztcXG4gICAgaW1hZ2UtcmVuZGVyaW5nOiBwaXhlbGF0ZWQ7XFxuICAgIGltYWdlLXJlbmRlcmluZzogY3Jpc3AtZWRnZXM7XFxuICAgIHRvdWNoLWFjdGlvbjogbm9uZTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuYnVuZGxlLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwidmFyIHRva2VuPS9kezEsNH18RHszLDR9fG17MSw0fXx5eSg/Onl5KT98KFtIaE1zVHRdKVxcMT98V3sxLDJ9fFtMbG9wU1pOXXxcIlteXCJdKlwifCdbXiddKicvZzt2YXIgdGltZXpvbmU9L1xcYig/OltBLVpdezEsM31bQS1aXVtUQ10pKD86Wy0rXVxcZHs0fSk/fCgoPzpBdXN0cmFsaWFuICk/KD86UGFjaWZpY3xNb3VudGFpbnxDZW50cmFsfEVhc3Rlcm58QXRsYW50aWMpICg/OlN0YW5kYXJkfERheWxpZ2h0fFByZXZhaWxpbmcpIFRpbWUpXFxiL2c7dmFyIHRpbWV6b25lQ2xpcD0vW14tK1xcZEEtWl0vZztleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkYXRlRm9ybWF0KGRhdGUsbWFzayx1dGMsZ210KXtpZihhcmd1bWVudHMubGVuZ3RoPT09MSYmdHlwZW9mIGRhdGU9PT1cInN0cmluZ1wiJiYhL1xcZC8udGVzdChkYXRlKSl7bWFzaz1kYXRlO2RhdGU9dW5kZWZpbmVkfWRhdGU9ZGF0ZXx8ZGF0ZT09PTA/ZGF0ZTpuZXcgRGF0ZTtpZighKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSl7ZGF0ZT1uZXcgRGF0ZShkYXRlKX1pZihpc05hTihkYXRlKSl7dGhyb3cgVHlwZUVycm9yKFwiSW52YWxpZCBkYXRlXCIpfW1hc2s9U3RyaW5nKG1hc2tzW21hc2tdfHxtYXNrfHxtYXNrc1tcImRlZmF1bHRcIl0pO3ZhciBtYXNrU2xpY2U9bWFzay5zbGljZSgwLDQpO2lmKG1hc2tTbGljZT09PVwiVVRDOlwifHxtYXNrU2xpY2U9PT1cIkdNVDpcIil7bWFzaz1tYXNrLnNsaWNlKDQpO3V0Yz10cnVlO2lmKG1hc2tTbGljZT09PVwiR01UOlwiKXtnbXQ9dHJ1ZX19dmFyIF89ZnVuY3Rpb24gXygpe3JldHVybiB1dGM/XCJnZXRVVENcIjpcImdldFwifTt2YXIgX2Q9ZnVuY3Rpb24gZCgpe3JldHVybiBkYXRlW18oKStcIkRhdGVcIl0oKX07dmFyIEQ9ZnVuY3Rpb24gRCgpe3JldHVybiBkYXRlW18oKStcIkRheVwiXSgpfTt2YXIgX209ZnVuY3Rpb24gbSgpe3JldHVybiBkYXRlW18oKStcIk1vbnRoXCJdKCl9O3ZhciB5PWZ1bmN0aW9uIHkoKXtyZXR1cm4gZGF0ZVtfKCkrXCJGdWxsWWVhclwiXSgpfTt2YXIgX0g9ZnVuY3Rpb24gSCgpe3JldHVybiBkYXRlW18oKStcIkhvdXJzXCJdKCl9O3ZhciBfTT1mdW5jdGlvbiBNKCl7cmV0dXJuIGRhdGVbXygpK1wiTWludXRlc1wiXSgpfTt2YXIgX3M9ZnVuY3Rpb24gcygpe3JldHVybiBkYXRlW18oKStcIlNlY29uZHNcIl0oKX07dmFyIF9MPWZ1bmN0aW9uIEwoKXtyZXR1cm4gZGF0ZVtfKCkrXCJNaWxsaXNlY29uZHNcIl0oKX07dmFyIF9vPWZ1bmN0aW9uIG8oKXtyZXR1cm4gdXRjPzA6ZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpfTt2YXIgX1c9ZnVuY3Rpb24gVygpe3JldHVybiBnZXRXZWVrKGRhdGUpfTt2YXIgX049ZnVuY3Rpb24gTigpe3JldHVybiBnZXREYXlPZldlZWsoZGF0ZSl9O3ZhciBmbGFncz17ZDpmdW5jdGlvbiBkKCl7cmV0dXJuIF9kKCl9LGRkOmZ1bmN0aW9uIGRkKCl7cmV0dXJuIHBhZChfZCgpKX0sZGRkOmZ1bmN0aW9uIGRkZCgpe3JldHVybiBpMThuLmRheU5hbWVzW0QoKV19LERERDpmdW5jdGlvbiBEREQoKXtyZXR1cm4gZ2V0RGF5TmFtZSh7eTp5KCksbTpfbSgpLGQ6X2QoKSxfOl8oKSxkYXlOYW1lOmkxOG4uZGF5TmFtZXNbRCgpXSxzaG9ydDp0cnVlfSl9LGRkZGQ6ZnVuY3Rpb24gZGRkZCgpe3JldHVybiBpMThuLmRheU5hbWVzW0QoKSs3XX0sRERERDpmdW5jdGlvbiBEREREKCl7cmV0dXJuIGdldERheU5hbWUoe3k6eSgpLG06X20oKSxkOl9kKCksXzpfKCksZGF5TmFtZTppMThuLmRheU5hbWVzW0QoKSs3XX0pfSxtOmZ1bmN0aW9uIG0oKXtyZXR1cm4gX20oKSsxfSxtbTpmdW5jdGlvbiBtbSgpe3JldHVybiBwYWQoX20oKSsxKX0sbW1tOmZ1bmN0aW9uIG1tbSgpe3JldHVybiBpMThuLm1vbnRoTmFtZXNbX20oKV19LG1tbW06ZnVuY3Rpb24gbW1tbSgpe3JldHVybiBpMThuLm1vbnRoTmFtZXNbX20oKSsxMl19LHl5OmZ1bmN0aW9uIHl5KCl7cmV0dXJuIFN0cmluZyh5KCkpLnNsaWNlKDIpfSx5eXl5OmZ1bmN0aW9uIHl5eXkoKXtyZXR1cm4gcGFkKHkoKSw0KX0saDpmdW5jdGlvbiBoKCl7cmV0dXJuIF9IKCklMTJ8fDEyfSxoaDpmdW5jdGlvbiBoaCgpe3JldHVybiBwYWQoX0goKSUxMnx8MTIpfSxIOmZ1bmN0aW9uIEgoKXtyZXR1cm4gX0goKX0sSEg6ZnVuY3Rpb24gSEgoKXtyZXR1cm4gcGFkKF9IKCkpfSxNOmZ1bmN0aW9uIE0oKXtyZXR1cm4gX00oKX0sTU06ZnVuY3Rpb24gTU0oKXtyZXR1cm4gcGFkKF9NKCkpfSxzOmZ1bmN0aW9uIHMoKXtyZXR1cm4gX3MoKX0sc3M6ZnVuY3Rpb24gc3MoKXtyZXR1cm4gcGFkKF9zKCkpfSxsOmZ1bmN0aW9uIGwoKXtyZXR1cm4gcGFkKF9MKCksMyl9LEw6ZnVuY3Rpb24gTCgpe3JldHVybiBwYWQoTWF0aC5mbG9vcihfTCgpLzEwKSl9LHQ6ZnVuY3Rpb24gdCgpe3JldHVybiBfSCgpPDEyP2kxOG4udGltZU5hbWVzWzBdOmkxOG4udGltZU5hbWVzWzFdfSx0dDpmdW5jdGlvbiB0dCgpe3JldHVybiBfSCgpPDEyP2kxOG4udGltZU5hbWVzWzJdOmkxOG4udGltZU5hbWVzWzNdfSxUOmZ1bmN0aW9uIFQoKXtyZXR1cm4gX0goKTwxMj9pMThuLnRpbWVOYW1lc1s0XTppMThuLnRpbWVOYW1lc1s1XX0sVFQ6ZnVuY3Rpb24gVFQoKXtyZXR1cm4gX0goKTwxMj9pMThuLnRpbWVOYW1lc1s2XTppMThuLnRpbWVOYW1lc1s3XX0sWjpmdW5jdGlvbiBaKCl7cmV0dXJuIGdtdD9cIkdNVFwiOnV0Yz9cIlVUQ1wiOmZvcm1hdFRpbWV6b25lKGRhdGUpfSxvOmZ1bmN0aW9uIG8oKXtyZXR1cm4oX28oKT4wP1wiLVwiOlwiK1wiKStwYWQoTWF0aC5mbG9vcihNYXRoLmFicyhfbygpKS82MCkqMTAwK01hdGguYWJzKF9vKCkpJTYwLDQpfSxwOmZ1bmN0aW9uIHAoKXtyZXR1cm4oX28oKT4wP1wiLVwiOlwiK1wiKStwYWQoTWF0aC5mbG9vcihNYXRoLmFicyhfbygpKS82MCksMikrXCI6XCIrcGFkKE1hdGguZmxvb3IoTWF0aC5hYnMoX28oKSklNjApLDIpfSxTOmZ1bmN0aW9uIFMoKXtyZXR1cm5bXCJ0aFwiLFwic3RcIixcIm5kXCIsXCJyZFwiXVtfZCgpJTEwPjM/MDooX2QoKSUxMDAtX2QoKSUxMCE9MTApKl9kKCklMTBdfSxXOmZ1bmN0aW9uIFcoKXtyZXR1cm4gX1coKX0sV1c6ZnVuY3Rpb24gV1coKXtyZXR1cm4gcGFkKF9XKCkpfSxOOmZ1bmN0aW9uIE4oKXtyZXR1cm4gX04oKX19O3JldHVybiBtYXNrLnJlcGxhY2UodG9rZW4sZnVuY3Rpb24obWF0Y2gpe2lmKG1hdGNoIGluIGZsYWdzKXtyZXR1cm4gZmxhZ3NbbWF0Y2hdKCl9cmV0dXJuIG1hdGNoLnNsaWNlKDEsbWF0Y2gubGVuZ3RoLTEpfSl9ZXhwb3J0IHZhciBtYXNrcz17ZGVmYXVsdDpcImRkZCBtbW0gZGQgeXl5eSBISDpNTTpzc1wiLHNob3J0RGF0ZTpcIm0vZC95eVwiLHBhZGRlZFNob3J0RGF0ZTpcIm1tL2RkL3l5eXlcIixtZWRpdW1EYXRlOlwibW1tIGQsIHl5eXlcIixsb25nRGF0ZTpcIm1tbW0gZCwgeXl5eVwiLGZ1bGxEYXRlOlwiZGRkZCwgbW1tbSBkLCB5eXl5XCIsc2hvcnRUaW1lOlwiaDpNTSBUVFwiLG1lZGl1bVRpbWU6XCJoOk1NOnNzIFRUXCIsbG9uZ1RpbWU6XCJoOk1NOnNzIFRUIFpcIixpc29EYXRlOlwieXl5eS1tbS1kZFwiLGlzb1RpbWU6XCJISDpNTTpzc1wiLGlzb0RhdGVUaW1lOlwieXl5eS1tbS1kZCdUJ0hIOk1NOnNzb1wiLGlzb1V0Y0RhdGVUaW1lOlwiVVRDOnl5eXktbW0tZGQnVCdISDpNTTpzcydaJ1wiLGV4cGlyZXNIZWFkZXJGb3JtYXQ6XCJkZGQsIGRkIG1tbSB5eXl5IEhIOk1NOnNzIFpcIn07ZXhwb3J0IHZhciBpMThuPXtkYXlOYW1lczpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIixcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdLG1vbnRoTmFtZXM6W1wiSmFuXCIsXCJGZWJcIixcIk1hclwiLFwiQXByXCIsXCJNYXlcIixcIkp1blwiLFwiSnVsXCIsXCJBdWdcIixcIlNlcFwiLFwiT2N0XCIsXCJOb3ZcIixcIkRlY1wiLFwiSmFudWFyeVwiLFwiRmVicnVhcnlcIixcIk1hcmNoXCIsXCJBcHJpbFwiLFwiTWF5XCIsXCJKdW5lXCIsXCJKdWx5XCIsXCJBdWd1c3RcIixcIlNlcHRlbWJlclwiLFwiT2N0b2JlclwiLFwiTm92ZW1iZXJcIixcIkRlY2VtYmVyXCJdLHRpbWVOYW1lczpbXCJhXCIsXCJwXCIsXCJhbVwiLFwicG1cIixcIkFcIixcIlBcIixcIkFNXCIsXCJQTVwiXX07dmFyIHBhZD1mdW5jdGlvbiBwYWQodmFsKXt2YXIgbGVuPWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1sxXToyO3JldHVybiBTdHJpbmcodmFsKS5wYWRTdGFydChsZW4sXCIwXCIpfTt2YXIgZ2V0RGF5TmFtZT1mdW5jdGlvbiBnZXREYXlOYW1lKF9yZWYpe3ZhciB5PV9yZWYueSxtPV9yZWYubSxkPV9yZWYuZCxfPV9yZWYuXyxkYXlOYW1lPV9yZWYuZGF5TmFtZSxfcmVmJHNob3J0PV9yZWZbXCJzaG9ydFwiXSxfc2hvcnQ9X3JlZiRzaG9ydD09PXZvaWQgMD9mYWxzZTpfcmVmJHNob3J0O3ZhciB0b2RheT1uZXcgRGF0ZTt2YXIgeWVzdGVyZGF5PW5ldyBEYXRlO3llc3RlcmRheS5zZXREYXRlKHllc3RlcmRheVtfK1wiRGF0ZVwiXSgpLTEpO3ZhciB0b21vcnJvdz1uZXcgRGF0ZTt0b21vcnJvdy5zZXREYXRlKHRvbW9ycm93W18rXCJEYXRlXCJdKCkrMSk7dmFyIHRvZGF5X2Q9ZnVuY3Rpb24gdG9kYXlfZCgpe3JldHVybiB0b2RheVtfK1wiRGF0ZVwiXSgpfTt2YXIgdG9kYXlfbT1mdW5jdGlvbiB0b2RheV9tKCl7cmV0dXJuIHRvZGF5W18rXCJNb250aFwiXSgpfTt2YXIgdG9kYXlfeT1mdW5jdGlvbiB0b2RheV95KCl7cmV0dXJuIHRvZGF5W18rXCJGdWxsWWVhclwiXSgpfTt2YXIgeWVzdGVyZGF5X2Q9ZnVuY3Rpb24geWVzdGVyZGF5X2QoKXtyZXR1cm4geWVzdGVyZGF5W18rXCJEYXRlXCJdKCl9O3ZhciB5ZXN0ZXJkYXlfbT1mdW5jdGlvbiB5ZXN0ZXJkYXlfbSgpe3JldHVybiB5ZXN0ZXJkYXlbXytcIk1vbnRoXCJdKCl9O3ZhciB5ZXN0ZXJkYXlfeT1mdW5jdGlvbiB5ZXN0ZXJkYXlfeSgpe3JldHVybiB5ZXN0ZXJkYXlbXytcIkZ1bGxZZWFyXCJdKCl9O3ZhciB0b21vcnJvd19kPWZ1bmN0aW9uIHRvbW9ycm93X2QoKXtyZXR1cm4gdG9tb3Jyb3dbXytcIkRhdGVcIl0oKX07dmFyIHRvbW9ycm93X209ZnVuY3Rpb24gdG9tb3Jyb3dfbSgpe3JldHVybiB0b21vcnJvd1tfK1wiTW9udGhcIl0oKX07dmFyIHRvbW9ycm93X3k9ZnVuY3Rpb24gdG9tb3Jyb3dfeSgpe3JldHVybiB0b21vcnJvd1tfK1wiRnVsbFllYXJcIl0oKX07aWYodG9kYXlfeSgpPT09eSYmdG9kYXlfbSgpPT09bSYmdG9kYXlfZCgpPT09ZCl7cmV0dXJuIF9zaG9ydD9cIlRkeVwiOlwiVG9kYXlcIn1lbHNlIGlmKHllc3RlcmRheV95KCk9PT15JiZ5ZXN0ZXJkYXlfbSgpPT09bSYmeWVzdGVyZGF5X2QoKT09PWQpe3JldHVybiBfc2hvcnQ/XCJZc2RcIjpcIlllc3RlcmRheVwifWVsc2UgaWYodG9tb3Jyb3dfeSgpPT09eSYmdG9tb3Jyb3dfbSgpPT09bSYmdG9tb3Jyb3dfZCgpPT09ZCl7cmV0dXJuIF9zaG9ydD9cIlRtd1wiOlwiVG9tb3Jyb3dcIn1yZXR1cm4gZGF5TmFtZX07dmFyIGdldFdlZWs9ZnVuY3Rpb24gZ2V0V2VlayhkYXRlKXt2YXIgdGFyZ2V0VGh1cnNkYXk9bmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLGRhdGUuZ2V0TW9udGgoKSxkYXRlLmdldERhdGUoKSk7dGFyZ2V0VGh1cnNkYXkuc2V0RGF0ZSh0YXJnZXRUaHVyc2RheS5nZXREYXRlKCktKHRhcmdldFRodXJzZGF5LmdldERheSgpKzYpJTcrMyk7dmFyIGZpcnN0VGh1cnNkYXk9bmV3IERhdGUodGFyZ2V0VGh1cnNkYXkuZ2V0RnVsbFllYXIoKSwwLDQpO2ZpcnN0VGh1cnNkYXkuc2V0RGF0ZShmaXJzdFRodXJzZGF5LmdldERhdGUoKS0oZmlyc3RUaHVyc2RheS5nZXREYXkoKSs2KSU3KzMpO3ZhciBkcz10YXJnZXRUaHVyc2RheS5nZXRUaW1lem9uZU9mZnNldCgpLWZpcnN0VGh1cnNkYXkuZ2V0VGltZXpvbmVPZmZzZXQoKTt0YXJnZXRUaHVyc2RheS5zZXRIb3Vycyh0YXJnZXRUaHVyc2RheS5nZXRIb3VycygpLWRzKTt2YXIgd2Vla0RpZmY9KHRhcmdldFRodXJzZGF5LWZpcnN0VGh1cnNkYXkpLyg4NjRlNSo3KTtyZXR1cm4gMStNYXRoLmZsb29yKHdlZWtEaWZmKX07dmFyIGdldERheU9mV2Vlaz1mdW5jdGlvbiBnZXREYXlPZldlZWsoZGF0ZSl7dmFyIGRvdz1kYXRlLmdldERheSgpO2lmKGRvdz09PTApe2Rvdz03fXJldHVybiBkb3d9O2V4cG9ydCB2YXIgZm9ybWF0VGltZXpvbmU9ZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUoZGF0ZSl7cmV0dXJuKFN0cmluZyhkYXRlKS5tYXRjaCh0aW1lem9uZSl8fFtcIlwiXSkucG9wKCkucmVwbGFjZSh0aW1lem9uZUNsaXAsXCJcIikucmVwbGFjZSgvR01UXFwrMDAwMC9nLFwiVVRDXCIpfTsiLCJpbXBvcnQgZGF0ZUZvcm1hdCBmcm9tICdkYXRlZm9ybWF0JztcblxuY29uc3QgTE9HX1RJTUVfRk9STUFUID0gJ3l5eXkvbW0vZGQgSEg6TU06c3MubCc7XG5cbi8vIFdyaXRlcyB0aGUgZ2l2ZW4gdGV4dCB0byB0aGUgY29uc29sZSwgd2l0aCAnSlM6ICcgcHJlcGVuZGVkICh0byBkaXN0aW5ndWlzaFxuLy8gZnJvbSBsb2dzIGluIHRoZSBXQVNNIG1vZHVsZSlcbmV4cG9ydCBmdW5jdGlvbiBjb25zb2xlTG9nKHMpIHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnNvbGUubG9nKCcoJyArIGRhdGVGb3JtYXQobm93LCBMT0dfVElNRV9GT1JNQVQpICsgJykgSlM6ICcgKyBzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lT2JqKG8pIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvKSk7XG59XG5cbmNvbnN0IHRpbWVvdXRJZEZvckZ1bmMgPSBuZXcgTWFwPFRpbWVySGFuZGxlciwgbnVtYmVyPigpO1xuXG4vLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBvbmx5IGNhbGxzIGZ1bmMgaWYgdGhlcmUgaGF2ZVxuLy8gYmVlbiBubyBjYWxscyB0byB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gaW4gZGVsYXkgbWlsbGlzZWNvbmRzLlxuLy8gVXNlZnVsIGZvciBwcmV2ZW50aW5nIGV4Y2Vzc2l2ZSBjYWxscyBmcm9tIGV2ZW50IGhhbmRsZXJzIChlLmcuIG5vdCBkcmF3aW5nIG9uIGV2ZXJ5IHJlc2l6ZSBldmVudClcbmV4cG9ydCBmdW5jdGlvbiBsaW1pdGVyKGZ1bmM6IFRpbWVySGFuZGxlciwgZGVsYXk6IG51bWJlcikge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gdGltZW91dElkRm9yRnVuYy5nZXQoZnVuYyk7XG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aW1lb3V0SWRGb3JGdW5jLnNldChmdW5jLCBzZXRUaW1lb3V0KGZ1bmMsIGRlbGF5KSk7XG4gICAgfTtcbn0iLCJpbXBvcnQge1JlY3R9IGZyb20gJy4vY29tbW9uJztcbmltcG9ydCB7Y29uc29sZUxvZ30gZnJvbSAnLi91dGlsJztcblxuLy8gQ29uc3RhbnQgZm9yIHRoZSBzaXplIG9mIGEgdGlsZSBpbiB0aGUgc3ByaXRlc2hlZXRcbmV4cG9ydCBjb25zdCBUSUxFX1NJWkUgPSAxMDtcblxuLy8gQ29uc3RhbnQgZm9yIHRoZSBoZWlnaHQgb2YgYSByb3cgaW4gdGhlIHNwcml0ZXNoZWV0XG5leHBvcnQgY29uc3QgUk9XX0hFSUdIVCA9IFRJTEVfU0laRTtcblxuZXhwb3J0IGNvbnN0IFNQUklURVMgPSB7XG4gICAgVElMRVM6IHtcbiAgICAgICAgRU1QVFk6IHt4OiAwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgMToge3g6IDEwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgMjoge3g6IDIwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgMzoge3g6IDMwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgNDoge3g6IDQwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgNToge3g6IDUwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgNjoge3g6IDYwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgNzoge3g6IDcwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgODoge3g6IDgwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgTUlORToge3g6IDkwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgSElEREVOOiB7eDogMTAwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgRkxBRzoge3g6IDExMCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIENMT1NFOiB7eDogMTIwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdFxuICAgIH0sXG5cbiAgICBNT0RBTDoge1xuICAgICAgICBCQUNLOiB7eDogMCwgeTogOTAsIHc6IDI0LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBCQUNLX0hPVkVSRUQ6IHt4OiAyNCwgeTogOTAsIHc6IDI0LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0XG4gICAgfSxcblxuICAgIE1BSU5fTUVOVToge1xuICAgICAgICBUSVRMRToge3g6IDAsIHk6IDEwLCB3OiA5NSwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgRUFTWToge3g6IDAsIHk6IDIwLCB3OiAyNiwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgRUFTWV9IT1ZFUkVEOiB7eDogMjYsIHk6IDIwLCB3OiAyNiwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgTUVESVVNOiB7eDogMCwgeTogMzAsIHc6IDM1LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBNRURJVU1fSE9WRVJFRDoge3g6IDM1LCB5OiAzMCwgdzogMzAsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIEhBUkQ6IHt4OiAwLCB5OiA0MCwgdzogMjUsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIEhBUkRfSE9WRVJFRDoge3g6IDI1LCB5OiA0MCwgdzogMjYsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIENVU1RPTToge3g6IDAsIHk6IDUwLCB3OiAzOCwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgQ1VTVE9NX0hPVkVSRUQ6IHt4OiAzOCwgeTogNTAsIHc6IDI2LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBJTkZJTklURToge3g6IDAsIHk6IDYwLCB3OiA0MywgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgSU5GSU5JVEVfSE9WRVJFRDoge3g6IDQzLCB5OiA2MCwgdzogNDMsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3RcbiAgICB9LFxuXG4gICAgUkVUUllfTU9EQUw6IHtcbiAgICAgICAgVElUTEU6IHt4OiAwLCB5OiA3MCwgdzogNDUsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIFJFVFJZOiB7eDogMCwgeTogODAsIHc6IDMwLCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBSRVRSWV9IT1ZFUkVEOiB7eDogMzAsIHk6IDgwLCB3OiAzMCwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICB9LFxuXG4gICAgU1VDQ0VTU19NT0RBTDoge1xuICAgICAgICBUSVRMRToge3g6IDAsIHk6IDEwMCwgdzogNTIsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIFJFU0VUOiB7eDogMCwgeTogMTEwLCB3OiA1MywgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgUkVTRVRfSE9WRVJFRDoge3g6IDUzLCB5OiAxMTAsIHc6IDUzLCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgIH1cbn07XG5cbi8vIFRoZSBjYW52YXNcbmV4cG9ydCBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG5cbi8vIFRoZSBncmFwaGljYWwgY29udGV4dCB0byBkcmF3IHRvXG5leHBvcnQgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbmNvbnN0IHNwcml0ZXNoZWV0ID0gbmV3IEltYWdlKCk7XG5cbmV4cG9ydCBjb25zdCBzcHJpdGVzaGVldExvYWRlZCA9IG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgIHNwcml0ZXNoZWV0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGVMb2coJ0ZpbmlzaGVkIGxvYWRpbmcgc3ByaXRlc2hlZXQnKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xufSk7XG5cbnNwcml0ZXNoZWV0LnNyYyA9IG5ldyBVUkwoJy4uL2Fzc2V0cy9zcHJpdGVzaGVldC5wbmcnLCBpbXBvcnQubWV0YS51cmwpLnRvU3RyaW5nKCk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhcihyZWN0PzogUmVjdCkge1xuICAgIGlmICghcmVjdCkge1xuICAgICAgICByZWN0ID0ge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICB3OiBjYW52YXMud2lkdGgsXG4gICAgICAgICAgICBoOiBjYW52YXMuaGVpZ2h0XG4gICAgICAgIH07XG4gICAgfVxuICAgIGN0eC5jbGVhclJlY3QocmVjdC54LCByZWN0LnksIHJlY3QudywgcmVjdC5oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdTcHJpdGUoc3ByaXRlOiBSZWN0LCBkcmF3UmVjdDogUmVjdCkge1xuICAgIGN0eC5kcmF3SW1hZ2Uoc3ByaXRlc2hlZXQsXG4gICAgICAgIHNwcml0ZS54LCBzcHJpdGUueSwgc3ByaXRlLncsIHNwcml0ZS5oLFxuICAgICAgICBkcmF3UmVjdC54LCBkcmF3UmVjdC55LCBkcmF3UmVjdC53LCBkcmF3UmVjdC5oKTtcbn1cbiIsImV4cG9ydCB0eXBlIEV2ZW50TGlzdGVuZXI8RXZlbnRNYXBUPiA9IChldmVudDogRXZlbnRNYXBUW2tleW9mIEV2ZW50TWFwVF0pID0+IHZvaWRcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRNYW5hZ2VyPEV2ZW50TWFwVD4ge1xuICAgIHByaXZhdGUgZXZlbnRMaXN0ZW5lcnM6IE1hcDxrZXlvZiBFdmVudE1hcFQsIEFycmF5PEV2ZW50TGlzdGVuZXI8RXZlbnRNYXBUPj4+O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEV2ZW50TGlzdGVuZXI8SyBleHRlbmRzIGtleW9mIEV2ZW50TWFwVD4odHlwZTogSywgbGlzdGVuZXI6IChldmVudDogRXZlbnRNYXBUW0tdKSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyc0ZvckV2ZW50ID0gdGhpcy5ldmVudExpc3RlbmVycy5nZXQodHlwZSkgPz8gW107XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMuc2V0KHR5cGUsIFsuLi5saXN0ZW5lcnNGb3JFdmVudCwgbGlzdGVuZXJdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgRXZlbnRNYXBUPih0eXBlOiBLLCBsaXN0ZW5lcjogKGV2ZW50OiBFdmVudE1hcFRbS10pID0+IHZvaWQpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzRm9yRXZlbnQgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLmdldCh0eXBlKSA/PyBbXTtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5zZXQodHlwZSxcbiAgICAgICAgICAgIGxpc3RlbmVyc0ZvckV2ZW50LmZpbHRlcihsaXN0ZW5lckZvckV2ZW50ID0+IGxpc3RlbmVyRm9yRXZlbnQgPT09IGxpc3RlbmVyKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNhbGxFdmVudExpc3RlbmVyczxLIGV4dGVuZHMga2V5b2YgRXZlbnRNYXBUPih0eXBlOiBLLCBldmVudDogRXZlbnRNYXBUW0tdKSB7XG4gICAgICAgICh0aGlzLmV2ZW50TGlzdGVuZXJzLmdldCh0eXBlKSA/PyBbXSkuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcihldmVudCkpO1xuICAgIH1cbn0iLCJpbXBvcnQge1NQUklURVMsIGNhbnZhcywgY3R4LCBkcmF3U3ByaXRlfSBmcm9tICcuLi9kcmF3JztcblxuaW1wb3J0IEV2ZW50TWFuYWdlciBmcm9tICcuLi9ldmVudC1tYW5hZ2VyJztcblxuaW1wb3J0ICogYXMgVXRpbCBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7UG9zLCBSZWN0LCBTaXplfSBmcm9tICcuLi9jb21tb24nO1xuXG5mdW5jdGlvbiBjb25zb2xlTG9nKHMpIHtcbiAgICBVdGlsLmNvbnNvbGVMb2coJyhjYW1lcmEpICcgKyBzKTtcbn1cblxuLy8gdG9kbyB0cmFuc2xhdGUvc2NhbGUgb24gd2luZG93IHJlc2l6ZVxuLy8gdG9kbyBoYW5kbGUgY2FudmFzIHRoYXQgaXNuJ3QgZnVsbHNjcmVlbiBwcm9wZXJseSAodGhvdWdoIHRoaXMgaXNuJ3QgcGFydGljdWxhcmx5IHVzZWZ1bClcblxuLy8gQ29uc3RhbnQgZm9yIHRoZSBkcmF3IHNpemUgb2YgYSB0aWxlXG5jb25zdCBUSUxFX0RSQVdfU0laRSA9IDMwO1xuXG4vLyBDb25zdGFudCBmb3IgdGhlIG1pbmltdW0gc2NhbGVcbmNvbnN0IE1JTl9TQ0FMRSA9IDAuNTtcbi8vIENvbnN0YW50IGZvciB0aGUgbWF4aW11bSBzY2FsZVxuY29uc3QgTUFYX1NDQUxFID0gNC4wO1xuXG5jb25zdCBNT1VTRV9XSEVFTF9TQ0FMRV9GQUNUT1IgPSAwLjg7XG5cbi8vIENvbnN0YW50IGZvciBob3cgbG9uZyBhIHBvaW50ZXIgbmVlZHMgdG8gYmUgcHJlc3NlZCB0byBiZSBhIFwibG9uZyBwcmVzc1wiLCBpblxuLy8gbWlsbGlzZWNvbmRzXG5jb25zdCBMT05HX1BSRVNTX0RFTEFZX01TID0gMjAwO1xuXG4vLyBDb25zdGFudCBmb3IgaG93IGxvbmcgYWZ0ZXIgYSBwcmVzcyBldmVudCBhbm90aGVyXG4vLyBwcmVzcyBldmVudCBjYW4gYmUgdHJpZ2dlcmVkICh0byBwcmV2ZW50IHNwYW1taW5nKVxuY29uc3QgUFJFU1NfTElNSVRfTVMgPSA1MDtcblxuLy8gdG9kbyBwYXNzIHVzZWZ1bCBpbmZvcm1hdGlvbiBoZXJlLCBlLmcuIGRlbHRhIHNjYWxlL3RyYW5zbGF0aW9uXG5leHBvcnQgdHlwZSBNb3ZlRXZlbnQgPSBSZWNvcmQ8c3RyaW5nLCBuZXZlcj5cblxuZXhwb3J0IHR5cGUgUHJlc3NFdmVudCA9IHtcbiAgICBwb3M6IFBvc1xuICAgIGJ1dHRvbjogbnVtYmVyXG59XG5cbmludGVyZmFjZSBDYW1lcmFFdmVudE1hcCB7XG4gICAgLy8gQSBtb3ZlIGV2ZW50IGluY2x1ZGVzIHpvb21pbmcgaW4gb3Igb3V0XG4gICAgJ21vdmUnOiBNb3ZlRXZlbnRcbiAgICAncHJlc3MnOiBQcmVzc0V2ZW50XG4gICAgJ2xvbmdwcmVzcyc6IFByZXNzRXZlbnRcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FtZXJhIGV4dGVuZHMgRXZlbnRNYW5hZ2VyPENhbWVyYUV2ZW50TWFwPiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWVsZFNpemU6IFNpemUgfCB1bmRlZmluZWQ7XG5cbiAgICBwcml2YXRlIHRyYW5zbGF0aW9uOiBQb3M7XG4gICAgcHJpdmF0ZSBzY2FsZTogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSBwb2ludGVyRG93bkV2ZW50IDoge1xuICAgICAgICB0b3VjaGVzOiBBcnJheTxQb2ludGVyRXZlbnQ+XG4gICAgICAgIG1vdmVPclNjYWxlOiBib29sZWFuLFxuICAgICAgICBkaXN0YW5jZTogbnVtYmVyIHwgbnVsbCxcbiAgICAgICAgbG9uZ1ByZXNzVGltZW91dDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4gfCBudWxsXG4gICAgfTtcblxuICAgIHByaXZhdGUgbGFzdFByZXNzVGltZXN0YW1wO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVXaGVlbDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVBvaW50ZXJEb3duO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlUG9pbnRlck1vdmU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVQb2ludGVyQ2FuY2VsO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlUG9pbnRlck91dDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVBvaW50ZXJVcDtcblxuICAgIGNvbnN0cnVjdG9yKGZpZWxkU2l6ZT86IFNpemUpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmZpZWxkU2l6ZSA9IGZpZWxkU2l6ZTtcblxuICAgICAgICAvLyBSZXNldCB0aGUgY2FtZXJhXG4gICAgICAgIHRoaXMucmVzZXQoKTtcblxuICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQgPSB7XG4gICAgICAgICAgICB0b3VjaGVzOiBbXSxcbiAgICAgICAgICAgIG1vdmVPclNjYWxlOiBmYWxzZSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgbG9uZ1ByZXNzVGltZW91dDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubGFzdFByZXNzVGltZXN0YW1wID0gMDtcblxuICAgICAgICB0aGlzLmhhbmRsZVdoZWVsID0gKGV2ZW50IDogV2hlZWxFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgICAgICAgIGNvbnN0IGZhY3RvciA9IGV2ZW50LmRlbHRhWSA+IDAgPyBNT1VTRV9XSEVFTF9TQ0FMRV9GQUNUT1IgOiAxIC8gTU9VU0VfV0hFRUxfU0NBTEVfRkFDVE9SO1xuXG4gICAgICAgICAgICAvLyBab29tIHRoZSBjYW1lcmFcbiAgICAgICAgICAgIHRoaXMuem9vbShmYWN0b3IsIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlckRvd24gPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgcG9pbnRlciBldmVudFxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygnZmlyc3QgcG9pbnRlcmRvd24nKTtcbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHRpbWVvdXQgZm9yIGxvbmcgcHJlc3Nlc1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5sb25nUHJlc3NUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSB3YXMgYSBwb2ludGVyIGRvd24gZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50Lm1vdmVPclNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZUxvZygnbG9uZ3ByZXNzIHRpbWVvdXQnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ2xvbmdwcmVzcycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogdGhpcy50b1dvcmxkUG9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzWzBdLmNsaWVudFgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSksXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b246IGV2ZW50LmJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgdG91Y2hlc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgIH0sIExPTkdfUFJFU1NfREVMQVlfTVMpO1xuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBvdGhlciBmaWVsZHNcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQuZGlzdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlTG9nKCdhbm90aGVyIHBvaW50ZXJkb3duJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFkZCB0aGUgcG9pbnRlciBldmVudFxuICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMucHVzaChldmVudCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgcHJldmlvdXMgdG91Y2ggZXZlbnRcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzVG91Y2hJbmRleCA9IHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgICBlID0+IGUucG9pbnRlcklkID09PSBldmVudC5wb2ludGVySWQpO1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdG91Y2hcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzVG91Y2ggPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1twcmV2aW91c1RvdWNoSW5kZXhdO1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB0b3VjaCBldmVudFxuICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXNbcHJldmlvdXNUb3VjaEluZGV4XSA9IGV2ZW50O1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG9ubHkgb25lIHRvdWNoIGV2ZW50XG4gICAgICAgICAgICBpZiAodGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBhbW91bnQgdGhlIHBvaW50ZXIgbW92ZWRcbiAgICAgICAgICAgICAgICBjb25zdCBkZWx0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogZXZlbnQuY2xpZW50WCAtIHByZXZpb3VzVG91Y2guY2xpZW50WCxcbiAgICAgICAgICAgICAgICAgICAgeTogZXZlbnQuY2xpZW50WSAtIHByZXZpb3VzVG91Y2guY2xpZW50WVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgcmVnaXN0ZXIgYXMgYSBtb3ZlT3JTY2FsZSBldmVudCBpZiB0aGUgcG9pbnRlciBvbmx5IG1vdmVkIGhhbGYgYSB0aWxlIChub1xuICAgICAgICAgICAgICAgIC8vIHNjYWxpbmcpXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUgJiZcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoZGVsdGEueCkgPCBUSUxFX0RSQVdfU0laRSAvIDQgJiZcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoZGVsdGEueSkgPCBUSUxFX0RSQVdfU0laRSAvIDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUcmFuc2xhdGUgdGhlIGNhbWVyYVxuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueCArPSBkZWx0YS54O1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueSArPSBkZWx0YS55O1xuXG4gICAgICAgICAgICAgICAgLy8gUmVzdHJpY3QgdGhlIGNhbWVyYSBpZiB0aGUgZmllbGQgaXMgZml4ZWQgc2l6ZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkUmVhbFNpemUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB0aGlzLmZpZWxkU2l6ZS53ICogVElMRV9EUkFXX1NJWkUgKiB0aGlzLnNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5maWVsZFNpemUuaCAqIFRJTEVfRFJBV19TSVpFICogdGhpcy5zY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBdCBsZWFzdCBoYWxmIHRoZSBmaWVsZCBtdXN0IGJlIHZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogMCAtIChmaWVsZFJlYWxTaXplLnggLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IDAgLSAoZmllbGRSZWFsU2l6ZS55IC8gMilcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogY2FudmFzLndpZHRoIC0gKGZpZWxkUmVhbFNpemUueCAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogY2FudmFzLmhlaWdodCAtIChmaWVsZFJlYWxTaXplLnkgLyAyKVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIExpbWl0IHRoZSB0cmFuc2xhdGlvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uLnggPSBNYXRoLm1pbih0aGlzLnRyYW5zbGF0aW9uLngsIG1heC54KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGlvbi54ID0gTWF0aC5tYXgodGhpcy50cmFuc2xhdGlvbi54LCBtaW4ueCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueSA9IE1hdGgubWluKHRoaXMudHJhbnNsYXRpb24ueSwgbWF4LnkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uLnkgPSBNYXRoLm1heCh0aGlzLnRyYW5zbGF0aW9uLnksIG1pbi55KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG11bHRpcGxlLCB0aGlzIGlzIGEgcGluY2ggZXZlbnRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0d28gdG91Y2ggZXZlbnRzICh3ZSBvbmx5IGNhcmUgYWJvdXQgdGhlIGZpcnN0IHR3bywgZXZlbiBpZlxuICAgICAgICAgICAgICAgIC8vIHRoZSB1c2VyIGhhcyBtb3JlIHRoYW4gMiBmaW5nZXJzIHByZXNzZWQgb24gdGhlIHNjcmVlbilcbiAgICAgICAgICAgICAgICBjb25zdCB0b3VjaDAgPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3VjaDEgPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1sxXTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIHRvdWNoIGV2ZW50c1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5oeXBvdChcbiAgICAgICAgICAgICAgICAgICAgdG91Y2gwLmNsaWVudFggLSB0b3VjaDEuY2xpZW50WCxcbiAgICAgICAgICAgICAgICAgICAgdG91Y2gwLmNsaWVudFkgLSB0b3VjaDEuY2xpZW50WSk7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiBhIHByZXZpb3VzIGRpc3RhbmNlIGhhcyBiZWVuIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wb2ludGVyRG93bkV2ZW50LmRpc3RhbmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmFjdG9yID0gZGlzdGFuY2UgLyB0aGlzLnBvaW50ZXJEb3duRXZlbnQuZGlzdGFuY2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBjZW50ZXIgb2YgdGhlIHpvb21cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VudGVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogKHRvdWNoMC5jbGllbnRYICsgdG91Y2gxLmNsaWVudFgpIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6ICh0b3VjaDAuY2xpZW50WSArIHRvdWNoMS5jbGllbnRZKSAvIDJcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBab29tIHRoZSBjYW1lcmEgYXJvdW5kIHRoZSBjZW50ZXJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b29tKGZhY3RvciwgY2VudGVyLngsIGNlbnRlci55KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgcG9pbnRlciBhcyBoYXZpbmcgbW92ZWQgKHNvIHRoZSB1c2VyIGRvZXNuJ3QgZmxhZyBzb21ldGhpbmcgYnlcbiAgICAgICAgICAgIC8vIGRyYWdnaW5nKVxuICAgICAgICAgICAgaWYgKCF0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlTG9nKCdwb2ludGVyIG1vdmVkLCBub3QgcHJlc3MgZXZlbnQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBvaW50ZXJEb3duRXZlbnQubG9uZ1ByZXNzVGltZW91dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhbGwgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ21vdmUnLCB7fSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyQ2FuY2VsID0gKGV2ZW50OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIHRvZG9cbiAgICAgICAgICAgIGNvbnNvbGVMb2coJ3BvaW50ZXJjYW5jZWwnKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlck91dCA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZXJlIHdhcyBhIHBvaW50ZXIgZG93biBldmVudFxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgcG9pbnRlcnNcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygncG9pbnRlcm91dDogb25lIG9mIG11bHRpcGxlJyk7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBwb2ludGVyJ3MgdG91Y2hcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcyA9IHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgZSA9PiBlLnBvaW50ZXJJZCAhPT0gZXZlbnQucG9pbnRlcklkKTtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LmRpc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygncG9pbnRlcm91dDogbm8gcHJlc3MgZXZlbnQnKTtcbiAgICAgICAgICAgICAgICAvLyBDbGVhciB0aGUgZXZlbnRcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wb2ludGVyRG93bkV2ZW50LmxvbmdQcmVzc1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyVXAgPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSB3YXMgYSBwb2ludGVyIGRvd24gZXZlbnRcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBwb2ludGVyc1xuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlTG9nKCdwb2ludGVydXA6IG9uZSBvZiBtdWx0aXBsZScpO1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgcG9pbnRlcidzIHRvdWNoXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMgPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgIGUgPT4gZS5wb2ludGVySWQgIT09IGV2ZW50LnBvaW50ZXJJZCk7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBkaXN0YW5jZVxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5kaXN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcG9pbnRlciBkaWRuJ3QgbW92ZU9yU2NhbGVcbiAgICAgICAgICAgIGlmICghdGhpcy5wb2ludGVyRG93bkV2ZW50Lm1vdmVPclNjYWxlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygncG9pbnRlcnVwOiBubyBtb3ZlbWVudCBvciBzY2FsaW5nLCBwcmVzcyBldmVudCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyAtIHRoaXMubGFzdFByZXNzVGltZXN0YW1wID4gUFJFU1NfTElNSVRfTVMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0UHJlc3NUaW1lc3RhbXAgPSBub3c7XG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxFdmVudExpc3RlbmVycygncHJlc3MnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHRoaXMudG9Xb3JsZFBvcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1swXS5jbGllbnRYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzWzBdLmNsaWVudFkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uOiBldmVudC5idXR0b25cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZUxvZyhgbGFzdCBwcmVzcyB3YXMgJHtub3cgLSB0aGlzLmxhc3RQcmVzc1RpbWVzdGFtcH1tcyBhZ28sIG5vIGV2ZW50IChtaW4ke1BSRVNTX0xJTUlUX01TfW1zKWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygncG9pbnRlcnVwJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENsZWFyIHRoZSBldmVudFxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucG9pbnRlckRvd25FdmVudC5sb25nUHJlc3NUaW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzID0gW107XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50cygpO1xuICAgIH1cblxuICAgIC8vIFJldHVybnMgdGhlIHRyYW5zbGF0aW9uIHNvIHRoZSBnYW1lIGZpZWxkIGlzIGluIHRoZSBtaWRkbGUgb2YgdGhlIGNhbnZhc1xuICAgIHByaXZhdGUgbWlkZGxlVHJhbnNsYXRpb24oKTogUG9zIHtcbiAgICAgICAgLy8gSWYgdGhlcmUncyBubyBmaWVsZCBzaXplLCB0aGUgbWlkZGxlIGlzIGp1c3QgMCwgMFxuICAgICAgICBpZiAodGhpcy5maWVsZFNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHt4OiAwLCB5OiAwfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogKGNhbnZhcy53aWR0aCAvIDIpIC0gKHRoaXMuc2NhbGUgKiAoKHRoaXMuZmllbGRTaXplLncgKiBUSUxFX0RSQVdfU0laRSkgLyAyKSksXG4gICAgICAgICAgICB5OiAoY2FudmFzLmhlaWdodCAvIDIpIC0gKHRoaXMuc2NhbGUgKiAoKHRoaXMuZmllbGRTaXplLmggKiBUSUxFX0RSQVdfU0laRSkgLyAyKSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9DYW52YXNQb3MoeCwgeTogbnVtYmVyKTogUG9zIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHRoaXMudHJhbnNsYXRpb24ueCArICh4ICogVElMRV9EUkFXX1NJWkUgKiB0aGlzLnNjYWxlKSxcbiAgICAgICAgICAgIHk6IHRoaXMudHJhbnNsYXRpb24ueSArICh5ICogVElMRV9EUkFXX1NJWkUgKiB0aGlzLnNjYWxlKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9Xb3JsZFBvcyh4LCB5OiBudW1iZXIpOiBQb3Mge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogTWF0aC5mbG9vcigoKHggLSB0aGlzLnRyYW5zbGF0aW9uLngpIC8gdGhpcy5zY2FsZSkgLyBUSUxFX0RSQVdfU0laRSksXG4gICAgICAgICAgICB5OiBNYXRoLmZsb29yKCgoeSAtIHRoaXMudHJhbnNsYXRpb24ueSkgLyB0aGlzLnNjYWxlKSAvIFRJTEVfRFJBV19TSVpFKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBab29tcyB0aGUgY2FtZXJhIGJ5IHRoZSBnaXZlbiBmYWN0b3IgYXJvdW5kIHRoZSBnaXZlbiBwb2ludFxuICAgIHByaXZhdGUgem9vbShmYWN0b3I6IG51bWJlciwgeCwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgY2FtZXJhJ3MgbmV3IHNjYWxlXG4gICAgICAgIGNvbnN0IG5ld1NjYWxlID0gdGhpcy5zY2FsZSAqIGZhY3RvcjtcblxuICAgICAgICAvLyBPbmx5IGNoYW5nZSB0aGUgc2NhbGUgaWYgaXQncyB2YWxpZFxuICAgICAgICBpZiAobmV3U2NhbGUgPiBNSU5fU0NBTEUgJiYgbmV3U2NhbGUgPCBNQVhfU0NBTEUpIHtcbiAgICAgICAgICAgIC8vIFRyYW5zbGF0ZSB0aGUgZmllbGQgc28gdGhlIG1vdXNlIGlzIHN0aWxsIG92ZXIgdGhlIHNhbWUgdGlsZVxuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGlvbi54IC09ICh4IC0gdGhpcy50cmFuc2xhdGlvbi54KSAqIChmYWN0b3IgLSAxKTtcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueSAtPSAoeSAtIHRoaXMudHJhbnNsYXRpb24ueSkgKiAoZmFjdG9yIC0gMSk7XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgbmV3IHNjYWxlXG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gbmV3U2NhbGU7XG5cbiAgICAgICAgICAgIC8vIENhbGwgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ21vdmUnLCB7fSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdyh0aWxlRGF0YTogQXJyYXk8QXJyYXk8c3RyaW5nPj4pIHtcbiAgICAgICAgLy8gVGhlIGNhbnZhcyB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICAgIGNvbnN0IHcgPSBjYW52YXMud2lkdGgsIGggPSBjYW52YXMuaGVpZ2h0O1xuXG4gICAgICAgIC8vIENsZWFyIHRoZSBjYW52YXMgKGZvciBub3cpXG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdywgaCk7XG5cbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0aWxlc1xuICAgICAgICBmb3IgKGNvbnN0IHlLZXkgaW4gdGlsZURhdGEpIHtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gdXNlIHRoZSAnaW4nIHN5bnRheCwgYXMgdGlsZURhdGEgbWlnaHQgbm90IGJlIDAuLi50aWxlRGF0YS5sZW5ndGhcbiAgICAgICAgICAgIGNvbnN0IHkgPSBOdW1iZXIoeUtleSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHhLZXkgaW4gdGlsZURhdGFbeV0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gTnVtYmVyKHhLZXkpO1xuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgc3ByaXRlXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ByaXRlID0gU1BSSVRFUy5USUxFU1t0aWxlRGF0YVt5XVt4XV07XG4gICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgdGlsZSBvbiB0aGUgY2FudmFzXG4gICAgICAgICAgICAgICAgY29uc3QgcG9zID0gdGhpcy50b0NhbnZhc1Bvcyh4LCB5KTtcbiAgICAgICAgICAgICAgICBkcmF3U3ByaXRlKHNwcml0ZSwge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcG9zaXRpb24gb2YgdGhlIHRpbGUgdG8gZHJhdyB0b1xuICAgICAgICAgICAgICAgICAgICB4OiBwb3MueCwgeTogcG9zLnksXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzaXplIG9mIHRoZSB0aWxlIHRvIGRyYXcgdG9cbiAgICAgICAgICAgICAgICAgICAgdzogVElMRV9EUkFXX1NJWkUgKiB0aGlzLnNjYWxlLCBoOiBUSUxFX0RSQVdfU0laRSAqIHRoaXMuc2NhbGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgdmlzaWJsZVRpbGVzKCk6IFJlY3Qge1xuICAgICAgICBjb25zdCBjYW52YXNSZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGNvbnN0IHRpbGVTaXplID0gVElMRV9EUkFXX1NJWkUgKiB0aGlzLnNjYWxlO1xuXG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMudG9Xb3JsZFBvcyhjYW52YXNSZWN0LmxlZnQgLSB0aWxlU2l6ZSwgY2FudmFzUmVjdC50b3AgLSB0aWxlU2l6ZSk7XG4gICAgICAgIGNvbnN0IG1heCA9IHRoaXMudG9Xb3JsZFBvcyhjYW52YXNSZWN0LnJpZ2h0ICsgdGlsZVNpemUsIGNhbnZhc1JlY3QuYm90dG9tICsgdGlsZVNpemUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogbWluLngsXG4gICAgICAgICAgICB5OiBtaW4ueSxcbiAgICAgICAgICAgIHc6IG1heC54IC0gbWluLngsXG4gICAgICAgICAgICBoOiBtYXgueSAtIG1pbi55LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFJlc2V0IHRoZSBjYW1lcmEgdG8gdGhlIG1pZGRsZSBvZiB0aGUgZmllbGRcbiAgICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgICAgIC8vIElmIHRoZSBmaWVsZCBzaXplIGlzIHNldFxuICAgICAgICBpZiAodGhpcy5maWVsZFNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gRml0IHRoZSBnYW1lIGluIHRoZSBjYW52YXNcbiAgICAgICAgICAgIHRoaXMuc2NhbGUgPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggLyAodGhpcy5maWVsZFNpemUudyAqIFRJTEVfRFJBV19TSVpFICogMS4xKSxcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0IC8gKHRoaXMuZmllbGRTaXplLmggKiBUSUxFX0RSQVdfU0laRSAqIDEuMSkpO1xuICAgICAgICAgICAgLy8gUmVzdHJpY3QgdGhlIHNjYWxlXG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gTWF0aC5tYXgodGhpcy5zY2FsZSwgTUlOX1NDQUxFKTtcbiAgICAgICAgICAgIHRoaXMuc2NhbGUgPSBNYXRoLm1pbih0aGlzLnNjYWxlLCBNQVhfU0NBTEUpO1xuXG4gICAgICAgICAgICAvLyBPdGhlcndpc2Ugc2V0IHRoZSBzY2FsZSB0byBqdXN0IDFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2NhbGUgPSAxLjA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmFuc2xhdGUgdG8gdGhlIG1pZGRsZVxuICAgICAgICB0aGlzLnRyYW5zbGF0aW9uID0gdGhpcy5taWRkbGVUcmFuc2xhdGlvbigpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5oYW5kbGVXaGVlbCk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJjYW5jZWwnLCB0aGlzLmhhbmRsZVBvaW50ZXJDYW5jZWwpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm91dCcsIHRoaXMuaGFuZGxlUG9pbnRlck91dCk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCk7XG4gICAgfVxuXG4gICAgcHVibGljIGRlcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuaGFuZGxlV2hlZWwpO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLmhhbmRsZVBvaW50ZXJEb3duKTtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSk7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyY2FuY2VsJywgdGhpcy5oYW5kbGVQb2ludGVyQ2FuY2VsKTtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJvdXQnLCB0aGlzLmhhbmRsZVBvaW50ZXJPdXQpO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgdGhpcy5oYW5kbGVQb2ludGVyVXApO1xuICAgIH1cblxufSIsImltcG9ydCAqIGFzIFV0aWwgZnJvbSAnLi4vdXRpbCc7XG5cbi8vIENyZWF0ZSB0aGUgV0FTTSB3ZWIgd29ya2VyXG5VdGlsLmNvbnNvbGVMb2coJ0NyZWF0aW5nIFdBU00gd29ya2VyJyk7XG5jb25zdCB3b3JrZXIgPSBuZXcgV29ya2VyKG5ldyBVUkwoJy4vd29ya2VyLnRzJywgaW1wb3J0Lm1ldGEudXJsKSk7XG5cbnR5cGUgTWVzc2FnZTxUPiA9IHtcbiAgICBjbWQ6IHN0cmluZyxcbiAgICBpZDogc3RyaW5nLFxuICAgIGRhdGE6IFRcbn1cblxudHlwZSBSZXNwb25zZU1lc3NhZ2U8VD4gPSBNZXNzYWdlPFQ+ICYge1xuICAgIHN1Y2Nlc3M6IGJvb2xlYW5cbn1cblxuZnVuY3Rpb24gbmV3TWVzc2FnZTxUPihjbWQ6IHN0cmluZywgZGF0YTogVCk6IE1lc3NhZ2U8VD4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNtZCxcbiAgICAgICAgLy8gV2UncmUgYXNzdW1pbmcgdGhlIGNtZCBuYW1lICsgY3VycmVudCB0aW1lIGluIG1pbGxpc2Vjb25kcyBpcyBhIGdvb2QgZW5vdWdoIElEXG4gICAgICAgIGlkOiBjbWQgKyBEYXRlLm5vdygpLFxuICAgICAgICBkYXRhXG4gICAgfTtcbn1cblxuLy8gQSBtYXAgb2YgcHJvbWlzZXMsIGluZGV4ZWQgYnkgbWVzc2FnZSBJRFxuY29uc3QgcHJvbWlzZXMgPSBuZXcgTWFwPHN0cmluZywgWyhkYXRhOiB1bmtub3duKSA9PiB2b2lkLCAoZXJyOiB1bmtub3duKSA9PiB2b2lkXT4oKTtcblxuVXRpbC5jb25zb2xlTG9nKCdSZWdpc3RlcmluZyBXZWJJTyBldmVudCBsaXN0ZW5lciBmb3IgR28nKTtcbndvcmtlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZSA9PiB7XG4gICAgaWYgKGUuZGF0YSkge1xuICAgICAgICBjb25zdCByZXNwb25zZTogUmVzcG9uc2VNZXNzYWdlPHVua25vd24+ID0gZS5kYXRhO1xuICAgICAgICBjb25zdCBbcmVzb2x2ZSwgcmVqZWN0XSA9IHByb21pc2VzLmdldChyZXNwb25zZS5pZCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgVXRpbC5jb25zb2xlTG9nKCdFcnJvciByZXNwb25zZSBmb3IgXFwnJyArIHJlc3BvbnNlLmNtZCArICdcXCc6ICcgKyByZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgIHJlamVjdChyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG4vLyBXaGV0aGVyIHRoZSB3b3JrZXIgaGFzIGJlZW4gY29ubmVjdGVkXG5leHBvcnQgbGV0IHdvcmtlckNvbm5lY3RlZCA9IGZhbHNlO1xuXG4vLyBNZXNzYWdlcyB0aGF0IGhhdmUgYmVlbiBwb3N0ZWQgd2hpbGUgdGhlIHdvcmtlciBpcyBiZWluZyBjcmVhdGVkXG5jb25zdCBxdWV1ZWRNZXNzYWdlczogQXJyYXk8TWVzc2FnZTx1bmtub3duPj4gPSBbXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3RNZXNzYWdlPFQsIFI+KGNtZDogc3RyaW5nLCBkYXRhPzogVCwgbm9RdWV1ZT86IGJvb2xlYW4pOiBQcm9taXNlPFI+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBtc2cgPSBuZXdNZXNzYWdlKGNtZCwgZGF0YSk7XG4gICAgICAgIC8vIEFkZCB0aGUgcHJvbWlzZVxuICAgICAgICBwcm9taXNlcy5zZXQobXNnLmlkLCBbcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICAgIGlmICghbm9RdWV1ZSAmJiAhd29ya2VyQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICBVdGlsLmNvbnNvbGVMb2coY21kICsgJyBtZXNzYWdlIHJlY2VpdmVkLCBidXQgd29ya2VyIGhhc25cXCd0IGNvbm5lY3RlZCB5ZXQuIEFkZGluZyB0byBxdWV1ZScpO1xuICAgICAgICAgICAgcXVldWVkTWVzc2FnZXMucHVzaChtc2cpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VuZFBpbmcodGltZW91dDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgcGluZ1Byb21pc2UgPSBwb3N0TWVzc2FnZSgncGluZycsIG51bGwsIHRydWUpO1xuICAgIGNvbnN0IHRpbWVvdXRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IHNldFRpbWVvdXQociwgdGltZW91dCkpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQXdhaXQgdGhlIHBpbmcsIGFuZCBpZiBpdCBzdWNjZWVkc1xuICAgICAgICBhd2FpdCBQcm9taXNlLnJhY2UoW3BpbmdQcm9taXNlLCB0aW1lb3V0UHJvbWlzZV0pO1xuICAgICAgICAvLyBTZXQgdGhlIHdvcmtlciBhcyBjb25uZWN0ZWRcbiAgICAgICAgd29ya2VyQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gUG9zdCB0aGUgcXVldWVkIG1lc3NhZ2VzIHRvIHRoZSB3b3JrZXJcbiAgICAgICAgcXVldWVkTWVzc2FnZXMuZm9yRWFjaCgobXNnKSA9PiB7XG4gICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIENsZWFyIHRoZSBxdWV1ZVxuICAgICAgICBxdWV1ZWRNZXNzYWdlcy5sZW5ndGggPSAwO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAvLyBJZiB0aGUgdGltZW91dCBwcm9taXNlIHJlc29sdmVkIGZpcnN0XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5jb25zdCBNQVhfUElOR1MgPSA1O1xuXG5hc3luYyBmdW5jdGlvbiBzZW5kUGluZ1VudGlsQ29ubmVjdCgpIHtcbiAgICBsZXQgcGluZ3MgPSAwO1xuICAgIGxldCB0aW1lb3V0ID0gMTAwO1xuICAgIHdoaWxlICghd29ya2VyQ29ubmVjdGVkICYmIHBpbmdzIDwgTUFYX1BJTkdTKSB7XG4gICAgICAgIFV0aWwuY29uc29sZUxvZygnU2VuZGluZyBwaW5nIHdpdGggdGltZW91dCAnICsgdGltZW91dCArICdtcycpO1xuICAgICAgICBwaW5ncysrO1xuICAgICAgICBpZiAoIWF3YWl0IHNlbmRQaW5nKHRpbWVvdXQpKSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gdGltZW91dCAqIDI7XG4gICAgICAgICAgICBVdGlsLmNvbnNvbGVMb2coJ1BpbmcgdGltZW91dCByZWFjaGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGluZ3MgPj0gTUFYX1BJTkdTKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWF4IHBpbmdzICcgKyBNQVhfUElOR1MgKyAnIHJlYWNoZWQsIGFzc3VtaW5nIFdBU00gbW9kdWxlIGlzIG5vdCBmdW5jdGlvbmFsJyk7XG4gICAgfVxufVxuc2VuZFBpbmdVbnRpbENvbm5lY3QoKS50aGVuKCgpID0+IHtcbiAgICBVdGlsLmNvbnNvbGVMb2coJ1Jlc3BvbnNlIHRvIHBpbmcgcmVjZWl2ZWQsIHdvcmtlciBjb25uZWN0ZWQnKTtcbn0pOyIsImltcG9ydCB7cG9zdE1lc3NhZ2V9IGZyb20gJy4vd29ya2VyLWhlbHBlcic7XG5cbmltcG9ydCB7UG9zLCBSZWN0fSBmcm9tICcuLi9jb21tb24nO1xuXG5leHBvcnQgdHlwZSBJbml0UmVxdWVzdERhdGEgPSB7XG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgICBtaW5lczogbnVtYmVyXG59IHwge1xuICAgIG1pbmVEZW5zaXR5OiBudW1iZXJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoZGF0YTogSW5pdFJlcXVlc3REYXRhKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHBvc3RNZXNzYWdlKCdpbml0JywgZGF0YSk7XG59XG5cbmV4cG9ydCB0eXBlIEFwcGVhcmFuY2VSZXF1ZXN0RGF0YSA9IFJlY3RcblxuZXhwb3J0IHR5cGUgQXBwZWFyYW5jZVJlc3BvbnNlRGF0YSA9IEFycmF5PEFycmF5PHN0cmluZz4+XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlYXJhbmNlKGRhdGE6IEFwcGVhcmFuY2VSZXF1ZXN0RGF0YSk6IFByb21pc2U8QXBwZWFyYW5jZVJlc3BvbnNlRGF0YT4ge1xuICAgIHJldHVybiBwb3N0TWVzc2FnZSgnYXBwZWFyYW5jZScsIGRhdGEpO1xufVxuXG5leHBvcnQgdHlwZSBVbmNvdmVyUmVxdWVzdERhdGEgPSBQb3NcblxuZXhwb3J0IHR5cGUgVW5jb3ZlclJlc3BvbnNlRGF0YSA9IHtcbiAgICBzdGF0ZTogc3RyaW5nLFxuICAgIHRpbWVyOiBudW1iZXJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuY292ZXIoZGF0YTogVW5jb3ZlclJlcXVlc3REYXRhKTogUHJvbWlzZTxVbmNvdmVyUmVzcG9uc2VEYXRhPiB7XG4gICAgcmV0dXJuIHBvc3RNZXNzYWdlKCd1bmNvdmVyJywgZGF0YSk7XG59XG5cbmV4cG9ydCB0eXBlIEZsYWdSZXF1ZXN0RGF0YSA9IFBvc1xuXG5leHBvcnQgZnVuY3Rpb24gZmxhZyhkYXRhOiBGbGFnUmVxdWVzdERhdGEpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gcG9zdE1lc3NhZ2UoJ2ZsYWcnLCBkYXRhKTtcbn1cbiIsImltcG9ydCB7Y2FudmFzLCBkcmF3U3ByaXRlfSBmcm9tICcuLi9kcmF3JztcbmltcG9ydCBFdmVudE1hbmFnZXIgZnJvbSAnLi4vZXZlbnQtbWFuYWdlcic7XG5cbmltcG9ydCB7UG9zLCBSZWN0fSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHtjbG9uZU9ian0gZnJvbSAnLi4vdXRpbCc7XG5cbmV4cG9ydCB0eXBlIEhpdGJveCA9IFJlY3RcblxuZXhwb3J0IHR5cGUgRWxlbWVudCA9IHtcbiAgICBpZDogc3RyaW5nXG4gICAgc3ByaXRlOiBSZWN0LFxuICAgIGhvdmVyZWRTcHJpdGU/OiBQb3MsXG4gICAgc2NhbGU6IG51bWJlcixcbiAgICBpbnRlcmFjdGFibGU/OiBib29sZWFuXG59XG5cbmNvbnN0IGJpZ2dlc3RFbGVtZW50QnlGaWVsZCA9IChlbGVtZW50czogQXJyYXk8RWxlbWVudD4sIGZpZWxkOiBzdHJpbmcpID0+XG4gICAgZWxlbWVudHMucmVkdWNlKChwcmV2LCBjdXJyKSA9PlxuICAgICAgICBwcmV2LnNwcml0ZVtmaWVsZF0gKiBwcmV2LnNjYWxlID4gY3Vyci5zcHJpdGVbZmllbGRdICogY3Vyci5zY2FsZSA/IHByZXYgOiBjdXJyKTtcblxuZnVuY3Rpb24gZ2V0QWJzUG9zKHgsIHk6IG51bWJlcikge1xuICAgIGNvbnN0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIFtNYXRoLnJvdW5kKHggLSByZWN0LmxlZnQpLCBNYXRoLnJvdW5kKHkgLSByZWN0LnRvcCldO1xufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3QoeCwgeTogbnVtYmVyLCBoaXRib3g6IEhpdGJveCkge1xuICAgIHJldHVybiB4ID4gaGl0Ym94LnggJiYgeSA+IGhpdGJveC55ICYmXG4gICAgICAgIHggPCBoaXRib3gueCArIGhpdGJveC53ICYmIHkgPCBoaXRib3gueSArIGhpdGJveC5oO1xufVxuXG5leHBvcnQgdHlwZSBFbGVtZW50UHJlc3NFdmVudCA9IHtcbiAgICBwcmVzc2VkRWxlbWVudDogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIEVsZW1lbnRIb3ZlcmVkRXZlbnQgPSB7XG4gICAgaG92ZXJlZEVsZW1lbnQ6IHN0cmluZyB8IG51bGxcbn1cblxuaW50ZXJmYWNlIE1lbnVFdmVudE1hcCB7XG4gICAgJ3ByZXNzJzogRWxlbWVudFByZXNzRXZlbnRcbiAgICAnaG92ZXInOiBFbGVtZW50SG92ZXJlZEV2ZW50XG59XG5cbi8vIENsYXNzIGZvciBhIHZlcnkgc2ltcGxlIG1lbnUsIHdoZXJlIGVhY2ggXCJlbGVtZW50XCIgaXMgZHJhd24gdG9wIGRvd24sIGVxdWFsbHkgc3BhY2VkXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW51IGV4dGVuZHMgRXZlbnRNYW5hZ2VyPE1lbnVFdmVudE1hcD4ge1xuICAgIHByaXZhdGUgZWxlbWVudHM6IEFycmF5PEVsZW1lbnQ+O1xuICAgIHByaXZhdGUgdGFsbGVzdEVsZW1lbnQ6IEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBsb25nZXN0RWxlbWVudDogRWxlbWVudDtcblxuICAgIHByb3RlY3RlZCBlbGVtZW50SGl0Ym94ZXM6IE1hcDxzdHJpbmcsIEhpdGJveD47XG4gICAgcHJvdGVjdGVkIGhvdmVyZWRFbGVtZW50OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVQb2ludGVyTW92ZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVBvaW50ZXJEb3duO1xuXG4gICAgY29uc3RydWN0b3IoZWxlbWVudHM6IEFycmF5PEVsZW1lbnQ+KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICAgICAgdGhpcy50YWxsZXN0RWxlbWVudCA9IGJpZ2dlc3RFbGVtZW50QnlGaWVsZChlbGVtZW50cywgJ2gnKTtcbiAgICAgICAgdGhpcy5sb25nZXN0RWxlbWVudCA9IGJpZ2dlc3RFbGVtZW50QnlGaWVsZChlbGVtZW50cywgJ3cnKTtcblxuICAgICAgICB0aGlzLmVsZW1lbnRIaXRib3hlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5ob3ZlcmVkRWxlbWVudCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGFic29sdXRlIFggYW5kIFkgb2YgdGhlIGJ1dHRvbiBwcmVzc1xuICAgICAgICAgICAgY29uc3QgW3gsIHldID0gZ2V0QWJzUG9zKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICAgICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBtZW51IGVsZW1lbnRzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtlbGVtZW50LCBoaXRib3hdIG9mIHRoaXMuZWxlbWVudEhpdGJveGVzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBwb2ludGVyIGludGVyc2VjdGVkIHRoZSBtZW51IGl0ZW1cbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0KHgsIHksIGhpdGJveCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBuZXdseSBob3ZlcmVkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhvdmVyZWRFbGVtZW50ICE9PSBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJlZEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ2hvdmVyJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyZWRFbGVtZW50OiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgYW4gZWxlbWVudCBpcyBiZWluZyBob3ZlcmVkIG92ZXIgKGJ1dCBub3QgYW55bW9yZSlcbiAgICAgICAgICAgIGlmICh0aGlzLmhvdmVyZWRFbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgdGhlIGhvdmVyZWQgZWxlbWVudFxuICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJlZEVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FsbEV2ZW50TGlzdGVuZXJzKCdob3ZlcicsIHtcbiAgICAgICAgICAgICAgICAgICAgaG92ZXJlZEVsZW1lbnQ6IG51bGxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZVBvaW50ZXJEb3duID0gKGV2ZW50OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYWJzb2x1dGUgWCBhbmQgWSBvZiB0aGUgYnV0dG9uIHByZXNzXG4gICAgICAgICAgICBjb25zdCBbeCwgeV0gPSBnZXRBYnNQb3MoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIG1lbnUgZWxlbWVudHNcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2VsZW1lbnQsIGhpdGJveF0gb2YgdGhpcy5lbGVtZW50SGl0Ym94ZXMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHBvaW50ZXIgaW50ZXJzZWN0ZWQgdGhlIG1lbnUgaXRlbVxuICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3QoeCwgeSwgaGl0Ym94KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxFdmVudExpc3RlbmVycygncHJlc3MnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzc2VkRWxlbWVudDogZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZHJhdyhib3VuZHM/OiBSZWN0KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIC8vIElmIHRoZSBib3VuZHMgd2VyZW4ndCBnaXZlblxuICAgICAgICBpZiAoIWJvdW5kcykge1xuICAgICAgICAgICAgLy8gV2UgYXNzdW1lIHRoZSBib3VuZHMgYXJlIHRoZSB3aG9sZSBjYW52YXNcbiAgICAgICAgICAgIGJvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgdzogY2FudmFzLndpZHRoLFxuICAgICAgICAgICAgICAgIGg6IGNhbnZhcy5oZWlnaHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmlyc3QsIHNjYWxlIHNvIHRoZSBlbGVtZW50cyBhcmUgZXZlbmx5IHNwYWNlZCBieSBoZWlnaHRcbiAgICAgICAgbGV0IHNjYWxlID0gKGJvdW5kcy5oICogKDAuNSAvIHRoaXMuZWxlbWVudHMubGVuZ3RoKSkgL1xuICAgICAgICAgICAgKHRoaXMudGFsbGVzdEVsZW1lbnQuc3ByaXRlLmggKiB0aGlzLnRhbGxlc3RFbGVtZW50LnNjYWxlKTtcblxuICAgICAgICAvLyBJZiB0aGUgbG9uZ2VzdCBlbGVtZW50IHdvdWxkIGJlIHRvbyBsb25nXG4gICAgICAgIGlmIChzY2FsZSAqIHRoaXMubG9uZ2VzdEVsZW1lbnQuc3ByaXRlLncgKiB0aGlzLmxvbmdlc3RFbGVtZW50LnNjYWxlID49IGJvdW5kcy53ICogMC45KSB7XG4gICAgICAgICAgICAvLyBTY2FsZSBzbyB0aGUgbG9uZ2VzdCBlbGVtZW50IGlzIDkwJSB0aGUgd2lkdGggb2YgdGhlIGNhbnZhc1xuICAgICAgICAgICAgc2NhbGUgPSAoYm91bmRzLncgKiAwLjkpIC8gKHRoaXMubG9uZ2VzdEVsZW1lbnQuc3ByaXRlLncgKiB0aGlzLmxvbmdlc3RFbGVtZW50LnNjYWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGxldCB5ID0gYm91bmRzLnkgKyAodGhpcy50YWxsZXN0RWxlbWVudC5zcHJpdGUuaCAqIHNjYWxlICogMC41KTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWxXaWR0aCA9IGVsZW1lbnQuc3ByaXRlLncgKiBlbGVtZW50LnNjYWxlICogc2NhbGU7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0dWFsSGVpZ2h0ID0gZWxlbWVudC5zcHJpdGUuaCAqIGVsZW1lbnQuc2NhbGUgKiBzY2FsZTtcblxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgZWxlbWVudCdzIGhpdGJveFxuICAgICAgICAgICAgICAgIGNvbnN0IGhpdGJveDogSGl0Ym94ID0ge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudCdzIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgIHg6IGJvdW5kcy54ICsgKChib3VuZHMudyAvIDIpIC0gKGFjdHVhbFdpZHRoIC8gMikpLCB5OiB5LFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudCdzIHNpemVcbiAgICAgICAgICAgICAgICAgICAgdzogYWN0dWFsV2lkdGgsIGg6IGFjdHVhbEhlaWdodCxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaW50ZXJhY3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgZWxlbWVudCdzIGhpdGJveCB0byB0aGUgbWFwXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudEhpdGJveGVzLnNldChlbGVtZW50LmlkLCBoaXRib3gpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IGNsb25lT2JqKGVsZW1lbnQuc3ByaXRlKTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGVsZW1lbnQgaXMgYmVpbmcgaG92ZXJlZCBvdmVyIChhbmQgaGFzIGEgc3ByaXRlKVxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmlkID09PSB0aGlzLmhvdmVyZWRFbGVtZW50ICYmICdob3ZlcmVkU3ByaXRlJyBpbiBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlJ3JlIGFzc3VtaW5nIHRoZSBob3ZlcmVkIHNwcml0ZSBpcyB0aGUgc2FtZSBzaXplIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgc3ByaXRlLnggPSBlbGVtZW50LmhvdmVyZWRTcHJpdGUueDtcbiAgICAgICAgICAgICAgICAgICAgc3ByaXRlLnkgPSBlbGVtZW50LmhvdmVyZWRTcHJpdGUueTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEcmF3IHRoZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgZHJhd1Nwcml0ZShzcHJpdGUsIGhpdGJveCk7XG5cbiAgICAgICAgICAgICAgICAvLyBNb3ZlIHRoZSB5IGRvd25cbiAgICAgICAgICAgICAgICB5ICs9IGFjdHVhbEhlaWdodCAqIDEuNTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyByZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgfVxufSIsImV4cG9ydCB0eXBlIFBvcyA9IHtcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyXG59XG5cbmV4cG9ydCB0eXBlIFNpemUgPSB7XG4gICAgdzogbnVtYmVyLFxuICAgIGg6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBSZWN0ID0gUG9zICYgU2l6ZVxuXG5leHBvcnQgY29uc3QgcG9zID0gKHI6IFJlY3QpOiBQb3MgPT4gKHt4OiByLngsIHk6IHIueX0pO1xuXG5leHBvcnQgY29uc3QgcmVjdCA9IChwOiBQb3MsIHM6IFNpemUpOiBSZWN0ID0+ICh7eDogcC54LCB5OiBwLnksIHc6IHMudywgaDogcy5ofSk7IiwiaW1wb3J0IE1lbnUsIHtFbGVtZW50fSBmcm9tICcuL21lbnUnO1xuaW1wb3J0IHtTUFJJVEVTLCBjYW52YXMsIGN0eCwgZHJhd1Nwcml0ZX0gZnJvbSAnLi4vZHJhdyc7XG5cbmltcG9ydCB7UmVjdCwgcG9zfSBmcm9tICcuLi9jb21tb24nO1xuXG4vLyBUSGUgYmFja2dyb3VuZCBvZiB0aGUgbW9kYWwgaXMgbWFkZSB1cCBvZiBhIGdyaWQgb2YgMTJ4MTIgdGlsZXNcbmNvbnN0IE1PREFMX0dSSURfU0laRSA9IDEwO1xuXG5leHBvcnQgY29uc3QgQ0xPU0VfQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbW9kYWwuY2xvc2VfYnV0dG9uJyxcbiAgICBzcHJpdGU6IFNQUklURVMuVElMRVMuQ0xPU0UsXG4gICAgc2NhbGU6IDFcbn07XG5cbmV4cG9ydCBjb25zdCBCQUNLX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21vZGFsLmJhY2tfYnV0dG9uJyxcbiAgICBzcHJpdGU6IFNQUklURVMuTU9EQUwuQkFDSyxcbiAgICBob3ZlcmVkU3ByaXRlOiBwb3MoU1BSSVRFUy5NT0RBTC5CQUNLX0hPVkVSRUQpLFxuICAgIHNjYWxlOiAxLjI1LFxuICAgIGludGVyYWN0YWJsZTogdHJ1ZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWwgZXh0ZW5kcyBNZW51IHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50czogQXJyYXk8RWxlbWVudD4pIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudHMpO1xuICAgIH1cblxuICAgIGFzeW5jIGRyYXcoKSB7XG4gICAgICAgIC8vIERyYXcgdGhlIGJhY2tncm91bmQgaW4gYSBwcm9taXNlXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlPFJlY3Q+KHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgLy8gVGhlIGNhbnZhcyB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICAgICAgICBjb25zdCB3ID0gY2FudmFzLndpZHRoLCBoID0gY2FudmFzLmhlaWdodDtcblxuICAgICAgICAgICAgLy8gRGFya2VuIHRoZSBmaWVsZFxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuNCknO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIHcsIGgpO1xuXG4gICAgICAgICAgICAvLyBUaGUgbW9kYWwgaXMgODAlIHRoZSBoZWlnaHQgb2YgdGhlIGNhbnZhcyBpZiBsYW5kc2NhcGUsIG9yIDgwJSB0aGUgd2lkdGggaWYgcG9ydHJhaXRcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsU2l6ZSA9IHcgPiBoID8gaCAqIDAuOCA6IHcgKiAwLjg7XG5cbiAgICAgICAgICAgIGNvbnN0IG1vZGFsWCA9ICh3IC8gMikgLSAobW9kYWxTaXplIC8gMik7XG4gICAgICAgICAgICBjb25zdCBtb2RhbFkgPSAoaCAvIDIpIC0gKG1vZGFsU2l6ZSAvIDIpO1xuXG4gICAgICAgICAgICAvLyBUaGUgYmFja2dyb3VuZCBpcyBtYWRlIHVwIG9mIGEgZ3JpZCBvZiAxMngxMiB0aWxlc1xuICAgICAgICAgICAgY29uc3QgdGlsZVNpemUgPSBtb2RhbFNpemUgLyBNT0RBTF9HUklEX1NJWkU7XG5cbiAgICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgTU9EQUxfR1JJRF9TSVpFOyB5KyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IE1PREFMX0dSSURfU0laRTsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgdGlsZSdzIGhpdGJveFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoaXRib3g6IFJlY3QgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBtb2RhbFggKyAoeCAqIHRpbGVTaXplKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IG1vZGFsWSArICh5ICogdGlsZVNpemUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdzogdGlsZVNpemUsIGg6IHRpbGVTaXplLFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvZG8gZHJhdyB0aGUgYmFja2dyb3VuZCBwcm9wZXJseVxuICAgICAgICAgICAgICAgICAgICBsZXQgc3ByaXRlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGljayB0aGUgY2VudGVyIHBpeGVsXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBTUFJJVEVTLlRJTEVTLkVNUFRZLncgLyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogU1BSSVRFUy5USUxFUy5FTVBUWS5oIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHc6IDEsIGg6IDFcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBSZWN0O1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdGlsZSBzaG91bGQgYmUgYSBjb3JuZXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTU9EQUxfR1JJRF9TSVpFIC0gMSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgeSA9PT0gMCB8fCB5ID09PSBNT0RBTF9HUklEX1NJWkUgLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdGlsZSBpcyBpbiB0aGUgdXBwZXIgcmlnaHQgY29ybmVyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeCA9PT0gTU9EQUxfR1JJRF9TSVpFIC0gMSAmJiB5ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQgaXMgdGhlIGNsb3NlIGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZSA9IENMT1NFX0JVVFRPTi5zcHJpdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBoaXRib3ggdG8gdGhlIG1lbnVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRIaXRib3hlcy5zZXQoQ0xPU0VfQlVUVE9OLmlkLCBoaXRib3gpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZSA9IFNQUklURVMuVElMRVMuSElEREVOO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZHJhd1Nwcml0ZShzcHJpdGUsIGhpdGJveCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXNvbHZlIHRoZSBwcm9taXNlIHdpdGggdGhlIG1vZGFsJ3MgaW5uZXIgYm91bmRzLCBmb3IgZHJhd2luZyB0aGUgbWVudVxuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgeDogbW9kYWxYICsgdGlsZVNpemUsXG4gICAgICAgICAgICAgICAgeTogbW9kYWxZICsgdGlsZVNpemUsXG4gICAgICAgICAgICAgICAgdzogbW9kYWxTaXplIC0gKHRpbGVTaXplICogMiksXG4gICAgICAgICAgICAgICAgaDogbW9kYWxTaXplIC0gKHRpbGVTaXplICogMiksXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVGhlbiwgZHJhdyB0aGUgbWVudSBvdmVyIGl0XG4gICAgICAgIH0pLnRoZW4oaW5uZXJNb2RhbEJvdW5kcyA9PiBzdXBlci5kcmF3KGlubmVyTW9kYWxCb3VuZHMpKTtcbiAgICB9XG59IiwiaW1wb3J0IE1vZGFsLCB7QkFDS19CVVRUT059IGZyb20gJy4vbW9kYWwnO1xuaW1wb3J0IHtFbGVtZW50fSBmcm9tICcuL21lbnUnO1xuaW1wb3J0IHtTUFJJVEVTfSBmcm9tICcuLi9kcmF3JztcblxuaW1wb3J0IHtwb3N9IGZyb20gJy4uL2NvbW1vbic7XG5cbmV4cG9ydCBjb25zdCBUSVRMRTogRWxlbWVudCA9IHtcbiAgICBpZDogJ21vZGFsLnJldHJ5LnRpdGxlJyxcbiAgICBzcHJpdGU6IFNQUklURVMuUkVUUllfTU9EQUwuVElUTEUsXG4gICAgc2NhbGU6IDEsXG59O1xuXG5leHBvcnQgY29uc3QgUkVUUllfQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbW9kYWwucmV0cnkucmV0cnlfYnV0dG9uJyxcbiAgICBzcHJpdGU6IFNQUklURVMuUkVUUllfTU9EQUwuUkVUUlksXG4gICAgaG92ZXJlZFNwcml0ZTogcG9zKFNQUklURVMuUkVUUllfTU9EQUwuUkVUUllfSE9WRVJFRCksXG4gICAgc2NhbGU6IDEuMjUsXG4gICAgaW50ZXJhY3RhYmxlOiB0cnVlXG59O1xuXG4vLyBUaGUgZWxlbWVudHMsIGluIG9yZGVyIG9mIGhvdyB0aGV5J3JlIGRpc3BsYXllZCBvbiBzY3JlZW4gKHRvcCBkb3duKVxuY29uc3QgRUxFTUVOVFM6IEFycmF5PEVsZW1lbnQ+ID0gW1RJVExFLCBSRVRSWV9CVVRUT04sIEJBQ0tfQlVUVE9OXTtcblxuZXhwb3J0IGRlZmF1bHQgTW9kYWwuYmluZChNb2RhbCwgRUxFTUVOVFMpOyIsImltcG9ydCBNb2RhbCwge0JBQ0tfQlVUVE9OfSBmcm9tICcuL21vZGFsJztcbmltcG9ydCB7RWxlbWVudH0gZnJvbSAnLi9tZW51JztcbmltcG9ydCB7U1BSSVRFU30gZnJvbSAnLi4vZHJhdyc7XG5cbmltcG9ydCB7cG9zfSBmcm9tICcuLi9jb21tb24nO1xuXG5leHBvcnQgY29uc3QgVElUTEU6IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtb2RhbC5zdWNjZXNzLnRpdGxlJyxcbiAgICBzcHJpdGU6IFNQUklURVMuU1VDQ0VTU19NT0RBTC5USVRMRSxcbiAgICBzY2FsZTogMSxcbn07XG5cbmV4cG9ydCBjb25zdCBSRVNFVF9CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtb2RhbC5zdWNjZXNzLnJlc2V0X2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLlNVQ0NFU1NfTU9EQUwuUkVTRVQsXG4gICAgaG92ZXJlZFNwcml0ZTogcG9zKFNQUklURVMuU1VDQ0VTU19NT0RBTC5SRVNFVF9IT1ZFUkVEKSxcbiAgICBzY2FsZTogMS4yNSxcbiAgICBpbnRlcmFjdGFibGU6IHRydWVcbn07XG5cbi8vIFRoZSBlbGVtZW50cywgaW4gb3JkZXIgb2YgaG93IHRoZXkncmUgZGlzcGxheWVkIG9uIHNjcmVlbiAodG9wIGRvd24pXG5jb25zdCBFTEVNRU5UUzogQXJyYXk8RWxlbWVudD4gPSBbVElUTEUsIFJFU0VUX0JVVFRPTiwgQkFDS19CVVRUT05dO1xuXG5leHBvcnQgZGVmYXVsdCBNb2RhbC5iaW5kKE1vZGFsLCBFTEVNRU5UUyk7IiwiaW1wb3J0IENhbWVyYSwge1ByZXNzRXZlbnR9IGZyb20gJy4vY2FtZXJhJztcbmltcG9ydCB7Y2FudmFzfSBmcm9tICcuLi9kcmF3JztcblxuaW1wb3J0ICogYXMgZ29pbyBmcm9tICcuLi9nb2lvL2dvaW8nO1xuXG5pbXBvcnQgTW9kYWwsIHtCQUNLX0JVVFRPTiwgQ0xPU0VfQlVUVE9OfSBmcm9tICcuLi9tZW51L21vZGFsJztcbmltcG9ydCBSZXRyeU1vZGFsLCB7UkVUUllfQlVUVE9OfSBmcm9tICcuLi9tZW51L3JldHJ5LW1vZGFsJztcbmltcG9ydCBTdWNjZXNzTW9kYWwsIHtSRVNFVF9CVVRUT059IGZyb20gJy4uL21lbnUvc3VjY2Vzcy1tb2RhbCc7XG5pbXBvcnQge0VsZW1lbnRQcmVzc0V2ZW50fSBmcm9tICcuLi9tZW51L21lbnUnO1xuXG5pbXBvcnQge2NvbnNvbGVMb2csIGxpbWl0ZXJ9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHtTaXplfSBmcm9tICcuLi9jb21tb24nO1xuXG4vLyBDb25zdGFudHMgZm9yIHRoZSBnYW1lIHN0YXRlc1xuY29uc3QgR0FNRV9TVEFURVMgPSB7XG4gICAgU1RBUlQ6ICdzdGFydCcsXG4gICAgUExBWUlORzogJ3BsYXlpbmcnLFxuICAgIFdJTjogJ3dpbicsXG4gICAgTE9TUzogJ2xvc3MnXG59O1xuXG5jbGFzcyBNb2RhbENvbnRhaW5lciB7XG4gICAgcHJpdmF0ZSBtb2RhbDogTW9kYWwgfCBudWxsO1xuICAgICNoaWRkZW46IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tb2RhbCA9IG51bGw7XG4gICAgICAgIHRoaXMuI2hpZGRlbiA9IHRydWU7XG4gICAgfVxuXG4gICAgcHVibGljIG9wZW4obW9kYWw6IE1vZGFsKSB7XG4gICAgICAgIHRoaXMubW9kYWwgPSBtb2RhbDtcbiAgICAgICAgdGhpcy4jaGlkZGVuID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIGNsb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMubW9kYWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbW9kYWwgdG8gY2xvc2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgdGhpcy5tb2RhbCA9IG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBoaWRkZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNoaWRkZW47XG4gICAgfVxuXG4gICAgcHVibGljIGhpZGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5tb2RhbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtb2RhbCB0byBoaWRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RhbC5kZXJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgIHRoaXMuI2hpZGRlbiA9IHRydWU7XG4gICAgfVxuXG4gICAgcHVibGljIHJldmVhbCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vZGFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1vZGFsIHRvIHJldmVhbCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kYWwucmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgdGhpcy4jaGlkZGVuID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGRyYXcoKSB7XG4gICAgICAgIGlmICghdGhpcy4jaGlkZGVuKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm1vZGFsLmRyYXcoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBkZXJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICB0aGlzLm1vZGFsPy5kZXJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcmV2ZW50RGVmYXVsdChlOiBFdmVudCkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbn1cblxuZXhwb3J0IHR5cGUgRmluaXRlR2FtZVByb3BzID0gU2l6ZSAmIHtcbiAgICBudW1NaW5lczogbnVtYmVyXG59XG5cbmV4cG9ydCB0eXBlIEluZmluaXRlR2FtZVByb3BzID0ge1xuICAgIG1pbmVEZW5zaXR5OiBudW1iZXJcbn1cblxuZXhwb3J0IHR5cGUgR2FtZVByb3BzID0gKEZpbml0ZUdhbWVQcm9wcyB8IEluZmluaXRlR2FtZVByb3BzKSAmIHtcbiAgICBoYW5kbGVCYWNrOiAoKSA9PiB2b2lkXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEdhbWVQcm9wcztcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2FtZXJhOiBDYW1lcmE7XG4gICAgcHJpdmF0ZSByZWFkb25seSBtb2RhbDogTW9kYWxDb250YWluZXI7XG5cbiAgICAvLyBUaGUgZHJhdyBmdW5jdGlvbiB3aXRoIGEgbGltaXRlciwgdG8gcHJldmVudCBmbGlja2VyaW5nIHdoZW4gcmVzaXppbmdcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRyYXdXaXRoTGltaXQ6ICgpID0+IHZvaWQ7XG4gICAgLy8gVGhlIGxhc3QgdGltZSBhIGRyYXcgd2FzIGRvbmUsIHRvIHByZXZlbnQgdGhlIGRyYXcgbWV0aG9kIGZyb20gc3BhbW1pbmcgdGhlIGJhY2tlbmRcbiAgICAvLyB0b2RvIHRoaXMgaXNuJ3QgYSBwZXJmZWN0IHNvbHV0aW9uLCBpZiB5b3Ugc2Nyb2xsIGZhc3QgZW5vdWdoXG4gICAgLy8gIHlvdSBjYW4gc3RpbGwgc2VlIHRoZSB0aWxlcyBsb2FkIGluLiBBIGJldHRlciBzb2x1dGlvbiBtaWdodCBiZSB0b1xuICAgIC8vICBsb2FkIGEgbG90IG1vcmUgdGhhbiBuZWNlc3NhcnksIGNhY2hlIGl0LCBhbmQgdGhlbiBsb2FkIG1vcmUgb25jZSB0aGVcbiAgICAvLyAgY2FtZXJhIGlzIG5lYXIoaXNoKSB0byB0aGUgZWRnZVxuICAgIHByaXZhdGUgbGFzdERyYXdUaW1lc3RhbXA6IG51bWJlcjtcblxuICAgIHByaXZhdGUgZ2FtZU92ZXI6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogR2FtZVByb3BzKSB7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcblxuICAgICAgICBpZiAoJ3cnIGluIHRoaXMucHJvcHMgJiYgJ2gnIGluIHRoaXMucHJvcHMpIHtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYSh7dzogdGhpcy5wcm9wcy53LCBoOiB0aGlzLnByb3BzLmh9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYW1lcmEuYWRkRXZlbnRMaXN0ZW5lcigncHJlc3MnLCB0aGlzLmhhbmRsZVByZXNzLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmNhbWVyYS5hZGRFdmVudExpc3RlbmVyKCdsb25ncHJlc3MnLCB0aGlzLmhhbmRsZUxvbmdQcmVzcy5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5jYW1lcmEuYWRkRXZlbnRMaXN0ZW5lcignbW92ZScsIHRoaXMuZHJhdy5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLm1vZGFsID0gbmV3IE1vZGFsQ29udGFpbmVyKCk7XG4gICAgICAgIHRoaXMuZHJhd1dpdGhMaW1pdCA9IGxpbWl0ZXIodGhpcy5kcmF3LmJpbmQodGhpcyksIDEwMCk7XG4gICAgICAgIHRoaXMubGFzdERyYXdUaW1lc3RhbXAgPSAwO1xuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXNldCgpIHtcbiAgICAgICAgdGhpcy5jYW1lcmEucmVzZXQoKTtcbiAgICAgICAgdGhpcy5nYW1lT3ZlciA9IGZhbHNlO1xuXG4gICAgICAgIGxldCBpbml0aWFsaXNlUHJvbWlzZTtcbiAgICAgICAgLy8gRmluaXRlIHR5cGVcbiAgICAgICAgaWYgKCd3JyBpbiB0aGlzLnByb3BzICYmICdoJyBpbiB0aGlzLnByb3BzICYmICdudW1NaW5lcycgaW4gdGhpcy5wcm9wcykge1xuICAgICAgICAgICAgaW5pdGlhbGlzZVByb21pc2UgPSBnb2lvLmluaXQoe1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLnByb3BzLncsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnByb3BzLmgsXG4gICAgICAgICAgICAgICAgbWluZXM6IHRoaXMucHJvcHMubnVtTWluZXNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBJbmZpbml0ZSB0eXBlXG4gICAgICAgIH0gZWxzZSBpZiAoJ21pbmVEZW5zaXR5JyBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgICAgICBpbml0aWFsaXNlUHJvbWlzZSA9IGdvaW8uaW5pdCh7XG4gICAgICAgICAgICAgICAgbWluZURlbnNpdHk6IHRoaXMucHJvcHMubWluZURlbnNpdHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGdhbWUgcHJvcHMgdHlwZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT25jZSBpbml0aWFsaXNlZCwgZHJhdyBpdFxuICAgICAgICBpbml0aWFsaXNlUHJvbWlzZS50aGVuKHRoaXMuZHJhdy5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZHJhdygpIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgLy8gTWF4IG9mIDYwIGRyYXdzIHBlciBzZWNvbmRcbiAgICAgICAgaWYgKG5vdyAtIHRoaXMubGFzdERyYXdUaW1lc3RhbXAgPiAxMDAwIC8gNjApIHtcbiAgICAgICAgICAgIHRoaXMubGFzdERyYXdUaW1lc3RhbXAgPSBub3c7XG4gICAgICAgICAgICAvLyBSZXF1ZXN0IHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBib2FyZCBmcm9tIEdvXG4gICAgICAgICAgICBhd2FpdCBnb2lvLmFwcGVhcmFuY2UodGhpcy5jYW1lcmEudmlzaWJsZVRpbGVzKVxuICAgICAgICAgICAgICAgIC8vIFRoZW4gZHJhdyBpdFxuICAgICAgICAgICAgICAgIC50aGVuKHRoaXMuY2FtZXJhLmRyYXcuYmluZCh0aGlzLmNhbWVyYSkpXG4gICAgICAgICAgICAgICAgLy8gVGhlbiBkcmF3IHRoZSBtb2RhbCBvdmVyIHRvcCAoaWYgYWN0aXZlKVxuICAgICAgICAgICAgICAgIC50aGVuKHRoaXMubW9kYWwuZHJhdy5iaW5kKHRoaXMubW9kYWwpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuZHJhd1dpdGhMaW1pdCk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgaWYgKHRoaXMubW9kYWwuaGlkZGVuKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5yZWdpc3RlckV2ZW50cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGRlcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmRyYXdXaXRoTGltaXQpO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgIHRoaXMuY2FtZXJhLmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgdGhpcy5tb2RhbC5kZXJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVTdGF0ZShzdGF0ZURhdGE6IGdvaW8uVW5jb3ZlclJlc3BvbnNlRGF0YSkge1xuICAgICAgICBzd2l0Y2ggKHN0YXRlRGF0YS5zdGF0ZSkge1xuICAgICAgICBjYXNlIEdBTUVfU1RBVEVTLldJTjpcbiAgICAgICAgICAgIHRoaXMuZ2FtZU92ZXIgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZUxvZygnV2luIGRldGVjdGVkLCBkaXNwbGF5aW5nIHN1Y2Nlc3MgbW9kYWwnKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRW5kR2FtZU1vZGFsKFN1Y2Nlc3NNb2RhbCwgUkVTRVRfQlVUVE9OLmlkKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEdBTUVfU1RBVEVTLkxPU1M6XG4gICAgICAgICAgICB0aGlzLmdhbWVPdmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnNvbGVMb2coJ0xvc3MgZGV0ZWN0ZWQsIGRpc3BsYXlpbmcgcmV0cnkgbW9kYWwnKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5oYW5kbGVFbmRHYW1lTW9kYWwuYmluZCh0aGlzLCBSZXRyeU1vZGFsLCBSRVRSWV9CVVRUT04uaWQpLFxuICAgICAgICAgICAgICAgIC8vIERpc3BsYXkgYWZ0ZXIgMXMgc28gdGhlIHVzZXIgY2FuIHNlZSB0aGUgZmllbGQgZm9yIGEgYml0XG4gICAgICAgICAgICAgICAgMTAwMCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlRW5kR2FtZU1vZGFsKG1vZGFsQ29uc3RydWN0b3I6ICgpID0+IHZvaWQsIHJlc2V0RWxlbWVudElkOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gRGlzcGxheSB0aGUgbW9kYWxcbiAgICAgICAgY29uc3QgbW9kYWw6IE1vZGFsID0gbmV3IG1vZGFsQ29uc3RydWN0b3IoKTtcbiAgICAgICAgdGhpcy5tb2RhbC5vcGVuKG1vZGFsKTtcbiAgICAgICAgLy8gQWRkIHNvbWUgY29tbW9uIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIG1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2hvdmVyJywgdGhpcy5kcmF3LmJpbmQodGhpcykpO1xuICAgICAgICBtb2RhbC5hZGRFdmVudExpc3RlbmVyKCdwcmVzcycsIChldmVudDogRWxlbWVudFByZXNzRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQucHJlc3NlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNhc2UgQ0xPU0VfQlVUVE9OLmlkOlxuICAgICAgICAgICAgICAgIHRoaXMubW9kYWwuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLnJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHJlc2V0RWxlbWVudElkOlxuICAgICAgICAgICAgICAgIHRoaXMubW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS5yZWdpc3RlckV2ZW50cygpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQkFDS19CVVRUT04uaWQ6XG4gICAgICAgICAgICAgICAgdGhpcy5kZXJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVCYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUaGUgbW9kYWwgaXMgb3BlbiBzbyBkb24ndCBhbGxvdyB0aGUgY2FtZXJhIHRvIG1vdmVcbiAgICAgICAgdGhpcy5jYW1lcmEuZGVyZWdpc3RlckV2ZW50cygpO1xuICAgICAgICAvLyBEcmF3IHRoZSBtb2RhbFxuICAgICAgICBhd2FpdCB0aGlzLmRyYXcoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZVByZXNzKGV2ZW50OiBQcmVzc0V2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5nYW1lT3Zlcikge1xuICAgICAgICAgICAgLy8gTGVmdCBtb3VzZSBidXR0b25cbiAgICAgICAgICAgIGlmIChldmVudC5idXR0b24gPT09IDApIHtcbiAgICAgICAgICAgICAgICBnb2lvLnVuY292ZXIoZXZlbnQucG9zKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihhc3luYyBzdGF0ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmRyYXcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RhdGUoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIFJpZ2h0IG1vdXNlIGJ1dHRvblxuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5idXR0b24gPT09IDIpIHtcbiAgICAgICAgICAgICAgICBnb2lvLmZsYWcoZXZlbnQucG9zKVxuICAgICAgICAgICAgICAgICAgICAudGhlbih0aGlzLmRyYXcuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBnYW1lIGlzIG92ZXIgYnV0IHRoZSBtb2RhbCBpcyBoaWRkZW5cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vZGFsLmhpZGRlbikge1xuICAgICAgICAgICAgLy8gUmVvcGVuIHRoZSBtb2RhbFxuICAgICAgICAgICAgdGhpcy5tb2RhbC5yZXZlYWwoKTtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhLmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVMb25nUHJlc3MoZXZlbnQ6IFByZXNzRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmdhbWVPdmVyICYmIGV2ZW50LmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgICAgZ29pby5mbGFnKGV2ZW50LnBvcykudGhlbih0aGlzLmRyYXcuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IE1lbnUsIHtFbGVtZW50fSBmcm9tICcuL21lbnUnO1xuaW1wb3J0IHtTUFJJVEVTLCBjbGVhcn0gZnJvbSAnLi4vZHJhdyc7XG5cbmltcG9ydCB7bGltaXRlcn0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge3Bvc30gZnJvbSAnLi4vY29tbW9uJztcblxuY29uc3QgVElUTEU6IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtZW51Lm1haW4udGl0bGUnLFxuICAgIHNwcml0ZTogU1BSSVRFUy5NQUlOX01FTlUuVElUTEUsXG4gICAgc2NhbGU6IDEsXG59O1xuXG5leHBvcnQgY29uc3QgRUFTWV9CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtZW51Lm1haW4uZWFzeV9idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5NQUlOX01FTlUuRUFTWSxcbiAgICBob3ZlcmVkU3ByaXRlOiBwb3MoU1BSSVRFUy5NQUlOX01FTlUuRUFTWV9IT1ZFUkVEKSxcbiAgICBzY2FsZTogMS4yNSxcbiAgICBpbnRlcmFjdGFibGU6IHRydWVcbn07XG5cbmV4cG9ydCBjb25zdCBNRURJVU1fQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbWVudS5tYWluLm1lZGl1bV9idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5NQUlOX01FTlUuTUVESVVNLFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLk1BSU5fTUVOVS5NRURJVU1fSE9WRVJFRCksXG4gICAgc2NhbGU6IDEuMjUsXG4gICAgaW50ZXJhY3RhYmxlOiB0cnVlXG59O1xuXG5leHBvcnQgY29uc3QgSEFSRF9CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtZW51Lm1haW4uaGFyZF9idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5NQUlOX01FTlUuSEFSRCxcbiAgICBob3ZlcmVkU3ByaXRlOiBwb3MoU1BSSVRFUy5NQUlOX01FTlUuSEFSRF9IT1ZFUkVEKSxcbiAgICBzY2FsZTogMS4yNSxcbiAgICBpbnRlcmFjdGFibGU6IHRydWVcbn07XG5cbi8qIHRvZG8gaW1wbGVtZW50IGN1c3RvbSBkaWZmaWN1bHR5XG5leHBvcnQgY29uc3QgQ1VTVE9NX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21lbnUubWFpbi5jdXN0b21fYnV0dG9uJyxcbiAgICBzcHJpdGU6IFNQUklURVMuTUFJTl9NRU5VLkNVU1RPTSxcbiAgICBob3ZlcmVkU3ByaXRlOiBwb3MoU1BSSVRFUy5NQUlOX01FTlUuQ1VTVE9NX0hPVkVSRUQpLFxuICAgIHNjYWxlOiAxLjI1LFxuICAgIGludGVyYWN0YWJsZTogZmFsc2Vcbn07Ki9cblxuZXhwb3J0IGNvbnN0IElORklOSVRFX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21lbnUubWFpbi5pbmZpbml0ZV9idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5NQUlOX01FTlUuSU5GSU5JVEUsXG4gICAgaG92ZXJlZFNwcml0ZTogcG9zKFNQUklURVMuTUFJTl9NRU5VLklORklOSVRFX0hPVkVSRUQpLFxuICAgIHNjYWxlOiAxLjI1LFxuICAgIGludGVyYWN0YWJsZTogdHJ1ZVxufTtcblxuLy8gVGhlIGVsZW1lbnRzLCBpbiBvcmRlciBvZiBob3cgdGhleSdyZSBkaXNwbGF5ZWQgb24gc2NyZWVuICh0b3AgZG93bilcbmNvbnN0IEVMRU1FTlRTOiBBcnJheTxFbGVtZW50PiA9IFtUSVRMRSwgRUFTWV9CVVRUT04sIE1FRElVTV9CVVRUT04sIEhBUkRfQlVUVE9OLyosIENVU1RPTV9CVVRUT04qLywgSU5GSU5JVEVfQlVUVE9OXTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFpbk1lbnUgZXh0ZW5kcyBNZW51IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRyYXdXaXRoTGltaXQ6ICgpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoRUxFTUVOVFMpO1xuICAgICAgICBzdXBlci5hZGRFdmVudExpc3RlbmVyKCdwcmVzcycsIHRoaXMuZHJhdy5iaW5kKHRoaXMpKTtcbiAgICAgICAgc3VwZXIuYWRkRXZlbnRMaXN0ZW5lcignaG92ZXInLCB0aGlzLmRyYXcuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gVGhlIGRyYXcgZnVuY3Rpb24gd2l0aCBhIGxpbWl0ZXIsIHRvIHByZXZlbnQgZmxpY2tlcmluZyB3aGVuIHJlc2l6aW5nXG4gICAgICAgIHRoaXMuZHJhd1dpdGhMaW1pdCA9IGxpbWl0ZXIodGhpcy5kcmF3LmJpbmQodGhpcyksIDEwMCk7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50cygpO1xuICAgIH1cblxuICAgIGFzeW5jIGRyYXcoKSB7XG4gICAgICAgIHJldHVybiBjbGVhcigpLnRoZW4oc3VwZXIuZHJhdy5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICByZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgc3VwZXIucmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuZHJhd1dpdGhMaW1pdCk7XG4gICAgfVxuXG4gICAgZGVyZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgc3VwZXIuZGVyZWdpc3RlckV2ZW50cygpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5kcmF3V2l0aExpbWl0KTtcbiAgICB9XG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgR2FtZSwge0Zpbml0ZUdhbWVQcm9wcywgSW5maW5pdGVHYW1lUHJvcHN9IGZyb20gJy4vZ2FtZS9nYW1lJztcbmltcG9ydCBNYWluTWVudSwge0VBU1lfQlVUVE9OLCBIQVJEX0JVVFRPTiwgSU5GSU5JVEVfQlVUVE9OLCBNRURJVU1fQlVUVE9OfSBmcm9tICcuL21lbnUvbWFpbi1tZW51JztcblxuaW1wb3J0IHtjYW52YXMsIGN0eCwgc3ByaXRlc2hlZXRMb2FkZWR9IGZyb20gJy4vZHJhdyc7XG5pbXBvcnQge0VsZW1lbnRQcmVzc0V2ZW50fSBmcm9tICcuL21lbnUvbWVudSc7XG5cbmltcG9ydCAnLi4vYXNzZXRzL3N0eWxlcy5jc3MnO1xuXG4vLyBNYWtlIHRoZSBjYW52YXMgZnVsbHNjcmVlblxuZnVuY3Rpb24gZnVsbHNjcmVlbkNhbnZhcygpIHtcbiAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50ICovXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGN0eC53ZWJraXRJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY3R4Lm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50ICovXG59XG5cbi8vIEFkZCBhbiBldmVudCBoYW5kbGVyIHRvIHJlc2l6ZSB0aGUgY2FudmFzXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVsbHNjcmVlbkNhbnZhcyk7XG5cbi8vIE1ha2UgdGhlIGNhbnZhcyBmdWxsc2NyZWVuXG5mdWxsc2NyZWVuQ2FudmFzKCk7XG5cbi8vIENyZWF0ZSB0aGUgbWFpbiBtZW51XG5jb25zdCBtYWluTWVudSA9IG5ldyBNYWluTWVudSgpO1xuXG4vLyBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIHByZXNzaW5nIHRoZSBtZW51IGJ1dHRvbnNcbm1haW5NZW51LmFkZEV2ZW50TGlzdGVuZXIoJ3ByZXNzJywgKGV2ZW50IDogRWxlbWVudFByZXNzRXZlbnQpID0+IHtcbiAgICBtYWluTWVudS5kZXJlZ2lzdGVyRXZlbnRzKCk7XG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIGdhbWUgcHJvcGVydGllc1xuICAgIGxldCBnYW1lUHJvcHM6IEZpbml0ZUdhbWVQcm9wcyB8IEluZmluaXRlR2FtZVByb3BzIHwgdW5kZWZpbmVkO1xuICAgIHN3aXRjaCAoZXZlbnQucHJlc3NlZEVsZW1lbnQpIHtcbiAgICBjYXNlIEVBU1lfQlVUVE9OLmlkOlxuICAgICAgICBnYW1lUHJvcHMgPSB7XG4gICAgICAgICAgICB3OiA5LFxuICAgICAgICAgICAgaDogOSxcbiAgICAgICAgICAgIG51bU1pbmVzOiAxMFxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIE1FRElVTV9CVVRUT04uaWQ6XG4gICAgICAgIGdhbWVQcm9wcyA9IHtcbiAgICAgICAgICAgIHc6IDE2LFxuICAgICAgICAgICAgaDogMTYsXG4gICAgICAgICAgICBudW1NaW5lczogNDBcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSBIQVJEX0JVVFRPTi5pZDpcbiAgICAgICAgZ2FtZVByb3BzID0ge1xuICAgICAgICAgICAgdzogMzAsXG4gICAgICAgICAgICBoOiAxNixcbiAgICAgICAgICAgIG51bU1pbmVzOiA5OVxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIElORklOSVRFX0JVVFRPTi5pZDpcbiAgICAgICAgZ2FtZVByb3BzID0ge1xuICAgICAgICAgICAgLy8gTWVkaXVtIGRpZmZpY3VsdHkgbWluZSBkZW5zaXR5XG4gICAgICAgICAgICBtaW5lRGVuc2l0eTogNDAsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIHRoZSBnYW1lXG4gICAgbmV3IEdhbWUoe1xuICAgICAgICAuLi5nYW1lUHJvcHMsXG4gICAgICAgIGhhbmRsZUJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgIG1haW5NZW51LnJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgICAgICBtYWluTWVudS5kcmF3KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG4vLyBEcmF3IHRoZSBtYWluIG1lbnUgb25jZSB0aGUgc3ByaXRlc2hlZXQgaGFzIGxvYWRlZFxuc3ByaXRlc2hlZXRMb2FkZWQudGhlbihtYWluTWVudS5kcmF3LmJpbmQobWFpbk1lbnUpKTtcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwidSIsImNodW5rSWQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZXBsYWNlIiwicCIsImIiLCJiYXNlVVJJIiwic2VsZiIsImhyZWYiLCJ0b2tlbiIsInRpbWV6b25lIiwidGltZXpvbmVDbGlwIiwibWFza3MiLCJkZWZhdWx0Iiwic2hvcnREYXRlIiwicGFkZGVkU2hvcnREYXRlIiwibWVkaXVtRGF0ZSIsImxvbmdEYXRlIiwiZnVsbERhdGUiLCJzaG9ydFRpbWUiLCJtZWRpdW1UaW1lIiwibG9uZ1RpbWUiLCJpc29EYXRlIiwiaXNvVGltZSIsImlzb0RhdGVUaW1lIiwiaXNvVXRjRGF0ZVRpbWUiLCJleHBpcmVzSGVhZGVyRm9ybWF0IiwiaTE4biIsImRheU5hbWVzIiwibW9udGhOYW1lcyIsInRpbWVOYW1lcyIsInBhZCIsInZhbCIsImxlbiIsImFyZ3VtZW50cyIsIlN0cmluZyIsInBhZFN0YXJ0IiwiZ2V0RGF5TmFtZSIsIl9yZWYiLCJ5IiwiXyIsImRheU5hbWUiLCJfcmVmJHNob3J0IiwiX3Nob3J0IiwidG9kYXkiLCJEYXRlIiwieWVzdGVyZGF5Iiwic2V0RGF0ZSIsInRvbW9ycm93IiwiZ2V0V2VlayIsImRhdGUiLCJ0YXJnZXRUaHVyc2RheSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0RGF5IiwiZmlyc3RUaHVyc2RheSIsImRzIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzZXRIb3VycyIsImdldEhvdXJzIiwid2Vla0RpZmYiLCJNYXRoIiwiZmxvb3IiLCJnZXREYXlPZldlZWsiLCJkb3ciLCJmb3JtYXRUaW1lem9uZSIsIm1hdGNoIiwicG9wIiwiY29uc29sZUxvZyIsInMiLCJub3ciLCJjb25zb2xlIiwibG9nIiwibWFzayIsInV0YyIsImdtdCIsInRlc3QiLCJpc05hTiIsIlR5cGVFcnJvciIsIm1hc2tTbGljZSIsInNsaWNlIiwiX2QiLCJEIiwiX20iLCJfSCIsIl9NIiwiX3MiLCJfTCIsIl9vIiwiX1ciLCJfTiIsImZsYWdzIiwiZGQiLCJkZGQiLCJEREQiLCJzaG9ydCIsImRkZGQiLCJEREREIiwibW0iLCJtbW0iLCJtbW1tIiwieXkiLCJ5eXl5IiwiaCIsImhoIiwiSCIsIkhIIiwiTSIsIk1NIiwic3MiLCJsIiwiTCIsInQiLCJ0dCIsIlQiLCJUVCIsIloiLCJhYnMiLCJTIiwiVyIsIldXIiwiTiIsImRhdGVGb3JtYXQiLCJ0aW1lb3V0SWRGb3JGdW5jIiwiTWFwIiwibGltaXRlciIsImZ1bmMiLCJkZWxheSIsImNsZWFyVGltZW91dCIsInNldCIsInNldFRpbWVvdXQiLCJUSUxFX1NJWkUiLCJTUFJJVEVTIiwiVElMRVMiLCJFTVBUWSIsIngiLCJ3IiwiTUlORSIsIkhJRERFTiIsIkZMQUciLCJDTE9TRSIsIk1PREFMIiwiQkFDSyIsIkJBQ0tfSE9WRVJFRCIsIk1BSU5fTUVOVSIsIlRJVExFIiwiRUFTWSIsIkVBU1lfSE9WRVJFRCIsIk1FRElVTSIsIk1FRElVTV9IT1ZFUkVEIiwiSEFSRCIsIkhBUkRfSE9WRVJFRCIsIkNVU1RPTSIsIkNVU1RPTV9IT1ZFUkVEIiwiSU5GSU5JVEUiLCJJTkZJTklURV9IT1ZFUkVEIiwiUkVUUllfTU9EQUwiLCJSRVRSWSIsIlJFVFJZX0hPVkVSRUQiLCJTVUNDRVNTX01PREFMIiwiUkVTRVQiLCJSRVNFVF9IT1ZFUkVEIiwiY2FudmFzIiwiZ2V0RWxlbWVudEJ5SWQiLCJjdHgiLCJnZXRDb250ZXh0Iiwic3ByaXRlc2hlZXQiLCJJbWFnZSIsInNwcml0ZXNoZWV0TG9hZGVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJhZGRFdmVudExpc3RlbmVyIiwiZHJhd1Nwcml0ZSIsInNwcml0ZSIsImRyYXdSZWN0IiwiZHJhd0ltYWdlIiwiVVJMIiwiRXZlbnRNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJldmVudExpc3RlbmVycyIsInR5cGUiLCJsaXN0ZW5lciIsImxpc3RlbmVyc0ZvckV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImZpbHRlciIsImxpc3RlbmVyRm9yRXZlbnQiLCJjYWxsRXZlbnRMaXN0ZW5lcnMiLCJldmVudCIsImZvckVhY2giLCJUSUxFX0RSQVdfU0laRSIsIkNhbWVyYSIsImZpZWxkU2l6ZSIsInN1cGVyIiwicmVzZXQiLCJwb2ludGVyRG93bkV2ZW50IiwidG91Y2hlcyIsIm1vdmVPclNjYWxlIiwiZGlzdGFuY2UiLCJsb25nUHJlc3NUaW1lb3V0IiwibGFzdFByZXNzVGltZXN0YW1wIiwiaGFuZGxlV2hlZWwiLCJmYWN0b3IiLCJkZWx0YVkiLCJ6b29tIiwiY2xpZW50WCIsImNsaWVudFkiLCJoYW5kbGVQb2ludGVyRG93biIsInByZXZlbnREZWZhdWx0IiwicG9zIiwidG9Xb3JsZFBvcyIsImJ1dHRvbiIsImhhbmRsZVBvaW50ZXJNb3ZlIiwicHJldmlvdXNUb3VjaEluZGV4IiwiZmluZEluZGV4IiwicG9pbnRlcklkIiwicHJldmlvdXNUb3VjaCIsImRlbHRhIiwidHJhbnNsYXRpb24iLCJmaWVsZFJlYWxTaXplIiwic2NhbGUiLCJtaW4iLCJtYXgiLCJ3aWR0aCIsImhlaWdodCIsInRvdWNoMCIsInRvdWNoMSIsImh5cG90IiwiY2VudGVyIiwiaGFuZGxlUG9pbnRlckNhbmNlbCIsImhhbmRsZVBvaW50ZXJPdXQiLCJoYW5kbGVQb2ludGVyVXAiLCJyZWdpc3RlckV2ZW50cyIsIm1pZGRsZVRyYW5zbGF0aW9uIiwidG9DYW52YXNQb3MiLCJuZXdTY2FsZSIsImRyYXciLCJ0aWxlRGF0YSIsImNsZWFyUmVjdCIsInlLZXkiLCJOdW1iZXIiLCJ4S2V5IiwidmlzaWJsZVRpbGVzIiwiY2FudmFzUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRpbGVTaXplIiwibGVmdCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwiZGVyZWdpc3RlckV2ZW50cyIsIndvcmtlciIsIldvcmtlciIsInByb21pc2VzIiwicmVzcG9uc2UiLCJyZWplY3QiLCJzdWNjZXNzIiwiY21kIiwid29ya2VyQ29ubmVjdGVkIiwicXVldWVkTWVzc2FnZXMiLCJwb3N0TWVzc2FnZSIsIm5vUXVldWUiLCJtc2ciLCJuZXdNZXNzYWdlIiwic2VuZFBpbmciLCJ0aW1lb3V0IiwicGluZ1Byb21pc2UiLCJ0aW1lb3V0UHJvbWlzZSIsInIiLCJyYWNlIiwiaW5pdCIsImZsYWciLCJwaW5ncyIsInNlbmRQaW5nVW50aWxDb25uZWN0IiwidGhlbiIsImJpZ2dlc3RFbGVtZW50QnlGaWVsZCIsImVsZW1lbnRzIiwiZmllbGQiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyciIsImdldEFic1BvcyIsInJlY3QiLCJyb3VuZCIsImludGVyc2VjdCIsImhpdGJveCIsIk1lbnUiLCJ0YWxsZXN0RWxlbWVudCIsImxvbmdlc3RFbGVtZW50IiwiZWxlbWVudEhpdGJveGVzIiwiaG92ZXJlZEVsZW1lbnQiLCJlbnRyaWVzIiwicHJlc3NlZEVsZW1lbnQiLCJib3VuZHMiLCJhY3R1YWxXaWR0aCIsImFjdHVhbEhlaWdodCIsImludGVyYWN0YWJsZSIsInBhcnNlIiwiaG92ZXJlZFNwcml0ZSIsIkNMT1NFX0JVVFRPTiIsIkJBQ0tfQlVUVE9OIiwiTW9kYWwiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsIm1vZGFsU2l6ZSIsIm1vZGFsWCIsIm1vZGFsWSIsIk1PREFMX0dSSURfU0laRSIsImlubmVyTW9kYWxCb3VuZHMiLCJSRVRSWV9CVVRUT04iLCJFTEVNRU5UUyIsImJpbmQiLCJSRVNFVF9CVVRUT04iLCJNb2RhbENvbnRhaW5lciIsIm1vZGFsIiwib3BlbiIsImNsb3NlIiwiaGlkZSIsImhpZGRlbiIsInJldmVhbCIsIkdhbWUiLCJwcm9wcyIsImNhbWVyYSIsImhhbmRsZVByZXNzIiwiaGFuZGxlTG9uZ1ByZXNzIiwiZHJhd1dpdGhMaW1pdCIsImxhc3REcmF3VGltZXN0YW1wIiwiaW5pdGlhbGlzZVByb21pc2UiLCJnYW1lT3ZlciIsIm1pbmVzIiwibnVtTWluZXMiLCJtaW5lRGVuc2l0eSIsImhhbmRsZVN0YXRlIiwic3RhdGVEYXRhIiwic3RhdGUiLCJoYW5kbGVFbmRHYW1lTW9kYWwiLCJtb2RhbENvbnN0cnVjdG9yIiwicmVzZXRFbGVtZW50SWQiLCJoYW5kbGVCYWNrIiwiRUFTWV9CVVRUT04iLCJNRURJVU1fQlVUVE9OIiwiSEFSRF9CVVRUT04iLCJJTkZJTklURV9CVVRUT04iLCJmdWxsc2NyZWVuQ2FudmFzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwid2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibWFpbk1lbnUiLCJjbGVhciIsImdhbWVQcm9wcyJdLCJzb3VyY2VSb290IjoiIn0=