(()=>{"use strict";var e={250:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(537),r=n.n(i),s=n(645),o=n.n(s)()(r());o.push([e.id,"body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}","",{version:3,sources:["webpack://./assets/styles.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,SAAS;AACb;AACA;IACI,iCAAiC;IACjC,oCAAoC;IACpC,0BAA0B;IAC1B,4BAA4B;IAC5B,kBAAkB;AACtB",sourcesContent:["body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}"],sourceRoot:""}]);const a=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,s){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);i&&o[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var s={},o=[],a=0;a<e.length;a++){var h=e[a],c=i.base?h[0]+i.base:h[0],d=s[c]||0,l="".concat(c," ").concat(d);s[c]=d+1;var u=n(l),m={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var p=r(m,i);i.byIndex=a,t.splice(a,0,{identifier:l,updater:p,references:1})}o.push(l)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var s=i(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<s.length;o++){var a=n(s[o]);t[a].references--}for(var h=i(e,r),c=0;c<s.length;c++){var d=n(s[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=h}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},882:(e,t,n)=>{e.exports=n.p+"16579aa28cba396948f1.png"}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.u=e=>e+".bundle.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{var e=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,t=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,i=/[^-+\dA-Z]/g,r={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},s={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(e).padStart(t,"0")},a=function(e){var t=e.y,n=e.m,i=e.d,r=e._,s=e.dayName,o=e.short,a=void 0!==o&&o,h=new Date,c=new Date;c.setDate(c[r+"Date"]()-1);var d=new Date;return d.setDate(d[r+"Date"]()+1),h[r+"FullYear"]()===t&&h[r+"Month"]()===n&&h[r+"Date"]()===i?a?"Tdy":"Today":c[r+"FullYear"]()===t&&c[r+"Month"]()===n&&c[r+"Date"]()===i?a?"Ysd":"Yesterday":d[r+"FullYear"]()===t&&d[r+"Month"]()===n&&d[r+"Date"]()===i?a?"Tmw":"Tomorrow":s},h=function(e){var t=new Date(e.getFullYear(),e.getMonth(),e.getDate());t.setDate(t.getDate()-(t.getDay()+6)%7+3);var n=new Date(t.getFullYear(),0,4);n.setDate(n.getDate()-(n.getDay()+6)%7+3);var i=t.getTimezoneOffset()-n.getTimezoneOffset();t.setHours(t.getHours()-i);var r=(t-n)/6048e5;return 1+Math.floor(r)},c=function(e){var t=e.getDay();return 0===t&&(t=7),t},d=function(e){return(String(e).match(t)||[""]).pop().replace(i,"").replace(/GMT\+0000/g,"UTC")};function l(t){const n=new Date;console.log("("+function(t,n,i,l){if(1!==arguments.length||"string"!=typeof t||/\d/.test(t)||(n=t,t=void 0),(t=t||0===t?t:new Date)instanceof Date||(t=new Date(t)),isNaN(t))throw TypeError("Invalid date");var u=(n=String(r[n]||n||r.default)).slice(0,4);"UTC:"!==u&&"GMT:"!==u||(n=n.slice(4),i=!0,"GMT:"===u&&(l=!0));var m=function(){return i?"getUTC":"get"},p=function(){return t[m()+"Date"]()},v=function(){return t[m()+"Day"]()},w=function(){return t[m()+"Month"]()},f=function(){return t[m()+"FullYear"]()},E=function(){return t[m()+"Hours"]()},y=function(){return t[m()+"Minutes"]()},g=function(){return t[m()+"Seconds"]()},D=function(){return t[m()+"Milliseconds"]()},M=function(){return i?0:t.getTimezoneOffset()},x=function(){return h(t)},b=function(){return c(t)},T={d:function(){return p()},dd:function(){return o(p())},ddd:function(){return s.dayNames[v()]},DDD:function(){return a({y:f(),m:w(),d:p(),_:m(),dayName:s.dayNames[v()],short:!0})},dddd:function(){return s.dayNames[v()+7]},DDDD:function(){return a({y:f(),m:w(),d:p(),_:m(),dayName:s.dayNames[v()+7]})},m:function(){return w()+1},mm:function(){return o(w()+1)},mmm:function(){return s.monthNames[w()]},mmmm:function(){return s.monthNames[w()+12]},yy:function(){return String(f()).slice(2)},yyyy:function(){return o(f(),4)},h:function(){return E()%12||12},hh:function(){return o(E()%12||12)},H:function(){return E()},HH:function(){return o(E())},M:function(){return y()},MM:function(){return o(y())},s:function(){return g()},ss:function(){return o(g())},l:function(){return o(D(),3)},L:function(){return o(Math.floor(D()/10))},t:function(){return E()<12?s.timeNames[0]:s.timeNames[1]},tt:function(){return E()<12?s.timeNames[2]:s.timeNames[3]},T:function(){return E()<12?s.timeNames[4]:s.timeNames[5]},TT:function(){return E()<12?s.timeNames[6]:s.timeNames[7]},Z:function(){return l?"GMT":i?"UTC":d(t)},o:function(){return(M()>0?"-":"+")+o(100*Math.floor(Math.abs(M())/60)+Math.abs(M())%60,4)},p:function(){return(M()>0?"-":"+")+o(Math.floor(Math.abs(M())/60),2)+":"+o(Math.floor(Math.abs(M())%60),2)},S:function(){return["th","st","nd","rd"][p()%10>3?0:(p()%100-p()%10!=10)*p()%10]},W:function(){return x()},WW:function(){return o(x())},N:function(){return b()}};return n.replace(e,(function(e){return e in T?T[e]():e.slice(1,e.length-1)}))}(n,"yyyy/mm/dd HH:MM:ss.l")+") JS: "+t)}const u=new Map;function m(e,t){return()=>{const n=u.get(e);n&&clearTimeout(n),u.set(e,setTimeout(e,t))}}const p=10,v={TILES:{EMPTY:{x:0,y:0,w:p,h:p},1:{x:10,y:0,w:p,h:p},2:{x:20,y:0,w:p,h:p},3:{x:30,y:0,w:p,h:p},4:{x:40,y:0,w:p,h:p},5:{x:50,y:0,w:p,h:p},6:{x:60,y:0,w:p,h:p},7:{x:70,y:0,w:p,h:p},8:{x:80,y:0,w:p,h:p},MINE:{x:90,y:0,w:p,h:p},HIDDEN:{x:100,y:0,w:p,h:p},FLAG:{x:110,y:0,w:p,h:p},CLOSE:{x:120,y:0,w:p,h:p}},MODAL:{BACK:{x:0,y:90,w:24,h:p},BACK_HOVERED:{x:24,y:90,w:24,h:p}},MAIN_MENU:{TITLE:{x:0,y:10,w:95,h:p},EASY:{x:0,y:20,w:26,h:p},EASY_HOVERED:{x:26,y:20,w:26,h:p},MEDIUM:{x:0,y:30,w:35,h:p},MEDIUM_HOVERED:{x:35,y:30,w:30,h:p},HARD:{x:0,y:40,w:25,h:p},HARD_HOVERED:{x:25,y:40,w:26,h:p},CUSTOM:{x:0,y:50,w:38,h:p},CUSTOM_HOVERED:{x:38,y:50,w:26,h:p},INFINITE:{x:0,y:60,w:43,h:p},INFINITE_HOVERED:{x:43,y:60,w:43,h:p}},RETRY_MODAL:{TITLE:{x:0,y:70,w:45,h:p},RETRY:{x:0,y:80,w:30,h:p},RETRY_HOVERED:{x:30,y:80,w:30,h:p}},SUCCESS_MODAL:{TITLE:{x:0,y:100,w:52,h:p},RESET:{x:0,y:110,w:53,h:p},RESET_HOVERED:{x:53,y:110,w:53,h:p}}},w=document.getElementById("canvas"),f=w.getContext("2d"),E=new Image,y=new Promise((e=>{E.addEventListener("load",(()=>{l("Finished loading spritesheet"),e()}))}));function g(e,t){f.drawImage(E,e.x,e.y,e.w,e.h,t.x,t.y,t.w,t.h)}E.src=new URL(n(882),n.b).toString();class D{constructor(){this.eventListeners=new Map}addEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,[...i,t])}removeEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,i.filter((e=>e===t)))}callEventListeners(e,t){var n;(null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[]).forEach((e=>e(t)))}}function M(e){l("(camera) "+e)}const x=30;class b extends D{constructor(e){super(),this.fieldSize=e,this.reset(),this.pointerDownEvent={touches:[],moveOrScale:!1,distance:null,longPressTimeout:null},this.handleWheel=e=>{const t=e.deltaY>0?.8:1.25;this.zoom(t,e.clientX,e.clientY)},this.handlePointerDown=e=>{e.preventDefault(),0==this.pointerDownEvent.touches.length?(M("first pointerdown"),this.pointerDownEvent.longPressTimeout=setTimeout((()=>{0===this.pointerDownEvent.touches.length||this.pointerDownEvent.moveOrScale||(M("longpress timeout"),this.callEventListeners("longpress",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button}),this.pointerDownEvent.touches=[])}),200),this.pointerDownEvent.moveOrScale=!1,this.pointerDownEvent.distance=null):M("another pointerdown"),this.pointerDownEvent.touches.push(e)},this.handlePointerMove=e=>{if(e.preventDefault(),0===this.pointerDownEvent.touches.length)return;const t=this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId)),n=this.pointerDownEvent.touches[t];if(this.pointerDownEvent.touches[t]=e,1===this.pointerDownEvent.touches.length){const t={x:e.clientX-n.clientX,y:e.clientY-n.clientY};if(!this.pointerDownEvent.moveOrScale&&Math.abs(t.x)<7.5&&Math.abs(t.y)<7.5)return;if(this.translation.x+=t.x,this.translation.y+=t.y,void 0!==this.fieldSize){const e={x:this.fieldSize.w*x*this.scale,y:this.fieldSize.h*x*this.scale},t={x:0-e.x/2,y:0-e.y/2},n={x:w.width-e.x/2,y:w.height-e.y/2};this.translation.x=Math.min(this.translation.x,n.x),this.translation.x=Math.max(this.translation.x,t.x),this.translation.y=Math.min(this.translation.y,n.y),this.translation.y=Math.max(this.translation.y,t.y)}}else{const e=this.pointerDownEvent.touches[0],t=this.pointerDownEvent.touches[1],n=Math.hypot(e.clientX-t.clientX,e.clientY-t.clientY);if(null!=this.pointerDownEvent.distance){const i=n/this.pointerDownEvent.distance,r={x:(e.clientX+t.clientX)/2,y:(e.clientY+t.clientY)/2};this.zoom(i,r.x,r.y)}this.pointerDownEvent.distance=n}this.pointerDownEvent.moveOrScale||(M("pointer moved, not press event"),this.pointerDownEvent.moveOrScale=!0,clearTimeout(this.pointerDownEvent.longPressTimeout)),this.callEventListeners("move",{})},this.handlePointerCancel=e=>{M("pointercancel")},this.handlePointerOut=e=>{e.preventDefault(),0!=this.pointerDownEvent.touches.length&&(this.pointerDownEvent.touches.length>1?(M("pointerout: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),this.pointerDownEvent.distance=null):(M("pointerout: no press event"),clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]))},this.handlePointerUp=e=>{if(e.preventDefault(),0!==this.pointerDownEvent.touches.length){if(this.pointerDownEvent.touches.length>1)return M("pointerup: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),void(this.pointerDownEvent.distance=null);this.pointerDownEvent.moveOrScale?M("pointerup"):(M("pointerup: no movement or scaling, press event"),this.callEventListeners("press",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button})),clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]}},this.registerEvents()}middleTranslation(){return void 0===this.fieldSize?{x:0,y:0}:{x:w.width/2-this.scale*(this.fieldSize.w*x/2),y:w.height/2-this.scale*(this.fieldSize.h*x/2)}}toCanvasPos(e,t){return{x:this.translation.x+e*x*this.scale,y:this.translation.y+t*x*this.scale}}toWorldPos(e,t){return{x:Math.floor((e-this.translation.x)/this.scale/x),y:Math.floor((t-this.translation.y)/this.scale/x)}}zoom(e,t,n){const i=this.scale*e;i>.5&&i<4&&(this.translation.x-=(t-this.translation.x)*(e-1),this.translation.y-=(n-this.translation.y)*(e-1),this.scale=i,this.callEventListeners("move",{}))}draw(e){const t=w.width,n=w.height;f.clearRect(0,0,t,n);for(const t in e){const n=Number(t);for(const t in e[n]){const i=Number(t),r=v.TILES[e[n][i]],s=this.toCanvasPos(i,n);g(r,{x:s.x,y:s.y,w:x*this.scale,h:x*this.scale})}}}get visibleTiles(){const e=w.getBoundingClientRect(),t=x*this.scale,n=this.toWorldPos(e.left-t,e.top-t),i=this.toWorldPos(e.right+t,e.bottom+t);return{x:n.x,y:n.y,w:i.x-n.x,h:i.y-n.y}}reset(){void 0!==this.fieldSize?(this.scale=Math.min(w.width/(this.fieldSize.w*x*1.1),w.height/(this.fieldSize.h*x*1.1)),this.scale=Math.max(this.scale,.5),this.scale=Math.min(this.scale,4)):this.scale=1,this.translation=this.middleTranslation()}registerEvents(){w.addEventListener("wheel",this.handleWheel),w.addEventListener("pointerdown",this.handlePointerDown),w.addEventListener("pointermove",this.handlePointerMove),w.addEventListener("pointercancel",this.handlePointerCancel),w.addEventListener("pointerout",this.handlePointerOut),w.addEventListener("pointerup",this.handlePointerUp)}deregisterEvents(){w.removeEventListener("wheel",this.handleWheel),w.removeEventListener("pointerdown",this.handlePointerDown),w.removeEventListener("pointermove",this.handlePointerMove),w.removeEventListener("pointercancel",this.handlePointerCancel),w.removeEventListener("pointerout",this.handlePointerOut),w.removeEventListener("pointerup",this.handlePointerUp)}}var T=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};l("Creating WASM worker");const S=new Worker(new URL(n.p+n.u(303),n.b)),L=new Map;l("Registering WebIO event listener for Go"),S.addEventListener("message",(e=>{if(e.data){const t=e.data,[n,i]=L.get(t.id);t.success?n(t.data):(l("Error response for '"+t.cmd+"': "+t.data),i(t.data))}}));let A=!1;const I=[];function N(e,t,n){return new Promise(((i,r)=>{const s=function(e,t){return{cmd:e,id:e+Date.now(),data:t}}(e,t);L.set(s.id,[i,r]),n||A?S.postMessage(s):(l(e+" message received, but worker hasn't connected yet. Adding to queue"),I.push(s))}))}function P(e){return T(this,void 0,void 0,(function*(){const t=N("ping",null,!0),n=new Promise(((t,n)=>setTimeout(n,e)));try{return yield Promise.race([t,n]),A=!0,I.forEach((e=>{S.postMessage(e)})),I.length=0,!0}catch(e){return!1}}))}function O(e){return N("init",e)}function C(e){return N("flag",e)}(function(){return T(this,void 0,void 0,(function*(){let e=0,t=100;for(;!A&&e<5;)l("Sending ping with timeout "+t+"ms"),e++,(yield P(t))||(t*=2,l("Ping timeout reached"));if(e>=5)throw new Error("Max pings 5 reached, assuming WASM module is not functional")}))})().then((()=>{l("Response to ping received, worker connected")}));const R=(e,t)=>e.reduce(((e,n)=>e.sprite[t]*e.scale>n.sprite[t]*n.scale?e:n));function H(e,t){const n=w.getBoundingClientRect();return[Math.round(e-n.left),Math.round(t-n.top)]}function _(e,t,n){return e>n.x&&t>n.y&&e<n.x+n.w&&t<n.y+n.h}class U extends D{constructor(e){super(),this.elements=e,this.tallestElement=R(e,"h"),this.longestElement=R(e,"w"),this.elementHitboxes=new Map,this.hoveredElement=null,this.handlePointerMove=e=>{const[t,n]=H(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())if(_(t,n,i))return void(this.hoveredElement!==e&&(this.hoveredElement=e,this.callEventListeners("hover",{hoveredElement:e})));null!==this.hoveredElement&&(this.hoveredElement=null,this.callEventListeners("hover",{hoveredElement:null}))},this.handlePointerDown=e=>{const[t,n]=H(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())_(t,n,i)&&this.callEventListeners("press",{pressedElement:e});return null},this.registerEvents()}draw(e){return t=this,n=void 0,r=function*(){e||(e={x:0,y:0,w:w.width,h:w.height});let t=e.h*(.5/this.elements.length)/(this.tallestElement.sprite.h*this.tallestElement.scale);return t*this.longestElement.sprite.w*this.longestElement.scale>=.9*e.w&&(t=.9*e.w/(this.longestElement.sprite.w*this.longestElement.scale)),new Promise((n=>{let i=e.y+this.tallestElement.sprite.h*t*.5;this.elements.forEach((n=>{const r=n.sprite.w*n.scale*t,s=n.sprite.h*n.scale*t,o={x:e.x+(e.w/2-r/2),y:i,w:r,h:s};n.interactable&&this.elementHitboxes.set(n.id,o);const a=(h=n.sprite,JSON.parse(JSON.stringify(h)));var h;n.id===this.hoveredElement&&"hoveredSprite"in n&&(a.x=n.hoveredSprite.x,a.y=n.hoveredSprite.y),g(a,o),i+=1.5*s})),n()}))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){window.addEventListener("pointermove",this.handlePointerMove),window.addEventListener("pointerdown",this.handlePointerDown)}deregisterEvents(){window.removeEventListener("pointermove",this.handlePointerMove),window.removeEventListener("pointerdown",this.handlePointerDown)}}const Y=e=>({x:e.x,y:e.y});const W={id:"modal.close_button",sprite:v.TILES.CLOSE,scale:1},z={id:"modal.back_button",sprite:v.MODAL.BACK,hoveredSprite:Y(v.MODAL.BACK_HOVERED),scale:1.25,interactable:!0};class k extends U{constructor(e){super(e)}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){yield new Promise((e=>{const t=w.width,n=w.height;f.fillStyle="rgba(0, 0, 0, 0.4)",f.fillRect(0,0,t,n);const i=t>n?.8*n:.8*t,r=t/2-i/2,s=n/2-i/2,o=i/10;for(let e=0;e<10;e++)for(let t=0;t<10;t++){const n={x:r+t*o,y:s+e*o,w:o,h:o};let i={x:v.TILES.EMPTY.w/2,y:v.TILES.EMPTY.h/2,w:1,h:1};0!==t&&9!==t&&0!==e&&9!==e||(9===t&&0===e?(i=W.sprite,this.elementHitboxes.set(W.id,n)):i=v.TILES.HIDDEN),g(i,n)}e({x:r+o,y:s+o,w:i-2*o,h:i-2*o})})).then((t=>e.draw.call(this,t)))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}}const B={id:"modal.retry.title",sprite:v.RETRY_MODAL.TITLE,scale:1},F={id:"modal.retry.retry_button",sprite:v.RETRY_MODAL.RETRY,hoveredSprite:Y(v.RETRY_MODAL.RETRY_HOVERED),scale:1.25,interactable:!0},j=[B,F,z],V=k.bind(k,j),Z={id:"modal.success.title",sprite:v.SUCCESS_MODAL.TITLE,scale:1},J={id:"modal.success.reset_button",sprite:v.SUCCESS_MODAL.RESET,hoveredSprite:Y(v.SUCCESS_MODAL.RESET_HOVERED),scale:1.25,interactable:!0},X=[Z,J,z],G=k.bind(k,X);var K,$=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))},q=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n},Q=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class ee{constructor(){K.set(this,void 0),this.modal=null,q(this,K,!0,"f")}open(e){this.modal=e,q(this,K,!1,"f")}close(){if(!this.modal)throw new Error("No modal to close");this.hide(),this.modal=null}get hidden(){return Q(this,K,"f")}hide(){if(!this.modal)throw new Error("No modal to hide");this.modal.deregisterEvents(),q(this,K,!0,"f")}reveal(){if(!this.modal)throw new Error("No modal to reveal");this.modal.registerEvents(),q(this,K,!1,"f")}draw(){return $(this,void 0,void 0,(function*(){Q(this,K,"f")||(yield this.modal.draw())}))}deregisterEvents(){var e;null===(e=this.modal)||void 0===e||e.deregisterEvents()}}function te(e){e.preventDefault()}K=new WeakMap;class ne{constructor(e){this.props=e,"w"in this.props&&"h"in this.props?this.camera=new b({w:this.props.w,h:this.props.h}):this.camera=new b,this.camera.addEventListener("press",this.handlePress.bind(this)),this.camera.addEventListener("longpress",this.handleLongPress.bind(this)),this.camera.addEventListener("move",this.draw.bind(this)),this.modal=new ee,this.drawWithLimit=m(this.draw.bind(this),100),this.lastDrawTimestamp=0,this.reset(),this.registerEvents()}reset(){let e;if(this.camera.reset(),this.gameOver=!1,"w"in this.props&&"h"in this.props&&"numMines"in this.props)e=O({width:this.props.w,height:this.props.h,mines:this.props.numMines});else{if(!("mineDensity"in this.props))throw new Error("unknown game props type");e=O({mineDensity:this.props.mineDensity})}e.then(this.draw.bind(this))}draw(){return $(this,void 0,void 0,(function*(){const e=Date.now();var t;e-this.lastDrawTimestamp>1e3/60&&(this.lastDrawTimestamp=e,yield(t=this.camera.visibleTiles,N("appearance",t)).then(this.camera.draw.bind(this.camera)).then(this.modal.draw.bind(this.modal)))}))}registerEvents(){window.addEventListener("resize",this.drawWithLimit),w.addEventListener("contextmenu",te),this.modal.hidden&&this.camera.registerEvents()}deregisterEvents(){window.removeEventListener("resize",this.drawWithLimit),w.removeEventListener("contextmenu",te),this.camera.deregisterEvents(),this.modal.deregisterEvents()}handleState(e){switch(e.state){case"win":this.gameOver=!0,l("Win detected, displaying success modal"),this.handleEndGameModal(G,J.id);break;case"loss":this.gameOver=!0,l("Loss detected, displaying retry modal"),setTimeout(this.handleEndGameModal.bind(this,V,F.id),1e3)}}handleEndGameModal(e,t){return $(this,void 0,void 0,(function*(){const n=new e;this.modal.open(n),n.addEventListener("hover",this.draw.bind(this)),n.addEventListener("press",(e=>{switch(e.pressedElement){case W.id:this.modal.hide(),this.camera.registerEvents(),this.draw();break;case t:this.modal.close(),this.camera.registerEvents(),this.reset(),this.draw();break;case z.id:this.deregisterEvents(),this.props.handleBack()}})),this.camera.deregisterEvents(),yield this.draw()}))}handlePress(e){var t;this.gameOver?this.modal.hidden&&(this.modal.reveal(),this.camera.deregisterEvents(),this.draw()):0===e.button?(t=e.pos,N("uncover",t)).then((e=>$(this,void 0,void 0,(function*(){yield this.draw(),this.handleState(e)})))):2===e.button&&C(e.pos).then(this.draw.bind(this))}handleLongPress(e){this.gameOver||0!==e.button||C(e.pos).then(this.draw.bind(this))}}const ie={id:"menu.main.title",sprite:v.MAIN_MENU.TITLE,scale:1},re={id:"menu.main.easy_button",sprite:v.MAIN_MENU.EASY,hoveredSprite:Y(v.MAIN_MENU.EASY_HOVERED),scale:1.25,interactable:!0},se={id:"menu.main.medium_button",sprite:v.MAIN_MENU.MEDIUM,hoveredSprite:Y(v.MAIN_MENU.MEDIUM_HOVERED),scale:1.25,interactable:!0},oe={id:"menu.main.hard_button",sprite:v.MAIN_MENU.HARD,hoveredSprite:Y(v.MAIN_MENU.HARD_HOVERED),scale:1.25,interactable:!0},ae={id:"menu.main.infinite_button",sprite:v.MAIN_MENU.INFINITE,hoveredSprite:Y(v.MAIN_MENU.INFINITE_HOVERED),scale:1.25,interactable:!0},he=[ie,re,se,oe,ae];var ce=n(379),de=n.n(ce),le=n(795),ue=n.n(le),me=n(569),pe=n.n(me),ve=n(565),we=n.n(ve),fe=n(216),Ee=n.n(fe),ye=n(589),ge=n.n(ye),De=n(250),Me={};function xe(){w.width=window.innerWidth,w.height=window.innerHeight,f.imageSmoothingEnabled=!1,f.webkitImageSmoothingEnabled=!1,f.mozImageSmoothingEnabled=!1}Me.styleTagTransform=ge(),Me.setAttributes=we(),Me.insert=pe().bind(null,"head"),Me.domAPI=ue(),Me.insertStyleElement=Ee(),de()(De.Z,Me),De.Z&&De.Z.locals&&De.Z.locals,window.addEventListener("resize",xe),xe();const be=new class extends U{constructor(){super(he),super.addEventListener("press",this.draw.bind(this)),super.addEventListener("hover",this.draw.bind(this)),this.drawWithLimit=m(this.draw.bind(this),100),this.registerEvents()}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){return function(e){return t=this,n=void 0,r=function*(){e||(e={x:0,y:0,w:w.width,h:w.height}),f.clearRect(e.x,e.y,e.w,e.h)},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}().then(e.draw.bind(this))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){super.registerEvents(),window.addEventListener("resize",this.drawWithLimit)}deregisterEvents(){super.deregisterEvents(),window.removeEventListener("resize",this.drawWithLimit)}};be.addEventListener("press",(e=>{let t;switch(be.deregisterEvents(),e.pressedElement){case re.id:t={w:9,h:9,numMines:10};break;case se.id:t={w:16,h:16,numMines:40};break;case oe.id:t={w:30,h:16,numMines:99};break;case ae.id:t={mineDensity:40}}new ne(Object.assign(Object.assign({},t),{handleBack:()=>{be.registerEvents(),be.draw()}}))})),y.then(be.draw.bind(be))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFZbmQsR0FDYitkLEVBQVksQ0FDUnJOLEVBQUcsRUFDSGpDLEVBQUcsRUFDSGlPLFNBQVUsSUFFZCxNQUNKLEtBQUtVLEdBQWNwZCxHQUNmK2QsRUFBWSxDQUNSck4sRUFBRyxHQUNIakMsRUFBRyxHQUNIaU8sU0FBVSxJQUVkLE1BQ0osS0FBS1csR0FBWXJkLEdBQ2IrZCxFQUFZLENBQ1JyTixFQUFHLEdBQ0hqQyxFQUFHLEdBQ0hpTyxTQUFVLElBRWQsTUFDSixLQUFLWSxHQUFnQnRkLEdBQ2pCK2QsRUFBWSxDQUVScEIsWUFBYSxJQUtyQixJQUFJWCxHQUFLLE9BQUQsd0JBQ0QrQixHQUFTLENBQ1piLFdBQVksS0FDUlcsR0FBU3JILGlCQUNUcUgsR0FBU2pILGNBTXJCbEUsRUFBa0J3RyxLQUFLMkUsR0FBU2pILEtBQUsyRSxLQUFLc0MsTSIsInNvdXJjZXMiOlsid2VicGFjazovL21pbmVzd2VlcGVyLy4vYXNzZXRzL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL25vZGVfbW9kdWxlcy9kYXRlZm9ybWF0L2xpYi9kYXRlZm9ybWF0LmpzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL3V0aWwudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvZHJhdy50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9ldmVudC1tYW5hZ2VyLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2dhbWUvY2FtZXJhLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2dvaW8vd29ya2VyLWhlbHBlci50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9nb2lvL2dvaW8udHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvbWVudS9tZW51LnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2NvbW1vbi50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9tZW51L21vZGFsLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL21lbnUvcmV0cnktbW9kYWwudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvbWVudS9zdWNjZXNzLW1vZGFsLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2dhbWUvZ2FtZS50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9tZW51L21haW4tbWVudS50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL2Fzc2V0cy9zdHlsZXMuY3NzP2Y3NjQiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHkge1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICBtYXJnaW46IDA7XFxufVxcbmNhbnZhcyB7XFxuICAgIGltYWdlLXJlbmRlcmluZzogLW1vei1jcmlzcC1lZGdlcztcXG4gICAgaW1hZ2UtcmVuZGVyaW5nOiAtd2Via2l0LWNyaXNwLWVkZ2VzO1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IHBpeGVsYXRlZDtcXG4gICAgaW1hZ2UtcmVuZGVyaW5nOiBjcmlzcC1lZGdlcztcXG4gICAgdG91Y2gtYWN0aW9uOiBub25lO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9hc3NldHMvc3R5bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQixTQUFTO0FBQ2I7QUFDQTtJQUNJLGlDQUFpQztJQUNqQyxvQ0FBb0M7SUFDcEMsMEJBQTBCO0lBQzFCLDRCQUE0QjtJQUM1QixrQkFBa0I7QUFDdEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiYm9keSB7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIG1hcmdpbjogMDtcXG59XFxuY2FudmFzIHtcXG4gICAgaW1hZ2UtcmVuZGVyaW5nOiAtbW96LWNyaXNwLWVkZ2VzO1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IC13ZWJraXQtY3Jpc3AtZWRnZXM7XFxuICAgIGltYWdlLXJlbmRlcmluZzogcGl4ZWxhdGVkO1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IGNyaXNwLWVkZ2VzO1xcbiAgICB0b3VjaC1hY3Rpb246IG5vbmU7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmJ1bmRsZS5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsInZhciB0b2tlbj0vZHsxLDR9fER7Myw0fXxtezEsNH18eXkoPzp5eSk/fChbSGhNc1R0XSlcXDE/fFd7MSwyfXxbTGxvcFNaTl18XCJbXlwiXSpcInwnW14nXSonL2c7dmFyIHRpbWV6b25lPS9cXGIoPzpbQS1aXXsxLDN9W0EtWl1bVENdKSg/OlstK11cXGR7NH0pP3woKD86QXVzdHJhbGlhbiApPyg/OlBhY2lmaWN8TW91bnRhaW58Q2VudHJhbHxFYXN0ZXJufEF0bGFudGljKSAoPzpTdGFuZGFyZHxEYXlsaWdodHxQcmV2YWlsaW5nKSBUaW1lKVxcYi9nO3ZhciB0aW1lem9uZUNsaXA9L1teLStcXGRBLVpdL2c7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGF0ZUZvcm1hdChkYXRlLG1hc2ssdXRjLGdtdCl7aWYoYXJndW1lbnRzLmxlbmd0aD09PTEmJnR5cGVvZiBkYXRlPT09XCJzdHJpbmdcIiYmIS9cXGQvLnRlc3QoZGF0ZSkpe21hc2s9ZGF0ZTtkYXRlPXVuZGVmaW5lZH1kYXRlPWRhdGV8fGRhdGU9PT0wP2RhdGU6bmV3IERhdGU7aWYoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpe2RhdGU9bmV3IERhdGUoZGF0ZSl9aWYoaXNOYU4oZGF0ZSkpe3Rocm93IFR5cGVFcnJvcihcIkludmFsaWQgZGF0ZVwiKX1tYXNrPVN0cmluZyhtYXNrc1ttYXNrXXx8bWFza3x8bWFza3NbXCJkZWZhdWx0XCJdKTt2YXIgbWFza1NsaWNlPW1hc2suc2xpY2UoMCw0KTtpZihtYXNrU2xpY2U9PT1cIlVUQzpcInx8bWFza1NsaWNlPT09XCJHTVQ6XCIpe21hc2s9bWFzay5zbGljZSg0KTt1dGM9dHJ1ZTtpZihtYXNrU2xpY2U9PT1cIkdNVDpcIil7Z210PXRydWV9fXZhciBfPWZ1bmN0aW9uIF8oKXtyZXR1cm4gdXRjP1wiZ2V0VVRDXCI6XCJnZXRcIn07dmFyIF9kPWZ1bmN0aW9uIGQoKXtyZXR1cm4gZGF0ZVtfKCkrXCJEYXRlXCJdKCl9O3ZhciBEPWZ1bmN0aW9uIEQoKXtyZXR1cm4gZGF0ZVtfKCkrXCJEYXlcIl0oKX07dmFyIF9tPWZ1bmN0aW9uIG0oKXtyZXR1cm4gZGF0ZVtfKCkrXCJNb250aFwiXSgpfTt2YXIgeT1mdW5jdGlvbiB5KCl7cmV0dXJuIGRhdGVbXygpK1wiRnVsbFllYXJcIl0oKX07dmFyIF9IPWZ1bmN0aW9uIEgoKXtyZXR1cm4gZGF0ZVtfKCkrXCJIb3Vyc1wiXSgpfTt2YXIgX009ZnVuY3Rpb24gTSgpe3JldHVybiBkYXRlW18oKStcIk1pbnV0ZXNcIl0oKX07dmFyIF9zPWZ1bmN0aW9uIHMoKXtyZXR1cm4gZGF0ZVtfKCkrXCJTZWNvbmRzXCJdKCl9O3ZhciBfTD1mdW5jdGlvbiBMKCl7cmV0dXJuIGRhdGVbXygpK1wiTWlsbGlzZWNvbmRzXCJdKCl9O3ZhciBfbz1mdW5jdGlvbiBvKCl7cmV0dXJuIHV0Yz8wOmRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKX07dmFyIF9XPWZ1bmN0aW9uIFcoKXtyZXR1cm4gZ2V0V2VlayhkYXRlKX07dmFyIF9OPWZ1bmN0aW9uIE4oKXtyZXR1cm4gZ2V0RGF5T2ZXZWVrKGRhdGUpfTt2YXIgZmxhZ3M9e2Q6ZnVuY3Rpb24gZCgpe3JldHVybiBfZCgpfSxkZDpmdW5jdGlvbiBkZCgpe3JldHVybiBwYWQoX2QoKSl9LGRkZDpmdW5jdGlvbiBkZGQoKXtyZXR1cm4gaTE4bi5kYXlOYW1lc1tEKCldfSxEREQ6ZnVuY3Rpb24gREREKCl7cmV0dXJuIGdldERheU5hbWUoe3k6eSgpLG06X20oKSxkOl9kKCksXzpfKCksZGF5TmFtZTppMThuLmRheU5hbWVzW0QoKV0sc2hvcnQ6dHJ1ZX0pfSxkZGRkOmZ1bmN0aW9uIGRkZGQoKXtyZXR1cm4gaTE4bi5kYXlOYW1lc1tEKCkrN119LEREREQ6ZnVuY3Rpb24gRERERCgpe3JldHVybiBnZXREYXlOYW1lKHt5OnkoKSxtOl9tKCksZDpfZCgpLF86XygpLGRheU5hbWU6aTE4bi5kYXlOYW1lc1tEKCkrN119KX0sbTpmdW5jdGlvbiBtKCl7cmV0dXJuIF9tKCkrMX0sbW06ZnVuY3Rpb24gbW0oKXtyZXR1cm4gcGFkKF9tKCkrMSl9LG1tbTpmdW5jdGlvbiBtbW0oKXtyZXR1cm4gaTE4bi5tb250aE5hbWVzW19tKCldfSxtbW1tOmZ1bmN0aW9uIG1tbW0oKXtyZXR1cm4gaTE4bi5tb250aE5hbWVzW19tKCkrMTJdfSx5eTpmdW5jdGlvbiB5eSgpe3JldHVybiBTdHJpbmcoeSgpKS5zbGljZSgyKX0seXl5eTpmdW5jdGlvbiB5eXl5KCl7cmV0dXJuIHBhZCh5KCksNCl9LGg6ZnVuY3Rpb24gaCgpe3JldHVybiBfSCgpJTEyfHwxMn0saGg6ZnVuY3Rpb24gaGgoKXtyZXR1cm4gcGFkKF9IKCklMTJ8fDEyKX0sSDpmdW5jdGlvbiBIKCl7cmV0dXJuIF9IKCl9LEhIOmZ1bmN0aW9uIEhIKCl7cmV0dXJuIHBhZChfSCgpKX0sTTpmdW5jdGlvbiBNKCl7cmV0dXJuIF9NKCl9LE1NOmZ1bmN0aW9uIE1NKCl7cmV0dXJuIHBhZChfTSgpKX0sczpmdW5jdGlvbiBzKCl7cmV0dXJuIF9zKCl9LHNzOmZ1bmN0aW9uIHNzKCl7cmV0dXJuIHBhZChfcygpKX0sbDpmdW5jdGlvbiBsKCl7cmV0dXJuIHBhZChfTCgpLDMpfSxMOmZ1bmN0aW9uIEwoKXtyZXR1cm4gcGFkKE1hdGguZmxvb3IoX0woKS8xMCkpfSx0OmZ1bmN0aW9uIHQoKXtyZXR1cm4gX0goKTwxMj9pMThuLnRpbWVOYW1lc1swXTppMThuLnRpbWVOYW1lc1sxXX0sdHQ6ZnVuY3Rpb24gdHQoKXtyZXR1cm4gX0goKTwxMj9pMThuLnRpbWVOYW1lc1syXTppMThuLnRpbWVOYW1lc1szXX0sVDpmdW5jdGlvbiBUKCl7cmV0dXJuIF9IKCk8MTI/aTE4bi50aW1lTmFtZXNbNF06aTE4bi50aW1lTmFtZXNbNV19LFRUOmZ1bmN0aW9uIFRUKCl7cmV0dXJuIF9IKCk8MTI/aTE4bi50aW1lTmFtZXNbNl06aTE4bi50aW1lTmFtZXNbN119LFo6ZnVuY3Rpb24gWigpe3JldHVybiBnbXQ/XCJHTVRcIjp1dGM/XCJVVENcIjpmb3JtYXRUaW1lem9uZShkYXRlKX0sbzpmdW5jdGlvbiBvKCl7cmV0dXJuKF9vKCk+MD9cIi1cIjpcIitcIikrcGFkKE1hdGguZmxvb3IoTWF0aC5hYnMoX28oKSkvNjApKjEwMCtNYXRoLmFicyhfbygpKSU2MCw0KX0scDpmdW5jdGlvbiBwKCl7cmV0dXJuKF9vKCk+MD9cIi1cIjpcIitcIikrcGFkKE1hdGguZmxvb3IoTWF0aC5hYnMoX28oKSkvNjApLDIpK1wiOlwiK3BhZChNYXRoLmZsb29yKE1hdGguYWJzKF9vKCkpJTYwKSwyKX0sUzpmdW5jdGlvbiBTKCl7cmV0dXJuW1widGhcIixcInN0XCIsXCJuZFwiLFwicmRcIl1bX2QoKSUxMD4zPzA6KF9kKCklMTAwLV9kKCklMTAhPTEwKSpfZCgpJTEwXX0sVzpmdW5jdGlvbiBXKCl7cmV0dXJuIF9XKCl9LFdXOmZ1bmN0aW9uIFdXKCl7cmV0dXJuIHBhZChfVygpKX0sTjpmdW5jdGlvbiBOKCl7cmV0dXJuIF9OKCl9fTtyZXR1cm4gbWFzay5yZXBsYWNlKHRva2VuLGZ1bmN0aW9uKG1hdGNoKXtpZihtYXRjaCBpbiBmbGFncyl7cmV0dXJuIGZsYWdzW21hdGNoXSgpfXJldHVybiBtYXRjaC5zbGljZSgxLG1hdGNoLmxlbmd0aC0xKX0pfWV4cG9ydCB2YXIgbWFza3M9e2RlZmF1bHQ6XCJkZGQgbW1tIGRkIHl5eXkgSEg6TU06c3NcIixzaG9ydERhdGU6XCJtL2QveXlcIixwYWRkZWRTaG9ydERhdGU6XCJtbS9kZC95eXl5XCIsbWVkaXVtRGF0ZTpcIm1tbSBkLCB5eXl5XCIsbG9uZ0RhdGU6XCJtbW1tIGQsIHl5eXlcIixmdWxsRGF0ZTpcImRkZGQsIG1tbW0gZCwgeXl5eVwiLHNob3J0VGltZTpcImg6TU0gVFRcIixtZWRpdW1UaW1lOlwiaDpNTTpzcyBUVFwiLGxvbmdUaW1lOlwiaDpNTTpzcyBUVCBaXCIsaXNvRGF0ZTpcInl5eXktbW0tZGRcIixpc29UaW1lOlwiSEg6TU06c3NcIixpc29EYXRlVGltZTpcInl5eXktbW0tZGQnVCdISDpNTTpzc29cIixpc29VdGNEYXRlVGltZTpcIlVUQzp5eXl5LW1tLWRkJ1QnSEg6TU06c3MnWidcIixleHBpcmVzSGVhZGVyRm9ybWF0OlwiZGRkLCBkZCBtbW0geXl5eSBISDpNTTpzcyBaXCJ9O2V4cG9ydCB2YXIgaTE4bj17ZGF5TmFtZXM6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCIsXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXSxtb250aE5hbWVzOltcIkphblwiLFwiRmViXCIsXCJNYXJcIixcIkFwclwiLFwiTWF5XCIsXCJKdW5cIixcIkp1bFwiLFwiQXVnXCIsXCJTZXBcIixcIk9jdFwiLFwiTm92XCIsXCJEZWNcIixcIkphbnVhcnlcIixcIkZlYnJ1YXJ5XCIsXCJNYXJjaFwiLFwiQXByaWxcIixcIk1heVwiLFwiSnVuZVwiLFwiSnVseVwiLFwiQXVndXN0XCIsXCJTZXB0ZW1iZXJcIixcIk9jdG9iZXJcIixcIk5vdmVtYmVyXCIsXCJEZWNlbWJlclwiXSx0aW1lTmFtZXM6W1wiYVwiLFwicFwiLFwiYW1cIixcInBtXCIsXCJBXCIsXCJQXCIsXCJBTVwiLFwiUE1cIl19O3ZhciBwYWQ9ZnVuY3Rpb24gcGFkKHZhbCl7dmFyIGxlbj1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMV06MjtyZXR1cm4gU3RyaW5nKHZhbCkucGFkU3RhcnQobGVuLFwiMFwiKX07dmFyIGdldERheU5hbWU9ZnVuY3Rpb24gZ2V0RGF5TmFtZShfcmVmKXt2YXIgeT1fcmVmLnksbT1fcmVmLm0sZD1fcmVmLmQsXz1fcmVmLl8sZGF5TmFtZT1fcmVmLmRheU5hbWUsX3JlZiRzaG9ydD1fcmVmW1wic2hvcnRcIl0sX3Nob3J0PV9yZWYkc2hvcnQ9PT12b2lkIDA/ZmFsc2U6X3JlZiRzaG9ydDt2YXIgdG9kYXk9bmV3IERhdGU7dmFyIHllc3RlcmRheT1uZXcgRGF0ZTt5ZXN0ZXJkYXkuc2V0RGF0ZSh5ZXN0ZXJkYXlbXytcIkRhdGVcIl0oKS0xKTt2YXIgdG9tb3Jyb3c9bmV3IERhdGU7dG9tb3Jyb3cuc2V0RGF0ZSh0b21vcnJvd1tfK1wiRGF0ZVwiXSgpKzEpO3ZhciB0b2RheV9kPWZ1bmN0aW9uIHRvZGF5X2QoKXtyZXR1cm4gdG9kYXlbXytcIkRhdGVcIl0oKX07dmFyIHRvZGF5X209ZnVuY3Rpb24gdG9kYXlfbSgpe3JldHVybiB0b2RheVtfK1wiTW9udGhcIl0oKX07dmFyIHRvZGF5X3k9ZnVuY3Rpb24gdG9kYXlfeSgpe3JldHVybiB0b2RheVtfK1wiRnVsbFllYXJcIl0oKX07dmFyIHllc3RlcmRheV9kPWZ1bmN0aW9uIHllc3RlcmRheV9kKCl7cmV0dXJuIHllc3RlcmRheVtfK1wiRGF0ZVwiXSgpfTt2YXIgeWVzdGVyZGF5X209ZnVuY3Rpb24geWVzdGVyZGF5X20oKXtyZXR1cm4geWVzdGVyZGF5W18rXCJNb250aFwiXSgpfTt2YXIgeWVzdGVyZGF5X3k9ZnVuY3Rpb24geWVzdGVyZGF5X3koKXtyZXR1cm4geWVzdGVyZGF5W18rXCJGdWxsWWVhclwiXSgpfTt2YXIgdG9tb3Jyb3dfZD1mdW5jdGlvbiB0b21vcnJvd19kKCl7cmV0dXJuIHRvbW9ycm93W18rXCJEYXRlXCJdKCl9O3ZhciB0b21vcnJvd19tPWZ1bmN0aW9uIHRvbW9ycm93X20oKXtyZXR1cm4gdG9tb3Jyb3dbXytcIk1vbnRoXCJdKCl9O3ZhciB0b21vcnJvd195PWZ1bmN0aW9uIHRvbW9ycm93X3koKXtyZXR1cm4gdG9tb3Jyb3dbXytcIkZ1bGxZZWFyXCJdKCl9O2lmKHRvZGF5X3koKT09PXkmJnRvZGF5X20oKT09PW0mJnRvZGF5X2QoKT09PWQpe3JldHVybiBfc2hvcnQ/XCJUZHlcIjpcIlRvZGF5XCJ9ZWxzZSBpZih5ZXN0ZXJkYXlfeSgpPT09eSYmeWVzdGVyZGF5X20oKT09PW0mJnllc3RlcmRheV9kKCk9PT1kKXtyZXR1cm4gX3Nob3J0P1wiWXNkXCI6XCJZZXN0ZXJkYXlcIn1lbHNlIGlmKHRvbW9ycm93X3koKT09PXkmJnRvbW9ycm93X20oKT09PW0mJnRvbW9ycm93X2QoKT09PWQpe3JldHVybiBfc2hvcnQ/XCJUbXdcIjpcIlRvbW9ycm93XCJ9cmV0dXJuIGRheU5hbWV9O3ZhciBnZXRXZWVrPWZ1bmN0aW9uIGdldFdlZWsoZGF0ZSl7dmFyIHRhcmdldFRodXJzZGF5PW5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSxkYXRlLmdldE1vbnRoKCksZGF0ZS5nZXREYXRlKCkpO3RhcmdldFRodXJzZGF5LnNldERhdGUodGFyZ2V0VGh1cnNkYXkuZ2V0RGF0ZSgpLSh0YXJnZXRUaHVyc2RheS5nZXREYXkoKSs2KSU3KzMpO3ZhciBmaXJzdFRodXJzZGF5PW5ldyBEYXRlKHRhcmdldFRodXJzZGF5LmdldEZ1bGxZZWFyKCksMCw0KTtmaXJzdFRodXJzZGF5LnNldERhdGUoZmlyc3RUaHVyc2RheS5nZXREYXRlKCktKGZpcnN0VGh1cnNkYXkuZ2V0RGF5KCkrNiklNyszKTt2YXIgZHM9dGFyZ2V0VGh1cnNkYXkuZ2V0VGltZXpvbmVPZmZzZXQoKS1maXJzdFRodXJzZGF5LmdldFRpbWV6b25lT2Zmc2V0KCk7dGFyZ2V0VGh1cnNkYXkuc2V0SG91cnModGFyZ2V0VGh1cnNkYXkuZ2V0SG91cnMoKS1kcyk7dmFyIHdlZWtEaWZmPSh0YXJnZXRUaHVyc2RheS1maXJzdFRodXJzZGF5KS8oODY0ZTUqNyk7cmV0dXJuIDErTWF0aC5mbG9vcih3ZWVrRGlmZil9O3ZhciBnZXREYXlPZldlZWs9ZnVuY3Rpb24gZ2V0RGF5T2ZXZWVrKGRhdGUpe3ZhciBkb3c9ZGF0ZS5nZXREYXkoKTtpZihkb3c9PT0wKXtkb3c9N31yZXR1cm4gZG93fTtleHBvcnQgdmFyIGZvcm1hdFRpbWV6b25lPWZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKGRhdGUpe3JldHVybihTdHJpbmcoZGF0ZSkubWF0Y2godGltZXpvbmUpfHxbXCJcIl0pLnBvcCgpLnJlcGxhY2UodGltZXpvbmVDbGlwLFwiXCIpLnJlcGxhY2UoL0dNVFxcKzAwMDAvZyxcIlVUQ1wiKX07IiwiaW1wb3J0IGRhdGVGb3JtYXQgZnJvbSAnZGF0ZWZvcm1hdCc7XG5cbmNvbnN0IExPR19USU1FX0ZPUk1BVCA9ICd5eXl5L21tL2RkIEhIOk1NOnNzLmwnO1xuXG4vLyBXcml0ZXMgdGhlIGdpdmVuIHRleHQgdG8gdGhlIGNvbnNvbGUsIHdpdGggJ0pTOiAnIHByZXBlbmRlZCAodG8gZGlzdGluZ3Vpc2hcbi8vIGZyb20gbG9ncyBpbiB0aGUgV0FTTSBtb2R1bGUpXG5leHBvcnQgZnVuY3Rpb24gY29uc29sZUxvZyhzKSB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zb2xlLmxvZygnKCcgKyBkYXRlRm9ybWF0KG5vdywgTE9HX1RJTUVfRk9STUFUKSArICcpIEpTOiAnICsgcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZU9iaihvKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobykpO1xufVxuXG5jb25zdCB0aW1lb3V0SWRGb3JGdW5jID0gbmV3IE1hcDxUaW1lckhhbmRsZXIsIG51bWJlcj4oKTtcblxuLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgb25seSBjYWxscyBmdW5jIGlmIHRoZXJlIGhhdmVcbi8vIGJlZW4gbm8gY2FsbHMgdG8gdGhlIHJldHVybmVkIGZ1bmN0aW9uIGluIGRlbGF5IG1pbGxpc2Vjb25kcy5cbi8vIFVzZWZ1bCBmb3IgcHJldmVudGluZyBleGNlc3NpdmUgY2FsbHMgZnJvbSBldmVudCBoYW5kbGVycyAoZS5nLiBub3QgZHJhd2luZyBvbiBldmVyeSByZXNpemUgZXZlbnQpXG5leHBvcnQgZnVuY3Rpb24gbGltaXRlcihmdW5jOiBUaW1lckhhbmRsZXIsIGRlbGF5OiBudW1iZXIpIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjb25zdCBpZCA9IHRpbWVvdXRJZEZvckZ1bmMuZ2V0KGZ1bmMpO1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGltZW91dElkRm9yRnVuYy5zZXQoZnVuYywgc2V0VGltZW91dChmdW5jLCBkZWxheSkpO1xuICAgIH07XG59IiwiaW1wb3J0IHtSZWN0fSBmcm9tICcuL2NvbW1vbic7XG5pbXBvcnQge2NvbnNvbGVMb2d9IGZyb20gJy4vdXRpbCc7XG5cbi8vIENvbnN0YW50IGZvciB0aGUgc2l6ZSBvZiBhIHRpbGUgaW4gdGhlIHNwcml0ZXNoZWV0XG5leHBvcnQgY29uc3QgVElMRV9TSVpFID0gMTA7XG5cbi8vIENvbnN0YW50IGZvciB0aGUgaGVpZ2h0IG9mIGEgcm93IGluIHRoZSBzcHJpdGVzaGVldFxuZXhwb3J0IGNvbnN0IFJPV19IRUlHSFQgPSBUSUxFX1NJWkU7XG5cbmV4cG9ydCBjb25zdCBTUFJJVEVTID0ge1xuICAgIFRJTEVTOiB7XG4gICAgICAgIEVNUFRZOiB7eDogMCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIDE6IHt4OiAxMCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIDI6IHt4OiAyMCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIDM6IHt4OiAzMCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIDQ6IHt4OiA0MCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIDU6IHt4OiA1MCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIDY6IHt4OiA2MCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIDc6IHt4OiA3MCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIDg6IHt4OiA4MCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIE1JTkU6IHt4OiA5MCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIEhJRERFTjoge3g6IDEwMCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIEZMQUc6IHt4OiAxMTAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICBDTE9TRToge3g6IDEyMCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3RcbiAgICB9LFxuXG4gICAgTU9EQUw6IHtcbiAgICAgICAgQkFDSzoge3g6IDAsIHk6IDkwLCB3OiAyNCwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgQkFDS19IT1ZFUkVEOiB7eDogMjQsIHk6IDkwLCB3OiAyNCwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdFxuICAgIH0sXG5cbiAgICBNQUlOX01FTlU6IHtcbiAgICAgICAgVElUTEU6IHt4OiAwLCB5OiAxMCwgdzogOTUsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIEVBU1k6IHt4OiAwLCB5OiAyMCwgdzogMjYsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIEVBU1lfSE9WRVJFRDoge3g6IDI2LCB5OiAyMCwgdzogMjYsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIE1FRElVTToge3g6IDAsIHk6IDMwLCB3OiAzNSwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgTUVESVVNX0hPVkVSRUQ6IHt4OiAzNSwgeTogMzAsIHc6IDMwLCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBIQVJEOiB7eDogMCwgeTogNDAsIHc6IDI1LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBIQVJEX0hPVkVSRUQ6IHt4OiAyNSwgeTogNDAsIHc6IDI2LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBDVVNUT006IHt4OiAwLCB5OiA1MCwgdzogMzgsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIENVU1RPTV9IT1ZFUkVEOiB7eDogMzgsIHk6IDUwLCB3OiAyNiwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgSU5GSU5JVEU6IHt4OiAwLCB5OiA2MCwgdzogNDMsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIElORklOSVRFX0hPVkVSRUQ6IHt4OiA0MywgeTogNjAsIHc6IDQzLCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0XG4gICAgfSxcblxuICAgIFJFVFJZX01PREFMOiB7XG4gICAgICAgIFRJVExFOiB7eDogMCwgeTogNzAsIHc6IDQ1LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBSRVRSWToge3g6IDAsIHk6IDgwLCB3OiAzMCwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgUkVUUllfSE9WRVJFRDoge3g6IDMwLCB5OiA4MCwgdzogMzAsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgfSxcblxuICAgIFNVQ0NFU1NfTU9EQUw6IHtcbiAgICAgICAgVElUTEU6IHt4OiAwLCB5OiAxMDAsIHc6IDUyLCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBSRVNFVDoge3g6IDAsIHk6IDExMCwgdzogNTMsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIFJFU0VUX0hPVkVSRUQ6IHt4OiA1MywgeTogMTEwLCB3OiA1MywgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICB9XG59O1xuXG4vLyBUaGUgY2FudmFzXG5leHBvcnQgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuXG4vLyBUaGUgZ3JhcGhpY2FsIGNvbnRleHQgdG8gZHJhdyB0b1xuZXhwb3J0IGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG5jb25zdCBzcHJpdGVzaGVldCA9IG5ldyBJbWFnZSgpO1xuXG5leHBvcnQgY29uc3Qgc3ByaXRlc2hlZXRMb2FkZWQgPSBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcbiAgICBzcHJpdGVzaGVldC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICBjb25zb2xlTG9nKCdGaW5pc2hlZCBsb2FkaW5nIHNwcml0ZXNoZWV0Jyk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbn0pO1xuXG5zcHJpdGVzaGVldC5zcmMgPSBuZXcgVVJMKCcuLi9hc3NldHMvc3ByaXRlc2hlZXQucG5nJywgaW1wb3J0Lm1ldGEudXJsKS50b1N0cmluZygpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xlYXIocmVjdD86IFJlY3QpIHtcbiAgICBpZiAoIXJlY3QpIHtcbiAgICAgICAgcmVjdCA9IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgdzogY2FudmFzLndpZHRoLFxuICAgICAgICAgICAgaDogY2FudmFzLmhlaWdodFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjdHguY2xlYXJSZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LncsIHJlY3QuaCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3U3ByaXRlKHNwcml0ZTogUmVjdCwgZHJhd1JlY3Q6IFJlY3QpIHtcbiAgICBjdHguZHJhd0ltYWdlKHNwcml0ZXNoZWV0LFxuICAgICAgICBzcHJpdGUueCwgc3ByaXRlLnksIHNwcml0ZS53LCBzcHJpdGUuaCxcbiAgICAgICAgZHJhd1JlY3QueCwgZHJhd1JlY3QueSwgZHJhd1JlY3QudywgZHJhd1JlY3QuaCk7XG59XG4iLCJleHBvcnQgdHlwZSBFdmVudExpc3RlbmVyPEV2ZW50TWFwVD4gPSAoZXZlbnQ6IEV2ZW50TWFwVFtrZXlvZiBFdmVudE1hcFRdKSA9PiB2b2lkXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50TWFuYWdlcjxFdmVudE1hcFQ+IHtcbiAgICBwcml2YXRlIGV2ZW50TGlzdGVuZXJzOiBNYXA8a2V5b2YgRXZlbnRNYXBULCBBcnJheTxFdmVudExpc3RlbmVyPEV2ZW50TWFwVD4+PjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBFdmVudE1hcFQ+KHR5cGU6IEssIGxpc3RlbmVyOiAoZXZlbnQ6IEV2ZW50TWFwVFtLXSkgPT4gdm9pZCkge1xuICAgICAgICBjb25zdCBsaXN0ZW5lcnNGb3JFdmVudCA9IHRoaXMuZXZlbnRMaXN0ZW5lcnMuZ2V0KHR5cGUpID8/IFtdO1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnNldCh0eXBlLCBbLi4ubGlzdGVuZXJzRm9yRXZlbnQsIGxpc3RlbmVyXSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZUV2ZW50TGlzdGVuZXI8SyBleHRlbmRzIGtleW9mIEV2ZW50TWFwVD4odHlwZTogSywgbGlzdGVuZXI6IChldmVudDogRXZlbnRNYXBUW0tdKSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyc0ZvckV2ZW50ID0gdGhpcy5ldmVudExpc3RlbmVycy5nZXQodHlwZSkgPz8gW107XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMuc2V0KHR5cGUsXG4gICAgICAgICAgICBsaXN0ZW5lcnNGb3JFdmVudC5maWx0ZXIobGlzdGVuZXJGb3JFdmVudCA9PiBsaXN0ZW5lckZvckV2ZW50ID09PSBsaXN0ZW5lcikpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBjYWxsRXZlbnRMaXN0ZW5lcnM8SyBleHRlbmRzIGtleW9mIEV2ZW50TWFwVD4odHlwZTogSywgZXZlbnQ6IEV2ZW50TWFwVFtLXSkge1xuICAgICAgICAodGhpcy5ldmVudExpc3RlbmVycy5nZXQodHlwZSkgPz8gW10pLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIoZXZlbnQpKTtcbiAgICB9XG59IiwiaW1wb3J0IHtTUFJJVEVTLCBjYW52YXMsIGN0eCwgZHJhd1Nwcml0ZX0gZnJvbSAnLi4vZHJhdyc7XG5cbmltcG9ydCBFdmVudE1hbmFnZXIgZnJvbSAnLi4vZXZlbnQtbWFuYWdlcic7XG5cbmltcG9ydCAqIGFzIFV0aWwgZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge1BvcywgUmVjdCwgU2l6ZX0gZnJvbSAnLi4vY29tbW9uJztcblxuZnVuY3Rpb24gY29uc29sZUxvZyhzKSB7XG4gICAgVXRpbC5jb25zb2xlTG9nKCcoY2FtZXJhKSAnICsgcyk7XG59XG5cbi8vIHRvZG8gbGltaXQgcHJlc3NlcyAodG8gcHJldmVudCBzcGFtKVxuLy8gdG9kbyB0cmFuc2xhdGUvc2NhbGUgb24gd2luZG93IHJlc2l6ZVxuLy8gdG9kbyBoYW5kbGUgY2FudmFzIHRoYXQgaXNuJ3QgZnVsbHNjcmVlbiBwcm9wZXJseSAodGhvdWdoIHRoaXMgaXNuJ3QgcGFydGljdWxhcmx5IHVzZWZ1bClcblxuLy8gQ29uc3RhbnQgZm9yIHRoZSBkcmF3IHNpemUgb2YgYSB0aWxlXG5jb25zdCBUSUxFX0RSQVdfU0laRSA9IDMwO1xuXG4vLyBDb25zdGFudCBmb3IgdGhlIG1pbmltdW0gc2NhbGVcbmNvbnN0IE1JTl9TQ0FMRSA9IDAuNTtcbi8vIENvbnN0YW50IGZvciB0aGUgbWF4aW11bSBzY2FsZVxuY29uc3QgTUFYX1NDQUxFID0gNC4wO1xuXG5jb25zdCBNT1VTRV9XSEVFTF9TQ0FMRV9GQUNUT1IgPSAwLjg7XG5cbi8vIENvbnN0YW50IGZvciBob3cgbG9uZyBhIHBvaW50ZXIgbmVlZHMgdG8gYmUgcHJlc3NlZCB0byBiZSBhIFwibG9uZyBwcmVzc1wiLCBpblxuLy8gbWlsbGlzZWNvbmRzXG5leHBvcnQgY29uc3QgTE9OR19QUkVTU19ERUxBWV9NUyA9IDIwMDtcblxuLy8gdG9kbyBwYXNzIHVzZWZ1bCBpbmZvcm1hdGlvbiBoZXJlLCBlLmcuIGRlbHRhIHNjYWxlL3RyYW5zbGF0aW9uXG5leHBvcnQgdHlwZSBNb3ZlRXZlbnQgPSBSZWNvcmQ8c3RyaW5nLCBuZXZlcj5cblxuZXhwb3J0IHR5cGUgUHJlc3NFdmVudCA9IHtcbiAgICBwb3M6IFBvc1xuICAgIGJ1dHRvbjogbnVtYmVyXG59XG5cbmludGVyZmFjZSBDYW1lcmFFdmVudE1hcCB7XG4gICAgLy8gQSBtb3ZlIGV2ZW50IGluY2x1ZGVzIHpvb21pbmcgaW4gb3Igb3V0XG4gICAgJ21vdmUnOiBNb3ZlRXZlbnRcbiAgICAncHJlc3MnOiBQcmVzc0V2ZW50XG4gICAgJ2xvbmdwcmVzcyc6IFByZXNzRXZlbnRcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FtZXJhIGV4dGVuZHMgRXZlbnRNYW5hZ2VyPENhbWVyYUV2ZW50TWFwPiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWVsZFNpemU6IFNpemUgfCB1bmRlZmluZWQ7XG5cbiAgICBwcml2YXRlIHRyYW5zbGF0aW9uOiBQb3M7XG4gICAgcHJpdmF0ZSBzY2FsZTogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSBwb2ludGVyRG93bkV2ZW50IDoge1xuICAgICAgICB0b3VjaGVzOiBBcnJheTxQb2ludGVyRXZlbnQ+XG4gICAgICAgIG1vdmVPclNjYWxlOiBib29sZWFuLFxuICAgICAgICBkaXN0YW5jZTogbnVtYmVyIHwgbnVsbCxcbiAgICAgICAgbG9uZ1ByZXNzVGltZW91dDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4gfCBudWxsXG4gICAgfTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlV2hlZWw7XG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVQb2ludGVyRG93bjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVBvaW50ZXJNb3ZlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlUG9pbnRlckNhbmNlbDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVBvaW50ZXJPdXQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVQb2ludGVyVXA7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWVsZFNpemU/OiBTaXplKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5maWVsZFNpemUgPSBmaWVsZFNpemU7XG5cbiAgICAgICAgLy8gUmVzZXQgdGhlIGNhbWVyYVxuICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50ID0ge1xuICAgICAgICAgICAgdG91Y2hlczogW10sXG4gICAgICAgICAgICBtb3ZlT3JTY2FsZTogZmFsc2UsXG4gICAgICAgICAgICBkaXN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgIGxvbmdQcmVzc1RpbWVvdXQ6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZVdoZWVsID0gKGV2ZW50IDogV2hlZWxFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgICAgICAgIGNvbnN0IGZhY3RvciA9IGV2ZW50LmRlbHRhWSA+IDAgPyBNT1VTRV9XSEVFTF9TQ0FMRV9GQUNUT1IgOiAxIC8gTU9VU0VfV0hFRUxfU0NBTEVfRkFDVE9SO1xuXG4gICAgICAgICAgICAvLyBab29tIHRoZSBjYW1lcmFcbiAgICAgICAgICAgIHRoaXMuem9vbShmYWN0b3IsIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlckRvd24gPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgcG9pbnRlciBldmVudFxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygnZmlyc3QgcG9pbnRlcmRvd24nKTtcbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHRpbWVvdXQgZm9yIGxvbmcgcHJlc3Nlc1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5sb25nUHJlc3NUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSB3YXMgYSBwb2ludGVyIGRvd24gZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50Lm1vdmVPclNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZUxvZygnbG9uZ3ByZXNzIHRpbWVvdXQnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ2xvbmdwcmVzcycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogdGhpcy50b1dvcmxkUG9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzWzBdLmNsaWVudFgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSksXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b246IGV2ZW50LmJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgdG91Y2hlc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgIH0sIExPTkdfUFJFU1NfREVMQVlfTVMpO1xuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBvdGhlciBmaWVsZHNcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQuZGlzdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlTG9nKCdhbm90aGVyIHBvaW50ZXJkb3duJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFkZCB0aGUgcG9pbnRlciBldmVudFxuICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMucHVzaChldmVudCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgcHJldmlvdXMgdG91Y2ggZXZlbnRcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzVG91Y2hJbmRleCA9IHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgICBlID0+IGUucG9pbnRlcklkID09PSBldmVudC5wb2ludGVySWQpO1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdG91Y2hcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzVG91Y2ggPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1twcmV2aW91c1RvdWNoSW5kZXhdO1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB0b3VjaCBldmVudFxuICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXNbcHJldmlvdXNUb3VjaEluZGV4XSA9IGV2ZW50O1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG9ubHkgb25lIHRvdWNoIGV2ZW50XG4gICAgICAgICAgICBpZiAodGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBhbW91bnQgdGhlIHBvaW50ZXIgbW92ZWRcbiAgICAgICAgICAgICAgICBjb25zdCBkZWx0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogZXZlbnQuY2xpZW50WCAtIHByZXZpb3VzVG91Y2guY2xpZW50WCxcbiAgICAgICAgICAgICAgICAgICAgeTogZXZlbnQuY2xpZW50WSAtIHByZXZpb3VzVG91Y2guY2xpZW50WVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgcmVnaXN0ZXIgYXMgYSBtb3ZlT3JTY2FsZSBldmVudCBpZiB0aGUgcG9pbnRlciBvbmx5IG1vdmVkIGhhbGYgYSB0aWxlIChub1xuICAgICAgICAgICAgICAgIC8vIHNjYWxpbmcpXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUgJiZcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoZGVsdGEueCkgPCBUSUxFX0RSQVdfU0laRSAvIDQgJiZcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoZGVsdGEueSkgPCBUSUxFX0RSQVdfU0laRSAvIDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUcmFuc2xhdGUgdGhlIGNhbWVyYVxuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueCArPSBkZWx0YS54O1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueSArPSBkZWx0YS55O1xuXG4gICAgICAgICAgICAgICAgLy8gUmVzdHJpY3QgdGhlIGNhbWVyYSBpZiB0aGUgZmllbGQgaXMgZml4ZWQgc2l6ZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkUmVhbFNpemUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB0aGlzLmZpZWxkU2l6ZS53ICogVElMRV9EUkFXX1NJWkUgKiB0aGlzLnNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5maWVsZFNpemUuaCAqIFRJTEVfRFJBV19TSVpFICogdGhpcy5zY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBdCBsZWFzdCBoYWxmIHRoZSBmaWVsZCBtdXN0IGJlIHZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogMCAtIChmaWVsZFJlYWxTaXplLnggLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IDAgLSAoZmllbGRSZWFsU2l6ZS55IC8gMilcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogY2FudmFzLndpZHRoIC0gKGZpZWxkUmVhbFNpemUueCAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogY2FudmFzLmhlaWdodCAtIChmaWVsZFJlYWxTaXplLnkgLyAyKVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIExpbWl0IHRoZSB0cmFuc2xhdGlvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uLnggPSBNYXRoLm1pbih0aGlzLnRyYW5zbGF0aW9uLngsIG1heC54KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGlvbi54ID0gTWF0aC5tYXgodGhpcy50cmFuc2xhdGlvbi54LCBtaW4ueCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueSA9IE1hdGgubWluKHRoaXMudHJhbnNsYXRpb24ueSwgbWF4LnkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uLnkgPSBNYXRoLm1heCh0aGlzLnRyYW5zbGF0aW9uLnksIG1pbi55KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG11bHRpcGxlLCB0aGlzIGlzIGEgcGluY2ggZXZlbnRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0d28gdG91Y2ggZXZlbnRzICh3ZSBvbmx5IGNhcmUgYWJvdXQgdGhlIGZpcnN0IHR3bywgZXZlbiBpZlxuICAgICAgICAgICAgICAgIC8vIHRoZSB1c2VyIGhhcyBtb3JlIHRoYW4gMiBmaW5nZXJzIHByZXNzZWQgb24gdGhlIHNjcmVlbilcbiAgICAgICAgICAgICAgICBjb25zdCB0b3VjaDAgPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3VjaDEgPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1sxXTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIHRvdWNoIGV2ZW50c1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5oeXBvdChcbiAgICAgICAgICAgICAgICAgICAgdG91Y2gwLmNsaWVudFggLSB0b3VjaDEuY2xpZW50WCxcbiAgICAgICAgICAgICAgICAgICAgdG91Y2gwLmNsaWVudFkgLSB0b3VjaDEuY2xpZW50WSk7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiBhIHByZXZpb3VzIGRpc3RhbmNlIGhhcyBiZWVuIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wb2ludGVyRG93bkV2ZW50LmRpc3RhbmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmFjdG9yID0gZGlzdGFuY2UgLyB0aGlzLnBvaW50ZXJEb3duRXZlbnQuZGlzdGFuY2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBjZW50ZXIgb2YgdGhlIHpvb21cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VudGVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogKHRvdWNoMC5jbGllbnRYICsgdG91Y2gxLmNsaWVudFgpIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6ICh0b3VjaDAuY2xpZW50WSArIHRvdWNoMS5jbGllbnRZKSAvIDJcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBab29tIHRoZSBjYW1lcmEgYXJvdW5kIHRoZSBjZW50ZXJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b29tKGZhY3RvciwgY2VudGVyLngsIGNlbnRlci55KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgcG9pbnRlciBhcyBoYXZpbmcgbW92ZWQgKHNvIHRoZSB1c2VyIGRvZXNuJ3QgZmxhZyBzb21ldGhpbmcgYnlcbiAgICAgICAgICAgIC8vIGRyYWdnaW5nKVxuICAgICAgICAgICAgaWYgKCF0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlTG9nKCdwb2ludGVyIG1vdmVkLCBub3QgcHJlc3MgZXZlbnQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBvaW50ZXJEb3duRXZlbnQubG9uZ1ByZXNzVGltZW91dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhbGwgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ21vdmUnLCB7fSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyQ2FuY2VsID0gKGV2ZW50OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIHRvZG9cbiAgICAgICAgICAgIGNvbnNvbGVMb2coJ3BvaW50ZXJjYW5jZWwnKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlck91dCA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZXJlIHdhcyBhIHBvaW50ZXIgZG93biBldmVudFxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgcG9pbnRlcnNcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygncG9pbnRlcm91dDogb25lIG9mIG11bHRpcGxlJyk7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBwb2ludGVyJ3MgdG91Y2hcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcyA9IHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgZSA9PiBlLnBvaW50ZXJJZCAhPT0gZXZlbnQucG9pbnRlcklkKTtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LmRpc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygncG9pbnRlcm91dDogbm8gcHJlc3MgZXZlbnQnKTtcbiAgICAgICAgICAgICAgICAvLyBDbGVhciB0aGUgZXZlbnRcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wb2ludGVyRG93bkV2ZW50LmxvbmdQcmVzc1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyVXAgPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSB3YXMgYSBwb2ludGVyIGRvd24gZXZlbnRcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBwb2ludGVyc1xuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlTG9nKCdwb2ludGVydXA6IG9uZSBvZiBtdWx0aXBsZScpO1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgcG9pbnRlcidzIHRvdWNoXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMgPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgIGUgPT4gZS5wb2ludGVySWQgIT09IGV2ZW50LnBvaW50ZXJJZCk7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBkaXN0YW5jZVxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5kaXN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcG9pbnRlciBkaWRuJ3QgbW92ZU9yU2NhbGVcbiAgICAgICAgICAgIGlmICghdGhpcy5wb2ludGVyRG93bkV2ZW50Lm1vdmVPclNjYWxlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygncG9pbnRlcnVwOiBubyBtb3ZlbWVudCBvciBzY2FsaW5nLCBwcmVzcyBldmVudCcpO1xuICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgICAgIHRoaXMuY2FsbEV2ZW50TGlzdGVuZXJzKCdwcmVzcycsIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zOiB0aGlzLnRvV29ybGRQb3MoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1swXS5jbGllbnRYLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSksXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbjogZXZlbnQuYnV0dG9uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coJ3BvaW50ZXJ1cCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbGVhciB0aGUgZXZlbnRcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBvaW50ZXJEb3duRXZlbnQubG9uZ1ByZXNzVGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcyA9IFtdO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudHMoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiBzbyB0aGUgZ2FtZSBmaWVsZCBpcyBpbiB0aGUgbWlkZGxlIG9mIHRoZSBjYW52YXNcbiAgICBwcml2YXRlIG1pZGRsZVRyYW5zbGF0aW9uKCk6IFBvcyB7XG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gZmllbGQgc2l6ZSwgdGhlIG1pZGRsZSBpcyBqdXN0IDAsIDBcbiAgICAgICAgaWYgKHRoaXMuZmllbGRTaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7eDogMCwgeTogMH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IChjYW52YXMud2lkdGggLyAyKSAtICh0aGlzLnNjYWxlICogKCh0aGlzLmZpZWxkU2l6ZS53ICogVElMRV9EUkFXX1NJWkUpIC8gMikpLFxuICAgICAgICAgICAgeTogKGNhbnZhcy5oZWlnaHQgLyAyKSAtICh0aGlzLnNjYWxlICogKCh0aGlzLmZpZWxkU2l6ZS5oICogVElMRV9EUkFXX1NJWkUpIC8gMikpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHRvQ2FudmFzUG9zKHgsIHk6IG51bWJlcik6IFBvcyB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB0aGlzLnRyYW5zbGF0aW9uLnggKyAoeCAqIFRJTEVfRFJBV19TSVpFICogdGhpcy5zY2FsZSksXG4gICAgICAgICAgICB5OiB0aGlzLnRyYW5zbGF0aW9uLnkgKyAoeSAqIFRJTEVfRFJBV19TSVpFICogdGhpcy5zY2FsZSksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHRvV29ybGRQb3MoeCwgeTogbnVtYmVyKTogUG9zIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IE1hdGguZmxvb3IoKCh4IC0gdGhpcy50cmFuc2xhdGlvbi54KSAvIHRoaXMuc2NhbGUpIC8gVElMRV9EUkFXX1NJWkUpLFxuICAgICAgICAgICAgeTogTWF0aC5mbG9vcigoKHkgLSB0aGlzLnRyYW5zbGF0aW9uLnkpIC8gdGhpcy5zY2FsZSkgLyBUSUxFX0RSQVdfU0laRSksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gWm9vbXMgdGhlIGNhbWVyYSBieSB0aGUgZ2l2ZW4gZmFjdG9yIGFyb3VuZCB0aGUgZ2l2ZW4gcG9pbnRcbiAgICBwcml2YXRlIHpvb20oZmFjdG9yOiBudW1iZXIsIHgsIHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGNhbWVyYSdzIG5ldyBzY2FsZVxuICAgICAgICBjb25zdCBuZXdTY2FsZSA9IHRoaXMuc2NhbGUgKiBmYWN0b3I7XG5cbiAgICAgICAgLy8gT25seSBjaGFuZ2UgdGhlIHNjYWxlIGlmIGl0J3MgdmFsaWRcbiAgICAgICAgaWYgKG5ld1NjYWxlID4gTUlOX1NDQUxFICYmIG5ld1NjYWxlIDwgTUFYX1NDQUxFKSB7XG4gICAgICAgICAgICAvLyBUcmFuc2xhdGUgdGhlIGZpZWxkIHNvIHRoZSBtb3VzZSBpcyBzdGlsbCBvdmVyIHRoZSBzYW1lIHRpbGVcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueCAtPSAoeCAtIHRoaXMudHJhbnNsYXRpb24ueCkgKiAoZmFjdG9yIC0gMSk7XG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uLnkgLT0gKHkgLSB0aGlzLnRyYW5zbGF0aW9uLnkpICogKGZhY3RvciAtIDEpO1xuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIG5ldyBzY2FsZVxuICAgICAgICAgICAgdGhpcy5zY2FsZSA9IG5ld1NjYWxlO1xuXG4gICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgIHRoaXMuY2FsbEV2ZW50TGlzdGVuZXJzKCdtb3ZlJywge30pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcodGlsZURhdGE6IEFycmF5PEFycmF5PHN0cmluZz4+KSB7XG4gICAgICAgIC8vIFRoZSBjYW52YXMgd2lkdGggYW5kIGhlaWdodFxuICAgICAgICBjb25zdCB3ID0gY2FudmFzLndpZHRoLCBoID0gY2FudmFzLmhlaWdodDtcblxuICAgICAgICAvLyBDbGVhciB0aGUgY2FudmFzIChmb3Igbm93KVxuICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHcsIGgpO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdGlsZXNcbiAgICAgICAgZm9yIChjb25zdCB5S2V5IGluIHRpbGVEYXRhKSB7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIHRvIHVzZSB0aGUgJ2luJyBzeW50YXgsIGFzIHRpbGVEYXRhIG1pZ2h0IG5vdCBiZSAwLi4udGlsZURhdGEubGVuZ3RoXG4gICAgICAgICAgICBjb25zdCB5ID0gTnVtYmVyKHlLZXkpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB4S2V5IGluIHRpbGVEYXRhW3ldKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IE51bWJlcih4S2V5KTtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHNwcml0ZVxuICAgICAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IFNQUklURVMuVElMRVNbdGlsZURhdGFbeV1beF1dO1xuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIHRpbGUgb24gdGhlIGNhbnZhc1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IHRoaXMudG9DYW52YXNQb3MoeCwgeSk7XG4gICAgICAgICAgICAgICAgZHJhd1Nwcml0ZShzcHJpdGUsIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHBvc2l0aW9uIG9mIHRoZSB0aWxlIHRvIGRyYXcgdG9cbiAgICAgICAgICAgICAgICAgICAgeDogcG9zLngsIHk6IHBvcy55LFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgc2l6ZSBvZiB0aGUgdGlsZSB0byBkcmF3IHRvXG4gICAgICAgICAgICAgICAgICAgIHc6IFRJTEVfRFJBV19TSVpFICogdGhpcy5zY2FsZSwgaDogVElMRV9EUkFXX1NJWkUgKiB0aGlzLnNjYWxlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHZpc2libGVUaWxlcygpOiBSZWN0IHtcbiAgICAgICAgY29uc3QgY2FudmFzUmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBjb25zdCB0aWxlU2l6ZSA9IFRJTEVfRFJBV19TSVpFICogdGhpcy5zY2FsZTtcblxuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLnRvV29ybGRQb3MoY2FudmFzUmVjdC5sZWZ0IC0gdGlsZVNpemUsIGNhbnZhc1JlY3QudG9wIC0gdGlsZVNpemUpO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLnRvV29ybGRQb3MoY2FudmFzUmVjdC5yaWdodCArIHRpbGVTaXplLCBjYW52YXNSZWN0LmJvdHRvbSArIHRpbGVTaXplKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IG1pbi54LFxuICAgICAgICAgICAgeTogbWluLnksXG4gICAgICAgICAgICB3OiBtYXgueCAtIG1pbi54LFxuICAgICAgICAgICAgaDogbWF4LnkgLSBtaW4ueSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBSZXNldCB0aGUgY2FtZXJhIHRvIHRoZSBtaWRkbGUgb2YgdGhlIGZpZWxkXG4gICAgcHVibGljIHJlc2V0KCkge1xuICAgICAgICAvLyBJZiB0aGUgZmllbGQgc2l6ZSBpcyBzZXRcbiAgICAgICAgaWYgKHRoaXMuZmllbGRTaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIEZpdCB0aGUgZ2FtZSBpbiB0aGUgY2FudmFzXG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoIC8gKHRoaXMuZmllbGRTaXplLncgKiBUSUxFX0RSQVdfU0laRSAqIDEuMSksXG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCAvICh0aGlzLmZpZWxkU2l6ZS5oICogVElMRV9EUkFXX1NJWkUgKiAxLjEpKTtcbiAgICAgICAgICAgIC8vIFJlc3RyaWN0IHRoZSBzY2FsZVxuICAgICAgICAgICAgdGhpcy5zY2FsZSA9IE1hdGgubWF4KHRoaXMuc2NhbGUsIE1JTl9TQ0FMRSk7XG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gTWF0aC5taW4odGhpcy5zY2FsZSwgTUFYX1NDQUxFKTtcblxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHNldCB0aGUgc2NhbGUgdG8ganVzdCAxXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gMS4wO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVHJhbnNsYXRlIHRvIHRoZSBtaWRkbGVcbiAgICAgICAgdGhpcy50cmFuc2xhdGlvbiA9IHRoaXMubWlkZGxlVHJhbnNsYXRpb24oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuaGFuZGxlV2hlZWwpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLmhhbmRsZVBvaW50ZXJEb3duKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyY2FuY2VsJywgdGhpcy5oYW5kbGVQb2ludGVyQ2FuY2VsKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJvdXQnLCB0aGlzLmhhbmRsZVBvaW50ZXJPdXQpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgdGhpcy5oYW5kbGVQb2ludGVyVXApO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLmhhbmRsZVdoZWVsKTtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUpO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmNhbmNlbCcsIHRoaXMuaGFuZGxlUG9pbnRlckNhbmNlbCk7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyb3V0JywgdGhpcy5oYW5kbGVQb2ludGVyT3V0KTtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHRoaXMuaGFuZGxlUG9pbnRlclVwKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4uL3V0aWwnO1xuXG4vLyBDcmVhdGUgdGhlIFdBU00gd2ViIHdvcmtlclxuVXRpbC5jb25zb2xlTG9nKCdDcmVhdGluZyBXQVNNIHdvcmtlcicpO1xuY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcihuZXcgVVJMKCcuL3dvcmtlci50cycsIGltcG9ydC5tZXRhLnVybCkpO1xuXG50eXBlIE1lc3NhZ2U8VD4gPSB7XG4gICAgY21kOiBzdHJpbmcsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBkYXRhOiBUXG59XG5cbnR5cGUgUmVzcG9uc2VNZXNzYWdlPFQ+ID0gTWVzc2FnZTxUPiAmIHtcbiAgICBzdWNjZXNzOiBib29sZWFuXG59XG5cbmZ1bmN0aW9uIG5ld01lc3NhZ2U8VD4oY21kOiBzdHJpbmcsIGRhdGE6IFQpOiBNZXNzYWdlPFQ+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjbWQsXG4gICAgICAgIC8vIFdlJ3JlIGFzc3VtaW5nIHRoZSBjbWQgbmFtZSArIGN1cnJlbnQgdGltZSBpbiBtaWxsaXNlY29uZHMgaXMgYSBnb29kIGVub3VnaCBJRFxuICAgICAgICBpZDogY21kICsgRGF0ZS5ub3coKSxcbiAgICAgICAgZGF0YVxuICAgIH07XG59XG5cbi8vIEEgbWFwIG9mIHByb21pc2VzLCBpbmRleGVkIGJ5IG1lc3NhZ2UgSURcbmNvbnN0IHByb21pc2VzID0gbmV3IE1hcDxzdHJpbmcsIFsoZGF0YTogdW5rbm93bikgPT4gdm9pZCwgKGVycjogdW5rbm93bikgPT4gdm9pZF0+KCk7XG5cblV0aWwuY29uc29sZUxvZygnUmVnaXN0ZXJpbmcgV2ViSU8gZXZlbnQgbGlzdGVuZXIgZm9yIEdvJyk7XG53b3JrZXIuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGUgPT4ge1xuICAgIGlmIChlLmRhdGEpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2U6IFJlc3BvbnNlTWVzc2FnZTx1bmtub3duPiA9IGUuZGF0YTtcbiAgICAgICAgY29uc3QgW3Jlc29sdmUsIHJlamVjdF0gPSBwcm9taXNlcy5nZXQocmVzcG9uc2UuaWQpO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFV0aWwuY29uc29sZUxvZygnRXJyb3IgcmVzcG9uc2UgZm9yIFxcJycgKyByZXNwb25zZS5jbWQgKyAnXFwnOiAnICsgcmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICByZWplY3QocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLy8gV2hldGhlciB0aGUgd29ya2VyIGhhcyBiZWVuIGNvbm5lY3RlZFxuZXhwb3J0IGxldCB3b3JrZXJDb25uZWN0ZWQgPSBmYWxzZTtcblxuLy8gTWVzc2FnZXMgdGhhdCBoYXZlIGJlZW4gcG9zdGVkIHdoaWxlIHRoZSB3b3JrZXIgaXMgYmVpbmcgY3JlYXRlZFxuY29uc3QgcXVldWVkTWVzc2FnZXM6IEFycmF5PE1lc3NhZ2U8dW5rbm93bj4+ID0gW107XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3N0TWVzc2FnZTxULCBSPihjbWQ6IHN0cmluZywgZGF0YT86IFQsIG5vUXVldWU/OiBib29sZWFuKTogUHJvbWlzZTxSPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgbXNnID0gbmV3TWVzc2FnZShjbWQsIGRhdGEpO1xuICAgICAgICAvLyBBZGQgdGhlIHByb21pc2VcbiAgICAgICAgcHJvbWlzZXMuc2V0KG1zZy5pZCwgW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgICBpZiAoIW5vUXVldWUgJiYgIXdvcmtlckNvbm5lY3RlZCkge1xuICAgICAgICAgICAgVXRpbC5jb25zb2xlTG9nKGNtZCArICcgbWVzc2FnZSByZWNlaXZlZCwgYnV0IHdvcmtlciBoYXNuXFwndCBjb25uZWN0ZWQgeWV0LiBBZGRpbmcgdG8gcXVldWUnKTtcbiAgICAgICAgICAgIHF1ZXVlZE1lc3NhZ2VzLnB1c2gobXNnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbmRQaW5nKHRpbWVvdXQ6IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHBpbmdQcm9taXNlID0gcG9zdE1lc3NhZ2UoJ3BpbmcnLCBudWxsLCB0cnVlKTtcbiAgICBjb25zdCB0aW1lb3V0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiBzZXRUaW1lb3V0KHIsIHRpbWVvdXQpKTtcblxuICAgIHRyeSB7XG4gICAgICAgIC8vIEF3YWl0IHRoZSBwaW5nLCBhbmQgaWYgaXQgc3VjY2VlZHNcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5yYWNlKFtwaW5nUHJvbWlzZSwgdGltZW91dFByb21pc2VdKTtcbiAgICAgICAgLy8gU2V0IHRoZSB3b3JrZXIgYXMgY29ubmVjdGVkXG4gICAgICAgIHdvcmtlckNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIC8vIFBvc3QgdGhlIHF1ZXVlZCBtZXNzYWdlcyB0byB0aGUgd29ya2VyXG4gICAgICAgIHF1ZXVlZE1lc3NhZ2VzLmZvckVhY2goKG1zZykgPT4ge1xuICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBDbGVhciB0aGUgcXVldWVcbiAgICAgICAgcXVldWVkTWVzc2FnZXMubGVuZ3RoID0gMDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgLy8gSWYgdGhlIHRpbWVvdXQgcHJvbWlzZSByZXNvbHZlZCBmaXJzdFxuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuY29uc3QgTUFYX1BJTkdTID0gNTtcblxuYXN5bmMgZnVuY3Rpb24gc2VuZFBpbmdVbnRpbENvbm5lY3QoKSB7XG4gICAgbGV0IHBpbmdzID0gMDtcbiAgICBsZXQgdGltZW91dCA9IDEwMDtcbiAgICB3aGlsZSAoIXdvcmtlckNvbm5lY3RlZCAmJiBwaW5ncyA8IE1BWF9QSU5HUykge1xuICAgICAgICBVdGlsLmNvbnNvbGVMb2coJ1NlbmRpbmcgcGluZyB3aXRoIHRpbWVvdXQgJyArIHRpbWVvdXQgKyAnbXMnKTtcbiAgICAgICAgcGluZ3MrKztcbiAgICAgICAgaWYgKCFhd2FpdCBzZW5kUGluZyh0aW1lb3V0KSkge1xuICAgICAgICAgICAgdGltZW91dCA9IHRpbWVvdXQgKiAyO1xuICAgICAgICAgICAgVXRpbC5jb25zb2xlTG9nKCdQaW5nIHRpbWVvdXQgcmVhY2hlZCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBpbmdzID49IE1BWF9QSU5HUykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01heCBwaW5ncyAnICsgTUFYX1BJTkdTICsgJyByZWFjaGVkLCBhc3N1bWluZyBXQVNNIG1vZHVsZSBpcyBub3QgZnVuY3Rpb25hbCcpO1xuICAgIH1cbn1cbnNlbmRQaW5nVW50aWxDb25uZWN0KCkudGhlbigoKSA9PiB7XG4gICAgVXRpbC5jb25zb2xlTG9nKCdSZXNwb25zZSB0byBwaW5nIHJlY2VpdmVkLCB3b3JrZXIgY29ubmVjdGVkJyk7XG59KTsiLCJpbXBvcnQge3Bvc3RNZXNzYWdlfSBmcm9tICcuL3dvcmtlci1oZWxwZXInO1xuXG5pbXBvcnQge1BvcywgUmVjdH0gZnJvbSAnLi4vY29tbW9uJztcblxuZXhwb3J0IHR5cGUgSW5pdFJlcXVlc3REYXRhID0ge1xuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgbWluZXM6IG51bWJlclxufSB8IHtcbiAgICBtaW5lRGVuc2l0eTogbnVtYmVyXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KGRhdGE6IEluaXRSZXF1ZXN0RGF0YSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBwb3N0TWVzc2FnZSgnaW5pdCcsIGRhdGEpO1xufVxuXG5leHBvcnQgdHlwZSBBcHBlYXJhbmNlUmVxdWVzdERhdGEgPSBSZWN0XG5cbmV4cG9ydCB0eXBlIEFwcGVhcmFuY2VSZXNwb25zZURhdGEgPSBBcnJheTxBcnJheTxzdHJpbmc+PlxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZWFyYW5jZShkYXRhOiBBcHBlYXJhbmNlUmVxdWVzdERhdGEpOiBQcm9taXNlPEFwcGVhcmFuY2VSZXNwb25zZURhdGE+IHtcbiAgICByZXR1cm4gcG9zdE1lc3NhZ2UoJ2FwcGVhcmFuY2UnLCBkYXRhKTtcbn1cblxuZXhwb3J0IHR5cGUgVW5jb3ZlclJlcXVlc3REYXRhID0gUG9zXG5cbmV4cG9ydCB0eXBlIFVuY292ZXJSZXNwb25zZURhdGEgPSB7XG4gICAgc3RhdGU6IHN0cmluZyxcbiAgICB0aW1lcjogbnVtYmVyXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bmNvdmVyKGRhdGE6IFVuY292ZXJSZXF1ZXN0RGF0YSk6IFByb21pc2U8VW5jb3ZlclJlc3BvbnNlRGF0YT4ge1xuICAgIHJldHVybiBwb3N0TWVzc2FnZSgndW5jb3ZlcicsIGRhdGEpO1xufVxuXG5leHBvcnQgdHlwZSBGbGFnUmVxdWVzdERhdGEgPSBQb3NcblxuZXhwb3J0IGZ1bmN0aW9uIGZsYWcoZGF0YTogRmxhZ1JlcXVlc3REYXRhKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHBvc3RNZXNzYWdlKCdmbGFnJywgZGF0YSk7XG59XG4iLCJpbXBvcnQge2NhbnZhcywgZHJhd1Nwcml0ZX0gZnJvbSAnLi4vZHJhdyc7XG5pbXBvcnQgRXZlbnRNYW5hZ2VyIGZyb20gJy4uL2V2ZW50LW1hbmFnZXInO1xuXG5pbXBvcnQge1BvcywgUmVjdH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7Y2xvbmVPYmp9IGZyb20gJy4uL3V0aWwnO1xuXG5leHBvcnQgdHlwZSBIaXRib3ggPSBSZWN0XG5cbmV4cG9ydCB0eXBlIEVsZW1lbnQgPSB7XG4gICAgaWQ6IHN0cmluZ1xuICAgIHNwcml0ZTogUmVjdCxcbiAgICBob3ZlcmVkU3ByaXRlPzogUG9zLFxuICAgIHNjYWxlOiBudW1iZXIsXG4gICAgaW50ZXJhY3RhYmxlPzogYm9vbGVhblxufVxuXG5jb25zdCBiaWdnZXN0RWxlbWVudEJ5RmllbGQgPSAoZWxlbWVudHM6IEFycmF5PEVsZW1lbnQ+LCBmaWVsZDogc3RyaW5nKSA9PlxuICAgIGVsZW1lbnRzLnJlZHVjZSgocHJldiwgY3VycikgPT5cbiAgICAgICAgcHJldi5zcHJpdGVbZmllbGRdICogcHJldi5zY2FsZSA+IGN1cnIuc3ByaXRlW2ZpZWxkXSAqIGN1cnIuc2NhbGUgPyBwcmV2IDogY3Vycik7XG5cbmZ1bmN0aW9uIGdldEFic1Bvcyh4LCB5OiBudW1iZXIpIHtcbiAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiBbTWF0aC5yb3VuZCh4IC0gcmVjdC5sZWZ0KSwgTWF0aC5yb3VuZCh5IC0gcmVjdC50b3ApXTtcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0KHgsIHk6IG51bWJlciwgaGl0Ym94OiBIaXRib3gpIHtcbiAgICByZXR1cm4geCA+IGhpdGJveC54ICYmIHkgPiBoaXRib3gueSAmJlxuICAgICAgICB4IDwgaGl0Ym94LnggKyBoaXRib3gudyAmJiB5IDwgaGl0Ym94LnkgKyBoaXRib3guaDtcbn1cblxuZXhwb3J0IHR5cGUgRWxlbWVudFByZXNzRXZlbnQgPSB7XG4gICAgcHJlc3NlZEVsZW1lbnQ6IHN0cmluZ1xufVxuXG5leHBvcnQgdHlwZSBFbGVtZW50SG92ZXJlZEV2ZW50ID0ge1xuICAgIGhvdmVyZWRFbGVtZW50OiBzdHJpbmcgfCBudWxsXG59XG5cbmludGVyZmFjZSBNZW51RXZlbnRNYXAge1xuICAgICdwcmVzcyc6IEVsZW1lbnRQcmVzc0V2ZW50XG4gICAgJ2hvdmVyJzogRWxlbWVudEhvdmVyZWRFdmVudFxufVxuXG4vLyBDbGFzcyBmb3IgYSB2ZXJ5IHNpbXBsZSBtZW51LCB3aGVyZSBlYWNoIFwiZWxlbWVudFwiIGlzIGRyYXduIHRvcCBkb3duLCBlcXVhbGx5IHNwYWNlZFxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVudSBleHRlbmRzIEV2ZW50TWFuYWdlcjxNZW51RXZlbnRNYXA+IHtcbiAgICBwcml2YXRlIGVsZW1lbnRzOiBBcnJheTxFbGVtZW50PjtcbiAgICBwcml2YXRlIHRhbGxlc3RFbGVtZW50OiBFbGVtZW50O1xuICAgIHByaXZhdGUgbG9uZ2VzdEVsZW1lbnQ6IEVsZW1lbnQ7XG5cbiAgICBwcm90ZWN0ZWQgZWxlbWVudEhpdGJveGVzOiBNYXA8c3RyaW5nLCBIaXRib3g+O1xuICAgIHByb3RlY3RlZCBob3ZlcmVkRWxlbWVudDogc3RyaW5nIHwgbnVsbDtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlUG9pbnRlck1vdmU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVQb2ludGVyRG93bjtcblxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRzOiBBcnJheTxFbGVtZW50Pikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gICAgICAgIHRoaXMudGFsbGVzdEVsZW1lbnQgPSBiaWdnZXN0RWxlbWVudEJ5RmllbGQoZWxlbWVudHMsICdoJyk7XG4gICAgICAgIHRoaXMubG9uZ2VzdEVsZW1lbnQgPSBiaWdnZXN0RWxlbWVudEJ5RmllbGQoZWxlbWVudHMsICd3Jyk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50SGl0Ym94ZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuaG92ZXJlZEVsZW1lbnQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUgPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBhYnNvbHV0ZSBYIGFuZCBZIG9mIHRoZSBidXR0b24gcHJlc3NcbiAgICAgICAgICAgIGNvbnN0IFt4LCB5XSA9IGdldEFic1BvcyhldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgbWVudSBlbGVtZW50c1xuICAgICAgICAgICAgZm9yIChjb25zdCBbZWxlbWVudCwgaGl0Ym94XSBvZiB0aGlzLmVsZW1lbnRIaXRib3hlcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcG9pbnRlciBpbnRlcnNlY3RlZCB0aGUgbWVudSBpdGVtXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdCh4LCB5LCBoaXRib3gpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgbmV3bHkgaG92ZXJlZFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ob3ZlcmVkRWxlbWVudCAhPT0gZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvdmVyZWRFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbEV2ZW50TGlzdGVuZXJzKCdob3ZlcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3ZlcmVkRWxlbWVudDogZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIGFuIGVsZW1lbnQgaXMgYmVpbmcgaG92ZXJlZCBvdmVyIChidXQgbm90IGFueW1vcmUpXG4gICAgICAgICAgICBpZiAodGhpcy5ob3ZlcmVkRWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBob3ZlcmVkIGVsZW1lbnRcbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVyZWRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxFdmVudExpc3RlbmVycygnaG92ZXInLCB7XG4gICAgICAgICAgICAgICAgICAgIGhvdmVyZWRFbGVtZW50OiBudWxsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyRG93biA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGFic29sdXRlIFggYW5kIFkgb2YgdGhlIGJ1dHRvbiBwcmVzc1xuICAgICAgICAgICAgY29uc3QgW3gsIHldID0gZ2V0QWJzUG9zKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICAgICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBtZW51IGVsZW1lbnRzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtlbGVtZW50LCBoaXRib3hdIG9mIHRoaXMuZWxlbWVudEhpdGJveGVzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBwb2ludGVyIGludGVyc2VjdGVkIHRoZSBtZW51IGl0ZW1cbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0KHgsIHksIGhpdGJveCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ3ByZXNzJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc3NlZEVsZW1lbnQ6IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50cygpO1xuICAgIH1cblxuICAgIGFzeW5jIGRyYXcoYm91bmRzPzogUmVjdCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBJZiB0aGUgYm91bmRzIHdlcmVuJ3QgZ2l2ZW5cbiAgICAgICAgaWYgKCFib3VuZHMpIHtcbiAgICAgICAgICAgIC8vIFdlIGFzc3VtZSB0aGUgYm91bmRzIGFyZSB0aGUgd2hvbGUgY2FudmFzXG4gICAgICAgICAgICBib3VuZHMgPSB7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgIHc6IGNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgICAgICBoOiBjYW52YXMuaGVpZ2h0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcnN0LCBzY2FsZSBzbyB0aGUgZWxlbWVudHMgYXJlIGV2ZW5seSBzcGFjZWQgYnkgaGVpZ2h0XG4gICAgICAgIGxldCBzY2FsZSA9IChib3VuZHMuaCAqICgwLjUgLyB0aGlzLmVsZW1lbnRzLmxlbmd0aCkpIC9cbiAgICAgICAgICAgICh0aGlzLnRhbGxlc3RFbGVtZW50LnNwcml0ZS5oICogdGhpcy50YWxsZXN0RWxlbWVudC5zY2FsZSk7XG5cbiAgICAgICAgLy8gSWYgdGhlIGxvbmdlc3QgZWxlbWVudCB3b3VsZCBiZSB0b28gbG9uZ1xuICAgICAgICBpZiAoc2NhbGUgKiB0aGlzLmxvbmdlc3RFbGVtZW50LnNwcml0ZS53ICogdGhpcy5sb25nZXN0RWxlbWVudC5zY2FsZSA+PSBib3VuZHMudyAqIDAuOSkge1xuICAgICAgICAgICAgLy8gU2NhbGUgc28gdGhlIGxvbmdlc3QgZWxlbWVudCBpcyA5MCUgdGhlIHdpZHRoIG9mIHRoZSBjYW52YXNcbiAgICAgICAgICAgIHNjYWxlID0gKGJvdW5kcy53ICogMC45KSAvICh0aGlzLmxvbmdlc3RFbGVtZW50LnNwcml0ZS53ICogdGhpcy5sb25nZXN0RWxlbWVudC5zY2FsZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBsZXQgeSA9IGJvdW5kcy55ICsgKHRoaXMudGFsbGVzdEVsZW1lbnQuc3ByaXRlLmggKiBzY2FsZSAqIDAuNSk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0dWFsV2lkdGggPSBlbGVtZW50LnNwcml0ZS53ICogZWxlbWVudC5zY2FsZSAqIHNjYWxlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbEhlaWdodCA9IGVsZW1lbnQuc3ByaXRlLmggKiBlbGVtZW50LnNjYWxlICogc2NhbGU7XG5cbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGVsZW1lbnQncyBoaXRib3hcbiAgICAgICAgICAgICAgICBjb25zdCBoaXRib3g6IEhpdGJveCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQncyBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICB4OiBib3VuZHMueCArICgoYm91bmRzLncgLyAyKSAtIChhY3R1YWxXaWR0aCAvIDIpKSwgeTogeSxcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQncyBzaXplXG4gICAgICAgICAgICAgICAgICAgIHc6IGFjdHVhbFdpZHRoLCBoOiBhY3R1YWxIZWlnaHQsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmludGVyYWN0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGVsZW1lbnQncyBoaXRib3ggdG8gdGhlIG1hcFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRIaXRib3hlcy5zZXQoZWxlbWVudC5pZCwgaGl0Ym94KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzcHJpdGUgPSBjbG9uZU9iaihlbGVtZW50LnNwcml0ZSk7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBlbGVtZW50IGlzIGJlaW5nIGhvdmVyZWQgb3ZlciAoYW5kIGhhcyBhIHNwcml0ZSlcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pZCA9PT0gdGhpcy5ob3ZlcmVkRWxlbWVudCAmJiAnaG92ZXJlZFNwcml0ZScgaW4gZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSdyZSBhc3N1bWluZyB0aGUgaG92ZXJlZCBzcHJpdGUgaXMgdGhlIHNhbWUgc2l6ZSBoZXJlXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZS54ID0gZWxlbWVudC5ob3ZlcmVkU3ByaXRlLng7XG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZS55ID0gZWxlbWVudC5ob3ZlcmVkU3ByaXRlLnk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRHJhdyB0aGUgZWxlbWVudFxuICAgICAgICAgICAgICAgIGRyYXdTcHJpdGUoc3ByaXRlLCBoaXRib3gpO1xuXG4gICAgICAgICAgICAgICAgLy8gTW92ZSB0aGUgeSBkb3duXG4gICAgICAgICAgICAgICAgeSArPSBhY3R1YWxIZWlnaHQgKiAxLjU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLmhhbmRsZVBvaW50ZXJEb3duKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVyZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgIH1cbn0iLCJleHBvcnQgdHlwZSBQb3MgPSB7XG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBTaXplID0ge1xuICAgIHc6IG51bWJlcixcbiAgICBoOiBudW1iZXJcbn1cblxuZXhwb3J0IHR5cGUgUmVjdCA9IFBvcyAmIFNpemVcblxuZXhwb3J0IGNvbnN0IHBvcyA9IChyOiBSZWN0KTogUG9zID0+ICh7eDogci54LCB5OiByLnl9KTtcblxuZXhwb3J0IGNvbnN0IHJlY3QgPSAocDogUG9zLCBzOiBTaXplKTogUmVjdCA9PiAoe3g6IHAueCwgeTogcC55LCB3OiBzLncsIGg6IHMuaH0pOyIsImltcG9ydCBNZW51LCB7RWxlbWVudH0gZnJvbSAnLi9tZW51JztcbmltcG9ydCB7U1BSSVRFUywgY2FudmFzLCBjdHgsIGRyYXdTcHJpdGV9IGZyb20gJy4uL2RyYXcnO1xuXG5pbXBvcnQge1JlY3QsIHBvc30gZnJvbSAnLi4vY29tbW9uJztcblxuLy8gVEhlIGJhY2tncm91bmQgb2YgdGhlIG1vZGFsIGlzIG1hZGUgdXAgb2YgYSBncmlkIG9mIDEyeDEyIHRpbGVzXG5jb25zdCBNT0RBTF9HUklEX1NJWkUgPSAxMDtcblxuZXhwb3J0IGNvbnN0IENMT1NFX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21vZGFsLmNsb3NlX2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLlRJTEVTLkNMT1NFLFxuICAgIHNjYWxlOiAxXG59O1xuXG5leHBvcnQgY29uc3QgQkFDS19CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtb2RhbC5iYWNrX2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1PREFMLkJBQ0ssXG4gICAgaG92ZXJlZFNwcml0ZTogcG9zKFNQUklURVMuTU9EQUwuQkFDS19IT1ZFUkVEKSxcbiAgICBzY2FsZTogMS4yNSxcbiAgICBpbnRlcmFjdGFibGU6IHRydWVcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsIGV4dGVuZHMgTWVudSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudHM6IEFycmF5PEVsZW1lbnQ+KSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRzKTtcbiAgICB9XG5cbiAgICBhc3luYyBkcmF3KCkge1xuICAgICAgICAvLyBEcmF3IHRoZSBiYWNrZ3JvdW5kIGluIGEgcHJvbWlzZVxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZTxSZWN0PihyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIC8vIFRoZSBjYW52YXMgd2lkdGggYW5kIGhlaWdodFxuICAgICAgICAgICAgY29uc3QgdyA9IGNhbnZhcy53aWR0aCwgaCA9IGNhbnZhcy5oZWlnaHQ7XG5cbiAgICAgICAgICAgIC8vIERhcmtlbiB0aGUgZmllbGRcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjQpJztcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCB3LCBoKTtcblxuICAgICAgICAgICAgLy8gVGhlIG1vZGFsIGlzIDgwJSB0aGUgaGVpZ2h0IG9mIHRoZSBjYW52YXMgaWYgbGFuZHNjYXBlLCBvciA4MCUgdGhlIHdpZHRoIGlmIHBvcnRyYWl0XG4gICAgICAgICAgICBjb25zdCBtb2RhbFNpemUgPSB3ID4gaCA/IGggKiAwLjggOiB3ICogMC44O1xuXG4gICAgICAgICAgICBjb25zdCBtb2RhbFggPSAodyAvIDIpIC0gKG1vZGFsU2l6ZSAvIDIpO1xuICAgICAgICAgICAgY29uc3QgbW9kYWxZID0gKGggLyAyKSAtIChtb2RhbFNpemUgLyAyKTtcblxuICAgICAgICAgICAgLy8gVGhlIGJhY2tncm91bmQgaXMgbWFkZSB1cCBvZiBhIGdyaWQgb2YgMTJ4MTIgdGlsZXNcbiAgICAgICAgICAgIGNvbnN0IHRpbGVTaXplID0gbW9kYWxTaXplIC8gTU9EQUxfR1JJRF9TSVpFO1xuXG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IE1PREFMX0dSSURfU0laRTsgeSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBNT0RBTF9HUklEX1NJWkU7IHgrKykge1xuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHRpbGUncyBoaXRib3hcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGl0Ym94OiBSZWN0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogbW9kYWxYICsgKHggKiB0aWxlU2l6ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBtb2RhbFkgKyAoeSAqIHRpbGVTaXplKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHc6IHRpbGVTaXplLCBoOiB0aWxlU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyB0b2RvIGRyYXcgdGhlIGJhY2tncm91bmQgcHJvcGVybHlcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNwcml0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBpY2sgdGhlIGNlbnRlciBwaXhlbFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogU1BSSVRFUy5USUxFUy5FTVBUWS53IC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IFNQUklURVMuVElMRVMuRU1QVFkuaCAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICB3OiAxLCBoOiAxXG4gICAgICAgICAgICAgICAgICAgIH0gYXMgUmVjdDtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHRpbGUgc2hvdWxkIGJlIGEgY29ybmVyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4ID09PSAwIHx8IHggPT09IE1PREFMX0dSSURfU0laRSAtIDEgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPT09IDAgfHwgeSA9PT0gTU9EQUxfR1JJRF9TSVpFIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHRpbGUgaXMgaW4gdGhlIHVwcGVyIHJpZ2h0IGNvcm5lclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggPT09IE1PREFMX0dSSURfU0laRSAtIDEgJiYgeSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IGlzIHRoZSBjbG9zZSBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUgPSBDTE9TRV9CVVRUT04uc3ByaXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgaGl0Ym94IHRvIHRoZSBtZW51XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50SGl0Ym94ZXMuc2V0KENMT1NFX0JVVFRPTi5pZCwgaGl0Ym94KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUgPSBTUFJJVEVTLlRJTEVTLkhJRERFTjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRyYXdTcHJpdGUoc3ByaXRlLCBoaXRib3gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVzb2x2ZSB0aGUgcHJvbWlzZSB3aXRoIHRoZSBtb2RhbCdzIGlubmVyIGJvdW5kcywgZm9yIGRyYXdpbmcgdGhlIG1lbnVcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIHg6IG1vZGFsWCArIHRpbGVTaXplLFxuICAgICAgICAgICAgICAgIHk6IG1vZGFsWSArIHRpbGVTaXplLFxuICAgICAgICAgICAgICAgIHc6IG1vZGFsU2l6ZSAtICh0aWxlU2l6ZSAqIDIpLFxuICAgICAgICAgICAgICAgIGg6IG1vZGFsU2l6ZSAtICh0aWxlU2l6ZSAqIDIpLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFRoZW4sIGRyYXcgdGhlIG1lbnUgb3ZlciBpdFxuICAgICAgICB9KS50aGVuKGlubmVyTW9kYWxCb3VuZHMgPT4gc3VwZXIuZHJhdyhpbm5lck1vZGFsQm91bmRzKSk7XG4gICAgfVxufSIsImltcG9ydCBNb2RhbCwge0JBQ0tfQlVUVE9OfSBmcm9tICcuL21vZGFsJztcbmltcG9ydCB7RWxlbWVudH0gZnJvbSAnLi9tZW51JztcbmltcG9ydCB7U1BSSVRFU30gZnJvbSAnLi4vZHJhdyc7XG5cbmltcG9ydCB7cG9zfSBmcm9tICcuLi9jb21tb24nO1xuXG5leHBvcnQgY29uc3QgVElUTEU6IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtb2RhbC5yZXRyeS50aXRsZScsXG4gICAgc3ByaXRlOiBTUFJJVEVTLlJFVFJZX01PREFMLlRJVExFLFxuICAgIHNjYWxlOiAxLFxufTtcblxuZXhwb3J0IGNvbnN0IFJFVFJZX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21vZGFsLnJldHJ5LnJldHJ5X2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLlJFVFJZX01PREFMLlJFVFJZLFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLlJFVFJZX01PREFMLlJFVFJZX0hPVkVSRUQpLFxuICAgIHNjYWxlOiAxLjI1LFxuICAgIGludGVyYWN0YWJsZTogdHJ1ZVxufTtcblxuLy8gVGhlIGVsZW1lbnRzLCBpbiBvcmRlciBvZiBob3cgdGhleSdyZSBkaXNwbGF5ZWQgb24gc2NyZWVuICh0b3AgZG93bilcbmNvbnN0IEVMRU1FTlRTOiBBcnJheTxFbGVtZW50PiA9IFtUSVRMRSwgUkVUUllfQlVUVE9OLCBCQUNLX0JVVFRPTl07XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGFsLmJpbmQoTW9kYWwsIEVMRU1FTlRTKTsiLCJpbXBvcnQgTW9kYWwsIHtCQUNLX0JVVFRPTn0gZnJvbSAnLi9tb2RhbCc7XG5pbXBvcnQge0VsZW1lbnR9IGZyb20gJy4vbWVudSc7XG5pbXBvcnQge1NQUklURVN9IGZyb20gJy4uL2RyYXcnO1xuXG5pbXBvcnQge3Bvc30gZnJvbSAnLi4vY29tbW9uJztcblxuZXhwb3J0IGNvbnN0IFRJVExFOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbW9kYWwuc3VjY2Vzcy50aXRsZScsXG4gICAgc3ByaXRlOiBTUFJJVEVTLlNVQ0NFU1NfTU9EQUwuVElUTEUsXG4gICAgc2NhbGU6IDEsXG59O1xuXG5leHBvcnQgY29uc3QgUkVTRVRfQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbW9kYWwuc3VjY2Vzcy5yZXNldF9idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5TVUNDRVNTX01PREFMLlJFU0VULFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLlNVQ0NFU1NfTU9EQUwuUkVTRVRfSE9WRVJFRCksXG4gICAgc2NhbGU6IDEuMjUsXG4gICAgaW50ZXJhY3RhYmxlOiB0cnVlXG59O1xuXG4vLyBUaGUgZWxlbWVudHMsIGluIG9yZGVyIG9mIGhvdyB0aGV5J3JlIGRpc3BsYXllZCBvbiBzY3JlZW4gKHRvcCBkb3duKVxuY29uc3QgRUxFTUVOVFM6IEFycmF5PEVsZW1lbnQ+ID0gW1RJVExFLCBSRVNFVF9CVVRUT04sIEJBQ0tfQlVUVE9OXTtcblxuZXhwb3J0IGRlZmF1bHQgTW9kYWwuYmluZChNb2RhbCwgRUxFTUVOVFMpOyIsImltcG9ydCBDYW1lcmEsIHtQcmVzc0V2ZW50fSBmcm9tICcuL2NhbWVyYSc7XG5pbXBvcnQge2NhbnZhc30gZnJvbSAnLi4vZHJhdyc7XG5cbmltcG9ydCAqIGFzIGdvaW8gZnJvbSAnLi4vZ29pby9nb2lvJztcblxuaW1wb3J0IE1vZGFsLCB7QkFDS19CVVRUT04sIENMT1NFX0JVVFRPTn0gZnJvbSAnLi4vbWVudS9tb2RhbCc7XG5pbXBvcnQgUmV0cnlNb2RhbCwge1JFVFJZX0JVVFRPTn0gZnJvbSAnLi4vbWVudS9yZXRyeS1tb2RhbCc7XG5pbXBvcnQgU3VjY2Vzc01vZGFsLCB7UkVTRVRfQlVUVE9OfSBmcm9tICcuLi9tZW51L3N1Y2Nlc3MtbW9kYWwnO1xuaW1wb3J0IHtFbGVtZW50UHJlc3NFdmVudH0gZnJvbSAnLi4vbWVudS9tZW51JztcblxuaW1wb3J0IHtjb25zb2xlTG9nLCBsaW1pdGVyfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7U2l6ZX0gZnJvbSAnLi4vY29tbW9uJztcblxuLy8gQ29uc3RhbnRzIGZvciB0aGUgZ2FtZSBzdGF0ZXNcbmNvbnN0IEdBTUVfU1RBVEVTID0ge1xuICAgIFNUQVJUOiAnc3RhcnQnLFxuICAgIFBMQVlJTkc6ICdwbGF5aW5nJyxcbiAgICBXSU46ICd3aW4nLFxuICAgIExPU1M6ICdsb3NzJ1xufTtcblxuY2xhc3MgTW9kYWxDb250YWluZXIge1xuICAgIHByaXZhdGUgbW9kYWw6IE1vZGFsIHwgbnVsbDtcbiAgICAjaGlkZGVuOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubW9kYWwgPSBudWxsO1xuICAgICAgICB0aGlzLiNoaWRkZW4gPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBvcGVuKG1vZGFsOiBNb2RhbCkge1xuICAgICAgICB0aGlzLm1vZGFsID0gbW9kYWw7XG4gICAgICAgIHRoaXMuI2hpZGRlbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbG9zZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vZGFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1vZGFsIHRvIGNsb3NlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIHRoaXMubW9kYWwgPSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaGlkZGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jaGlkZGVuO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRlKCkge1xuICAgICAgICBpZiAoIXRoaXMubW9kYWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbW9kYWwgdG8gaGlkZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kYWwuZGVyZWdpc3RlckV2ZW50cygpO1xuICAgICAgICB0aGlzLiNoaWRkZW4gPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXZlYWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5tb2RhbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtb2RhbCB0byByZXZlYWwnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGFsLnJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgIHRoaXMuI2hpZGRlbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBkcmF3KCkge1xuICAgICAgICBpZiAoIXRoaXMuI2hpZGRlbikge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5tb2RhbC5kcmF3KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZGVyZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5tb2RhbD8uZGVyZWdpc3RlckV2ZW50cygpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZTogRXZlbnQpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmV4cG9ydCB0eXBlIEZpbml0ZUdhbWVQcm9wcyA9IFNpemUgJiB7XG4gICAgbnVtTWluZXM6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBJbmZpbml0ZUdhbWVQcm9wcyA9IHtcbiAgICBtaW5lRGVuc2l0eTogbnVtYmVyXG59XG5cbmV4cG9ydCB0eXBlIEdhbWVQcm9wcyA9IChGaW5pdGVHYW1lUHJvcHMgfCBJbmZpbml0ZUdhbWVQcm9wcykgJiB7XG4gICAgaGFuZGxlQmFjazogKCkgPT4gdm9pZFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBHYW1lUHJvcHM7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGNhbWVyYTogQ2FtZXJhO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbW9kYWw6IE1vZGFsQ29udGFpbmVyO1xuXG4gICAgLy8gVGhlIGRyYXcgZnVuY3Rpb24gd2l0aCBhIGxpbWl0ZXIsIHRvIHByZXZlbnQgZmxpY2tlcmluZyB3aGVuIHJlc2l6aW5nXG4gICAgcHJpdmF0ZSByZWFkb25seSBkcmF3V2l0aExpbWl0OiAoKSA9PiB2b2lkO1xuICAgIC8vIFRoZSBsYXN0IHRpbWUgYSBkcmF3IHdhcyBkb25lLCB0byBwcmV2ZW50IHRoZSBkcmF3IG1ldGhvZCBmcm9tIHNwYW1taW5nIHRoZSBiYWNrZW5kXG4gICAgLy8gdG9kbyB0aGlzIGlzbid0IGEgcGVyZmVjdCBzb2x1dGlvbiwgaWYgeW91IHNjcm9sbCBmYXN0IGVub3VnaFxuICAgIC8vICB5b3UgY2FuIHN0aWxsIHNlZSB0aGUgdGlsZXMgbG9hZCBpbi4gQSBiZXR0ZXIgc29sdXRpb24gbWlnaHQgYmUgdG9cbiAgICAvLyAgbG9hZCBhIGxvdCBtb3JlIHRoYW4gbmVjZXNzYXJ5LCBjYWNoZSBpdCwgYW5kIHRoZW4gbG9hZCBtb3JlIG9uY2UgdGhlXG4gICAgLy8gIGNhbWVyYSBpcyBuZWFyKGlzaCkgdG8gdGhlIGVkZ2VcbiAgICBwcml2YXRlIGxhc3REcmF3VGltZXN0YW1wOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIGdhbWVPdmVyOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IEdhbWVQcm9wcykge1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG5cbiAgICAgICAgaWYgKCd3JyBpbiB0aGlzLnByb3BzICYmICdoJyBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYSA9IG5ldyBDYW1lcmEoe3c6IHRoaXMucHJvcHMudywgaDogdGhpcy5wcm9wcy5ofSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYSA9IG5ldyBDYW1lcmEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FtZXJhLmFkZEV2ZW50TGlzdGVuZXIoJ3ByZXNzJywgdGhpcy5oYW5kbGVQcmVzcy5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5jYW1lcmEuYWRkRXZlbnRMaXN0ZW5lcignbG9uZ3ByZXNzJywgdGhpcy5oYW5kbGVMb25nUHJlc3MuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuY2FtZXJhLmFkZEV2ZW50TGlzdGVuZXIoJ21vdmUnLCB0aGlzLmRyYXcuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5tb2RhbCA9IG5ldyBNb2RhbENvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLmRyYXdXaXRoTGltaXQgPSBsaW1pdGVyKHRoaXMuZHJhdy5iaW5kKHRoaXMpLCAxMDApO1xuICAgICAgICB0aGlzLmxhc3REcmF3VGltZXN0YW1wID0gMDtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50cygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuY2FtZXJhLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZ2FtZU92ZXIgPSBmYWxzZTtcblxuICAgICAgICBsZXQgaW5pdGlhbGlzZVByb21pc2U7XG4gICAgICAgIC8vIEZpbml0ZSB0eXBlXG4gICAgICAgIGlmICgndycgaW4gdGhpcy5wcm9wcyAmJiAnaCcgaW4gdGhpcy5wcm9wcyAmJiAnbnVtTWluZXMnIGluIHRoaXMucHJvcHMpIHtcbiAgICAgICAgICAgIGluaXRpYWxpc2VQcm9taXNlID0gZ29pby5pbml0KHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5wcm9wcy53LFxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5wcm9wcy5oLFxuICAgICAgICAgICAgICAgIG1pbmVzOiB0aGlzLnByb3BzLm51bU1pbmVzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gSW5maW5pdGUgdHlwZVxuICAgICAgICB9IGVsc2UgaWYgKCdtaW5lRGVuc2l0eScgaW4gdGhpcy5wcm9wcykge1xuICAgICAgICAgICAgaW5pdGlhbGlzZVByb21pc2UgPSBnb2lvLmluaXQoe1xuICAgICAgICAgICAgICAgIG1pbmVEZW5zaXR5OiB0aGlzLnByb3BzLm1pbmVEZW5zaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBnYW1lIHByb3BzIHR5cGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9uY2UgaW5pdGlhbGlzZWQsIGRyYXcgaXRcbiAgICAgICAgaW5pdGlhbGlzZVByb21pc2UudGhlbih0aGlzLmRyYXcuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIC8vIE1heCBvZiA2MCBkcmF3cyBwZXIgc2Vjb25kXG4gICAgICAgIGlmIChub3cgLSB0aGlzLmxhc3REcmF3VGltZXN0YW1wID4gMTAwMCAvIDYwKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3REcmF3VGltZXN0YW1wID0gbm93O1xuICAgICAgICAgICAgLy8gUmVxdWVzdCB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgYm9hcmQgZnJvbSBHb1xuICAgICAgICAgICAgYXdhaXQgZ29pby5hcHBlYXJhbmNlKHRoaXMuY2FtZXJhLnZpc2libGVUaWxlcylcbiAgICAgICAgICAgICAgICAvLyBUaGVuIGRyYXcgaXRcbiAgICAgICAgICAgICAgICAudGhlbih0aGlzLmNhbWVyYS5kcmF3LmJpbmQodGhpcy5jYW1lcmEpKVxuICAgICAgICAgICAgICAgIC8vIFRoZW4gZHJhdyB0aGUgbW9kYWwgb3ZlciB0b3AgKGlmIGFjdGl2ZSlcbiAgICAgICAgICAgICAgICAudGhlbih0aGlzLm1vZGFsLmRyYXcuYmluZCh0aGlzLm1vZGFsKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmRyYXdXaXRoTGltaXQpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgIGlmICh0aGlzLm1vZGFsLmhpZGRlbikge1xuICAgICAgICAgICAgdGhpcy5jYW1lcmEucmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBkZXJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5kcmF3V2l0aExpbWl0KTtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgcHJldmVudERlZmF1bHQpO1xuICAgICAgICB0aGlzLmNhbWVyYS5kZXJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgIHRoaXMubW9kYWwuZGVyZWdpc3RlckV2ZW50cygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlU3RhdGUoc3RhdGVEYXRhOiBnb2lvLlVuY292ZXJSZXNwb25zZURhdGEpIHtcbiAgICAgICAgc3dpdGNoIChzdGF0ZURhdGEuc3RhdGUpIHtcbiAgICAgICAgY2FzZSBHQU1FX1NUQVRFUy5XSU46XG4gICAgICAgICAgICB0aGlzLmdhbWVPdmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnNvbGVMb2coJ1dpbiBkZXRlY3RlZCwgZGlzcGxheWluZyBzdWNjZXNzIG1vZGFsJyk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVuZEdhbWVNb2RhbChTdWNjZXNzTW9kYWwsIFJFU0VUX0JVVFRPTi5pZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBHQU1FX1NUQVRFUy5MT1NTOlxuICAgICAgICAgICAgdGhpcy5nYW1lT3ZlciA9IHRydWU7XG4gICAgICAgICAgICBjb25zb2xlTG9nKCdMb3NzIGRldGVjdGVkLCBkaXNwbGF5aW5nIHJldHJ5IG1vZGFsJyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuaGFuZGxlRW5kR2FtZU1vZGFsLmJpbmQodGhpcywgUmV0cnlNb2RhbCwgUkVUUllfQlVUVE9OLmlkKSxcbiAgICAgICAgICAgICAgICAvLyBEaXNwbGF5IGFmdGVyIDFzIHNvIHRoZSB1c2VyIGNhbiBzZWUgdGhlIGZpZWxkIGZvciBhIGJpdFxuICAgICAgICAgICAgICAgIDEwMDApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZUVuZEdhbWVNb2RhbChtb2RhbENvbnN0cnVjdG9yOiAoKSA9PiB2b2lkLCByZXNldEVsZW1lbnRJZDogc3RyaW5nKSB7XG4gICAgICAgIC8vIERpc3BsYXkgdGhlIG1vZGFsXG4gICAgICAgIGNvbnN0IG1vZGFsOiBNb2RhbCA9IG5ldyBtb2RhbENvbnN0cnVjdG9yKCk7XG4gICAgICAgIHRoaXMubW9kYWwub3Blbihtb2RhbCk7XG4gICAgICAgIC8vIEFkZCBzb21lIGNvbW1vbiBldmVudCBoYW5kbGVyc1xuICAgICAgICBtb2RhbC5hZGRFdmVudExpc3RlbmVyKCdob3ZlcicsIHRoaXMuZHJhdy5iaW5kKHRoaXMpKTtcbiAgICAgICAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcigncHJlc3MnLCAoZXZlbnQ6IEVsZW1lbnRQcmVzc0V2ZW50KSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnByZXNzZWRFbGVtZW50KSB7XG4gICAgICAgICAgICBjYXNlIENMT1NFX0JVVFRPTi5pZDpcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS5yZWdpc3RlckV2ZW50cygpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSByZXNldEVsZW1lbnRJZDpcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmEucmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEJBQ0tfQlVUVE9OLmlkOlxuICAgICAgICAgICAgICAgIHRoaXMuZGVyZWdpc3RlckV2ZW50cygpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlQmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhlIG1vZGFsIGlzIG9wZW4gc28gZG9uJ3QgYWxsb3cgdGhlIGNhbWVyYSB0byBtb3ZlXG4gICAgICAgIHRoaXMuY2FtZXJhLmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgLy8gRHJhdyB0aGUgbW9kYWxcbiAgICAgICAgYXdhaXQgdGhpcy5kcmF3KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVQcmVzcyhldmVudDogUHJlc3NFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuZ2FtZU92ZXIpIHtcbiAgICAgICAgICAgIC8vIExlZnQgbW91c2UgYnV0dG9uXG4gICAgICAgICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZ29pby51bmNvdmVyKGV2ZW50LnBvcylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgc3RhdGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVN0YXRlKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBSaWdodCBtb3VzZSBidXR0b25cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuYnV0dG9uID09PSAyKSB7XG4gICAgICAgICAgICAgICAgZ29pby5mbGFnKGV2ZW50LnBvcylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4odGhpcy5kcmF3LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZ2FtZSBpcyBvdmVyIGJ1dCB0aGUgbW9kYWwgaXMgaGlkZGVuXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5tb2RhbC5oaWRkZW4pIHtcbiAgICAgICAgICAgIC8vIFJlb3BlbiB0aGUgbW9kYWxcbiAgICAgICAgICAgIHRoaXMubW9kYWwucmV2ZWFsKCk7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5kZXJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlTG9uZ1ByZXNzKGV2ZW50OiBQcmVzc0V2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5nYW1lT3ZlciAmJiBldmVudC5idXR0b24gPT09IDApIHtcbiAgICAgICAgICAgIGdvaW8uZmxhZyhldmVudC5wb3MpLnRoZW4odGhpcy5kcmF3LmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCBNZW51LCB7RWxlbWVudH0gZnJvbSAnLi9tZW51JztcbmltcG9ydCB7U1BSSVRFUywgY2xlYXJ9IGZyb20gJy4uL2RyYXcnO1xuXG5pbXBvcnQge2xpbWl0ZXJ9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHtwb3N9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNvbnN0IFRJVExFOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbWVudS5tYWluLnRpdGxlJyxcbiAgICBzcHJpdGU6IFNQUklURVMuTUFJTl9NRU5VLlRJVExFLFxuICAgIHNjYWxlOiAxLFxufTtcblxuZXhwb3J0IGNvbnN0IEVBU1lfQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbWVudS5tYWluLmVhc3lfYnV0dG9uJyxcbiAgICBzcHJpdGU6IFNQUklURVMuTUFJTl9NRU5VLkVBU1ksXG4gICAgaG92ZXJlZFNwcml0ZTogcG9zKFNQUklURVMuTUFJTl9NRU5VLkVBU1lfSE9WRVJFRCksXG4gICAgc2NhbGU6IDEuMjUsXG4gICAgaW50ZXJhY3RhYmxlOiB0cnVlXG59O1xuXG5leHBvcnQgY29uc3QgTUVESVVNX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21lbnUubWFpbi5tZWRpdW1fYnV0dG9uJyxcbiAgICBzcHJpdGU6IFNQUklURVMuTUFJTl9NRU5VLk1FRElVTSxcbiAgICBob3ZlcmVkU3ByaXRlOiBwb3MoU1BSSVRFUy5NQUlOX01FTlUuTUVESVVNX0hPVkVSRUQpLFxuICAgIHNjYWxlOiAxLjI1LFxuICAgIGludGVyYWN0YWJsZTogdHJ1ZVxufTtcblxuZXhwb3J0IGNvbnN0IEhBUkRfQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbWVudS5tYWluLmhhcmRfYnV0dG9uJyxcbiAgICBzcHJpdGU6IFNQUklURVMuTUFJTl9NRU5VLkhBUkQsXG4gICAgaG92ZXJlZFNwcml0ZTogcG9zKFNQUklURVMuTUFJTl9NRU5VLkhBUkRfSE9WRVJFRCksXG4gICAgc2NhbGU6IDEuMjUsXG4gICAgaW50ZXJhY3RhYmxlOiB0cnVlXG59O1xuXG4vKiB0b2RvIGltcGxlbWVudCBjdXN0b20gZGlmZmljdWx0eVxuZXhwb3J0IGNvbnN0IENVU1RPTV9CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtZW51Lm1haW4uY3VzdG9tX2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1BSU5fTUVOVS5DVVNUT00sXG4gICAgaG92ZXJlZFNwcml0ZTogcG9zKFNQUklURVMuTUFJTl9NRU5VLkNVU1RPTV9IT1ZFUkVEKSxcbiAgICBzY2FsZTogMS4yNSxcbiAgICBpbnRlcmFjdGFibGU6IGZhbHNlXG59OyovXG5cbmV4cG9ydCBjb25zdCBJTkZJTklURV9CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtZW51Lm1haW4uaW5maW5pdGVfYnV0dG9uJyxcbiAgICBzcHJpdGU6IFNQUklURVMuTUFJTl9NRU5VLklORklOSVRFLFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLk1BSU5fTUVOVS5JTkZJTklURV9IT1ZFUkVEKSxcbiAgICBzY2FsZTogMS4yNSxcbiAgICBpbnRlcmFjdGFibGU6IHRydWVcbn07XG5cbi8vIFRoZSBlbGVtZW50cywgaW4gb3JkZXIgb2YgaG93IHRoZXkncmUgZGlzcGxheWVkIG9uIHNjcmVlbiAodG9wIGRvd24pXG5jb25zdCBFTEVNRU5UUzogQXJyYXk8RWxlbWVudD4gPSBbVElUTEUsIEVBU1lfQlVUVE9OLCBNRURJVU1fQlVUVE9OLCBIQVJEX0JVVFRPTi8qLCBDVVNUT01fQlVUVE9OKi8sIElORklOSVRFX0JVVFRPTl07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW5NZW51IGV4dGVuZHMgTWVudSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkcmF3V2l0aExpbWl0OiAoKSA9PiB2b2lkO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKEVMRU1FTlRTKTtcbiAgICAgICAgc3VwZXIuYWRkRXZlbnRMaXN0ZW5lcigncHJlc3MnLCB0aGlzLmRyYXcuYmluZCh0aGlzKSk7XG4gICAgICAgIHN1cGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2hvdmVyJywgdGhpcy5kcmF3LmJpbmQodGhpcykpO1xuXG4gICAgICAgIC8vIFRoZSBkcmF3IGZ1bmN0aW9uIHdpdGggYSBsaW1pdGVyLCB0byBwcmV2ZW50IGZsaWNrZXJpbmcgd2hlbiByZXNpemluZ1xuICAgICAgICB0aGlzLmRyYXdXaXRoTGltaXQgPSBsaW1pdGVyKHRoaXMuZHJhdy5iaW5kKHRoaXMpLCAxMDApO1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudHMoKTtcbiAgICB9XG5cbiAgICBhc3luYyBkcmF3KCkge1xuICAgICAgICByZXR1cm4gY2xlYXIoKS50aGVuKHN1cGVyLmRyYXcuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIHN1cGVyLnJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmRyYXdXaXRoTGltaXQpO1xuICAgIH1cblxuICAgIGRlcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIHN1cGVyLmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuZHJhd1dpdGhMaW1pdCk7XG4gICAgfVxufSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IEdhbWUsIHtGaW5pdGVHYW1lUHJvcHMsIEluZmluaXRlR2FtZVByb3BzfSBmcm9tICcuL2dhbWUvZ2FtZSc7XG5pbXBvcnQgTWFpbk1lbnUsIHtFQVNZX0JVVFRPTiwgSEFSRF9CVVRUT04sIElORklOSVRFX0JVVFRPTiwgTUVESVVNX0JVVFRPTn0gZnJvbSAnLi9tZW51L21haW4tbWVudSc7XG5cbmltcG9ydCB7Y2FudmFzLCBjdHgsIHNwcml0ZXNoZWV0TG9hZGVkfSBmcm9tICcuL2RyYXcnO1xuaW1wb3J0IHtFbGVtZW50UHJlc3NFdmVudH0gZnJvbSAnLi9tZW51L21lbnUnO1xuXG5pbXBvcnQgJy4uL2Fzc2V0cy9zdHlsZXMuY3NzJztcblxuLy8gTWFrZSB0aGUgY2FudmFzIGZ1bGxzY3JlZW5cbmZ1bmN0aW9uIGZ1bGxzY3JlZW5DYW52YXMoKSB7XG4gICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIGN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudCAqL1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjdHgud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGN0eC5tb3pJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudCAqL1xufVxuXG4vLyBBZGQgYW4gZXZlbnQgaGFuZGxlciB0byByZXNpemUgdGhlIGNhbnZhc1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bGxzY3JlZW5DYW52YXMpO1xuXG4vLyBNYWtlIHRoZSBjYW52YXMgZnVsbHNjcmVlblxuZnVsbHNjcmVlbkNhbnZhcygpO1xuXG4vLyBDcmVhdGUgdGhlIG1haW4gbWVudVxuY29uc3QgbWFpbk1lbnUgPSBuZXcgTWFpbk1lbnUoKTtcblxuLy8gQWRkIGFuIGV2ZW50IGxpc3RlbmVyIGZvciBwcmVzc2luZyB0aGUgbWVudSBidXR0b25zXG5tYWluTWVudS5hZGRFdmVudExpc3RlbmVyKCdwcmVzcycsIChldmVudCA6IEVsZW1lbnRQcmVzc0V2ZW50KSA9PiB7XG4gICAgbWFpbk1lbnUuZGVyZWdpc3RlckV2ZW50cygpO1xuXG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBnYW1lIHByb3BlcnRpZXNcbiAgICBsZXQgZ2FtZVByb3BzOiBGaW5pdGVHYW1lUHJvcHMgfCBJbmZpbml0ZUdhbWVQcm9wcyB8IHVuZGVmaW5lZDtcbiAgICBzd2l0Y2ggKGV2ZW50LnByZXNzZWRFbGVtZW50KSB7XG4gICAgY2FzZSBFQVNZX0JVVFRPTi5pZDpcbiAgICAgICAgZ2FtZVByb3BzID0ge1xuICAgICAgICAgICAgdzogOSxcbiAgICAgICAgICAgIGg6IDksXG4gICAgICAgICAgICBudW1NaW5lczogMTBcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSBNRURJVU1fQlVUVE9OLmlkOlxuICAgICAgICBnYW1lUHJvcHMgPSB7XG4gICAgICAgICAgICB3OiAxNixcbiAgICAgICAgICAgIGg6IDE2LFxuICAgICAgICAgICAgbnVtTWluZXM6IDQwXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgSEFSRF9CVVRUT04uaWQ6XG4gICAgICAgIGdhbWVQcm9wcyA9IHtcbiAgICAgICAgICAgIHc6IDMwLFxuICAgICAgICAgICAgaDogMTYsXG4gICAgICAgICAgICBudW1NaW5lczogOTlcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSBJTkZJTklURV9CVVRUT04uaWQ6XG4gICAgICAgIGdhbWVQcm9wcyA9IHtcbiAgICAgICAgICAgIC8vIE1lZGl1bSBkaWZmaWN1bHR5IG1pbmUgZGVuc2l0eVxuICAgICAgICAgICAgbWluZURlbnNpdHk6IDQwLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSB0aGUgZ2FtZVxuICAgIG5ldyBHYW1lKHtcbiAgICAgICAgLi4uZ2FtZVByb3BzLFxuICAgICAgICBoYW5kbGVCYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBtYWluTWVudS5yZWdpc3RlckV2ZW50cygpO1xuICAgICAgICAgICAgbWFpbk1lbnUuZHJhdygpO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcblxuLy8gRHJhdyB0aGUgbWFpbiBtZW51IG9uY2UgdGhlIHNwcml0ZXNoZWV0IGhhcyBsb2FkZWRcbnNwcml0ZXNoZWV0TG9hZGVkLnRoZW4obWFpbk1lbnUuZHJhdy5iaW5kKG1haW5NZW51KSk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInUiLCJjaHVua0lkIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVwbGFjZSIsInAiLCJiIiwiYmFzZVVSSSIsInNlbGYiLCJocmVmIiwidG9rZW4iLCJ0aW1lem9uZSIsInRpbWV6b25lQ2xpcCIsIm1hc2tzIiwiZGVmYXVsdCIsInNob3J0RGF0ZSIsInBhZGRlZFNob3J0RGF0ZSIsIm1lZGl1bURhdGUiLCJsb25nRGF0ZSIsImZ1bGxEYXRlIiwic2hvcnRUaW1lIiwibWVkaXVtVGltZSIsImxvbmdUaW1lIiwiaXNvRGF0ZSIsImlzb1RpbWUiLCJpc29EYXRlVGltZSIsImlzb1V0Y0RhdGVUaW1lIiwiZXhwaXJlc0hlYWRlckZvcm1hdCIsImkxOG4iLCJkYXlOYW1lcyIsIm1vbnRoTmFtZXMiLCJ0aW1lTmFtZXMiLCJwYWQiLCJ2YWwiLCJsZW4iLCJhcmd1bWVudHMiLCJTdHJpbmciLCJwYWRTdGFydCIsImdldERheU5hbWUiLCJfcmVmIiwieSIsIl8iLCJkYXlOYW1lIiwiX3JlZiRzaG9ydCIsIl9zaG9ydCIsInRvZGF5IiwiRGF0ZSIsInllc3RlcmRheSIsInNldERhdGUiLCJ0b21vcnJvdyIsImdldFdlZWsiLCJkYXRlIiwidGFyZ2V0VGh1cnNkYXkiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldERheSIsImZpcnN0VGh1cnNkYXkiLCJkcyIsImdldFRpbWV6b25lT2Zmc2V0Iiwic2V0SG91cnMiLCJnZXRIb3VycyIsIndlZWtEaWZmIiwiTWF0aCIsImZsb29yIiwiZ2V0RGF5T2ZXZWVrIiwiZG93IiwiZm9ybWF0VGltZXpvbmUiLCJtYXRjaCIsInBvcCIsImNvbnNvbGVMb2ciLCJzIiwibm93IiwiY29uc29sZSIsImxvZyIsIm1hc2siLCJ1dGMiLCJnbXQiLCJ0ZXN0IiwiaXNOYU4iLCJUeXBlRXJyb3IiLCJtYXNrU2xpY2UiLCJzbGljZSIsIl9kIiwiRCIsIl9tIiwiX0giLCJfTSIsIl9zIiwiX0wiLCJfbyIsIl9XIiwiX04iLCJmbGFncyIsImRkIiwiZGRkIiwiREREIiwic2hvcnQiLCJkZGRkIiwiRERERCIsIm1tIiwibW1tIiwibW1tbSIsInl5IiwieXl5eSIsImgiLCJoaCIsIkgiLCJISCIsIk0iLCJNTSIsInNzIiwibCIsIkwiLCJ0IiwidHQiLCJUIiwiVFQiLCJaIiwiYWJzIiwiUyIsIlciLCJXVyIsIk4iLCJkYXRlRm9ybWF0IiwidGltZW91dElkRm9yRnVuYyIsIk1hcCIsImxpbWl0ZXIiLCJmdW5jIiwiZGVsYXkiLCJjbGVhclRpbWVvdXQiLCJzZXQiLCJzZXRUaW1lb3V0IiwiVElMRV9TSVpFIiwiU1BSSVRFUyIsIlRJTEVTIiwiRU1QVFkiLCJ4IiwidyIsIk1JTkUiLCJISURERU4iLCJGTEFHIiwiQ0xPU0UiLCJNT0RBTCIsIkJBQ0siLCJCQUNLX0hPVkVSRUQiLCJNQUlOX01FTlUiLCJUSVRMRSIsIkVBU1kiLCJFQVNZX0hPVkVSRUQiLCJNRURJVU0iLCJNRURJVU1fSE9WRVJFRCIsIkhBUkQiLCJIQVJEX0hPVkVSRUQiLCJDVVNUT00iLCJDVVNUT01fSE9WRVJFRCIsIklORklOSVRFIiwiSU5GSU5JVEVfSE9WRVJFRCIsIlJFVFJZX01PREFMIiwiUkVUUlkiLCJSRVRSWV9IT1ZFUkVEIiwiU1VDQ0VTU19NT0RBTCIsIlJFU0VUIiwiUkVTRVRfSE9WRVJFRCIsImNhbnZhcyIsImdldEVsZW1lbnRCeUlkIiwiY3R4IiwiZ2V0Q29udGV4dCIsInNwcml0ZXNoZWV0IiwiSW1hZ2UiLCJzcHJpdGVzaGVldExvYWRlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRyYXdTcHJpdGUiLCJzcHJpdGUiLCJkcmF3UmVjdCIsImRyYXdJbWFnZSIsIlVSTCIsIkV2ZW50TWFuYWdlciIsImNvbnN0cnVjdG9yIiwiZXZlbnRMaXN0ZW5lcnMiLCJ0eXBlIiwibGlzdGVuZXIiLCJsaXN0ZW5lcnNGb3JFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJmaWx0ZXIiLCJsaXN0ZW5lckZvckV2ZW50IiwiY2FsbEV2ZW50TGlzdGVuZXJzIiwiZXZlbnQiLCJmb3JFYWNoIiwiVElMRV9EUkFXX1NJWkUiLCJDYW1lcmEiLCJmaWVsZFNpemUiLCJzdXBlciIsInJlc2V0IiwicG9pbnRlckRvd25FdmVudCIsInRvdWNoZXMiLCJtb3ZlT3JTY2FsZSIsImRpc3RhbmNlIiwibG9uZ1ByZXNzVGltZW91dCIsImhhbmRsZVdoZWVsIiwiZmFjdG9yIiwiZGVsdGFZIiwiem9vbSIsImNsaWVudFgiLCJjbGllbnRZIiwiaGFuZGxlUG9pbnRlckRvd24iLCJwcmV2ZW50RGVmYXVsdCIsInBvcyIsInRvV29ybGRQb3MiLCJidXR0b24iLCJoYW5kbGVQb2ludGVyTW92ZSIsInByZXZpb3VzVG91Y2hJbmRleCIsImZpbmRJbmRleCIsInBvaW50ZXJJZCIsInByZXZpb3VzVG91Y2giLCJkZWx0YSIsInRyYW5zbGF0aW9uIiwiZmllbGRSZWFsU2l6ZSIsInNjYWxlIiwibWluIiwibWF4Iiwid2lkdGgiLCJoZWlnaHQiLCJ0b3VjaDAiLCJ0b3VjaDEiLCJoeXBvdCIsImNlbnRlciIsImhhbmRsZVBvaW50ZXJDYW5jZWwiLCJoYW5kbGVQb2ludGVyT3V0IiwiaGFuZGxlUG9pbnRlclVwIiwicmVnaXN0ZXJFdmVudHMiLCJtaWRkbGVUcmFuc2xhdGlvbiIsInRvQ2FudmFzUG9zIiwibmV3U2NhbGUiLCJkcmF3IiwidGlsZURhdGEiLCJjbGVhclJlY3QiLCJ5S2V5IiwiTnVtYmVyIiwieEtleSIsInZpc2libGVUaWxlcyIsImNhbnZhc1JlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0aWxlU2l6ZSIsImxlZnQiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImRlcmVnaXN0ZXJFdmVudHMiLCJ3b3JrZXIiLCJXb3JrZXIiLCJwcm9taXNlcyIsInJlc3BvbnNlIiwicmVqZWN0Iiwic3VjY2VzcyIsImNtZCIsIndvcmtlckNvbm5lY3RlZCIsInF1ZXVlZE1lc3NhZ2VzIiwicG9zdE1lc3NhZ2UiLCJub1F1ZXVlIiwibXNnIiwibmV3TWVzc2FnZSIsInNlbmRQaW5nIiwidGltZW91dCIsInBpbmdQcm9taXNlIiwidGltZW91dFByb21pc2UiLCJyIiwicmFjZSIsImluaXQiLCJmbGFnIiwicGluZ3MiLCJzZW5kUGluZ1VudGlsQ29ubmVjdCIsInRoZW4iLCJiaWdnZXN0RWxlbWVudEJ5RmllbGQiLCJlbGVtZW50cyIsImZpZWxkIiwicmVkdWNlIiwicHJldiIsImN1cnIiLCJnZXRBYnNQb3MiLCJyZWN0Iiwicm91bmQiLCJpbnRlcnNlY3QiLCJoaXRib3giLCJNZW51IiwidGFsbGVzdEVsZW1lbnQiLCJsb25nZXN0RWxlbWVudCIsImVsZW1lbnRIaXRib3hlcyIsImhvdmVyZWRFbGVtZW50IiwiZW50cmllcyIsInByZXNzZWRFbGVtZW50IiwiYm91bmRzIiwiYWN0dWFsV2lkdGgiLCJhY3R1YWxIZWlnaHQiLCJpbnRlcmFjdGFibGUiLCJwYXJzZSIsImhvdmVyZWRTcHJpdGUiLCJDTE9TRV9CVVRUT04iLCJCQUNLX0JVVFRPTiIsIk1vZGFsIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJtb2RhbFNpemUiLCJtb2RhbFgiLCJtb2RhbFkiLCJNT0RBTF9HUklEX1NJWkUiLCJpbm5lck1vZGFsQm91bmRzIiwiUkVUUllfQlVUVE9OIiwiRUxFTUVOVFMiLCJiaW5kIiwiUkVTRVRfQlVUVE9OIiwiTW9kYWxDb250YWluZXIiLCJtb2RhbCIsIm9wZW4iLCJjbG9zZSIsImhpZGUiLCJoaWRkZW4iLCJyZXZlYWwiLCJHYW1lIiwicHJvcHMiLCJjYW1lcmEiLCJoYW5kbGVQcmVzcyIsImhhbmRsZUxvbmdQcmVzcyIsImRyYXdXaXRoTGltaXQiLCJsYXN0RHJhd1RpbWVzdGFtcCIsImluaXRpYWxpc2VQcm9taXNlIiwiZ2FtZU92ZXIiLCJtaW5lcyIsIm51bU1pbmVzIiwibWluZURlbnNpdHkiLCJoYW5kbGVTdGF0ZSIsInN0YXRlRGF0YSIsInN0YXRlIiwiaGFuZGxlRW5kR2FtZU1vZGFsIiwibW9kYWxDb25zdHJ1Y3RvciIsInJlc2V0RWxlbWVudElkIiwiaGFuZGxlQmFjayIsIkVBU1lfQlVUVE9OIiwiTUVESVVNX0JVVFRPTiIsIkhBUkRfQlVUVE9OIiwiSU5GSU5JVEVfQlVUVE9OIiwiZnVsbHNjcmVlbkNhbnZhcyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImltYWdlU21vb3RoaW5nRW5hYmxlZCIsIndlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZCIsIm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCIsIm1haW5NZW51IiwiY2xlYXIiLCJnYW1lUHJvcHMiXSwic291cmNlUm9vdCI6IiJ9