(()=>{"use strict";var e={250:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(537),r=n.n(i),s=n(645),o=n.n(s)()(r());o.push([e.id,"body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}","",{version:3,sources:["webpack://./assets/styles.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,SAAS;AACb;AACA;IACI,iCAAiC;IACjC,oCAAoC;IACpC,0BAA0B;IAC1B,4BAA4B;IAC5B,kBAAkB;AACtB",sourcesContent:["body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}"],sourceRoot:""}]);const a=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,s){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);i&&o[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var s={},o=[],a=0;a<e.length;a++){var h=e[a],c=i.base?h[0]+i.base:h[0],d=s[c]||0,l="".concat(c," ").concat(d);s[c]=d+1;var u=n(l),m={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var p=r(m,i);i.byIndex=a,t.splice(a,0,{identifier:l,updater:p,references:1})}o.push(l)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var s=i(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<s.length;o++){var a=n(s[o]);t[a].references--}for(var h=i(e,r),c=0;c<s.length;c++){var d=n(s[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=h}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},882:(e,t,n)=>{e.exports=n.p+"16579aa28cba396948f1.png"}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.u=e=>e+".bundle.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{class e{constructor(){this.eventListeners=new Map}addEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,[...i,t])}removeEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,i.filter((e=>e===t)))}callEventListeners(e,t){var n;(null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[]).forEach((e=>e(t)))}}var t=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,i=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,r=/[^-+\dA-Z]/g,s={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},o={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(e).padStart(t,"0")},h=function(e){var t=e.y,n=e.m,i=e.d,r=e._,s=e.dayName,o=e.short,a=void 0!==o&&o,h=new Date,c=new Date;c.setDate(c[r+"Date"]()-1);var d=new Date;return d.setDate(d[r+"Date"]()+1),h[r+"FullYear"]()===t&&h[r+"Month"]()===n&&h[r+"Date"]()===i?a?"Tdy":"Today":c[r+"FullYear"]()===t&&c[r+"Month"]()===n&&c[r+"Date"]()===i?a?"Ysd":"Yesterday":d[r+"FullYear"]()===t&&d[r+"Month"]()===n&&d[r+"Date"]()===i?a?"Tmw":"Tomorrow":s},c=function(e){var t=new Date(e.getFullYear(),e.getMonth(),e.getDate());t.setDate(t.getDate()-(t.getDay()+6)%7+3);var n=new Date(t.getFullYear(),0,4);n.setDate(n.getDate()-(n.getDay()+6)%7+3);var i=t.getTimezoneOffset()-n.getTimezoneOffset();t.setHours(t.getHours()-i);var r=(t-n)/6048e5;return 1+Math.floor(r)},d=function(e){var t=e.getDay();return 0===t&&(t=7),t},l=function(e){return(String(e).match(i)||[""]).pop().replace(r,"").replace(/GMT\+0000/g,"UTC")};function u(e){const n=new Date;console.log("("+function(e,n,i,r){if(1!==arguments.length||"string"!=typeof e||/\d/.test(e)||(n=e,e=void 0),(e=e||0===e?e:new Date)instanceof Date||(e=new Date(e)),isNaN(e))throw TypeError("Invalid date");var u=(n=String(s[n]||n||s.default)).slice(0,4);"UTC:"!==u&&"GMT:"!==u||(n=n.slice(4),i=!0,"GMT:"===u&&(r=!0));var m=function(){return i?"getUTC":"get"},p=function(){return e[m()+"Date"]()},v=function(){return e[m()+"Day"]()},f=function(){return e[m()+"Month"]()},w=function(){return e[m()+"FullYear"]()},E=function(){return e[m()+"Hours"]()},y=function(){return e[m()+"Minutes"]()},g=function(){return e[m()+"Seconds"]()},M=function(){return e[m()+"Milliseconds"]()},D=function(){return i?0:e.getTimezoneOffset()},b=function(){return c(e)},x=function(){return d(e)},T={d:function(){return p()},dd:function(){return a(p())},ddd:function(){return o.dayNames[v()]},DDD:function(){return h({y:w(),m:f(),d:p(),_:m(),dayName:o.dayNames[v()],short:!0})},dddd:function(){return o.dayNames[v()+7]},DDDD:function(){return h({y:w(),m:f(),d:p(),_:m(),dayName:o.dayNames[v()+7]})},m:function(){return f()+1},mm:function(){return a(f()+1)},mmm:function(){return o.monthNames[f()]},mmmm:function(){return o.monthNames[f()+12]},yy:function(){return String(w()).slice(2)},yyyy:function(){return a(w(),4)},h:function(){return E()%12||12},hh:function(){return a(E()%12||12)},H:function(){return E()},HH:function(){return a(E())},M:function(){return y()},MM:function(){return a(y())},s:function(){return g()},ss:function(){return a(g())},l:function(){return a(M(),3)},L:function(){return a(Math.floor(M()/10))},t:function(){return E()<12?o.timeNames[0]:o.timeNames[1]},tt:function(){return E()<12?o.timeNames[2]:o.timeNames[3]},T:function(){return E()<12?o.timeNames[4]:o.timeNames[5]},TT:function(){return E()<12?o.timeNames[6]:o.timeNames[7]},Z:function(){return r?"GMT":i?"UTC":l(e)},o:function(){return(D()>0?"-":"+")+a(100*Math.floor(Math.abs(D())/60)+Math.abs(D())%60,4)},p:function(){return(D()>0?"-":"+")+a(Math.floor(Math.abs(D())/60),2)+":"+a(Math.floor(Math.abs(D())%60),2)},S:function(){return["th","st","nd","rd"][p()%10>3?0:(p()%100-p()%10!=10)*p()%10]},W:function(){return b()},WW:function(){return a(b())},N:function(){return x()}};return n.replace(t,(function(e){return e in T?T[e]():e.slice(1,e.length-1)}))}(n,"yyyy/mm/dd HH:MM:ss.l")+") JS: "+e)}const m=new Map;function p(e,t){return()=>{const n=m.get(e);n&&clearTimeout(n),m.set(e,setTimeout(e,t))}}const v=10,f={TILES:{EMPTY:{x:0,y:0,w:v,h:v},1:{x:10,y:0,w:v,h:v},2:{x:20,y:0,w:v,h:v},3:{x:30,y:0,w:v,h:v},4:{x:40,y:0,w:v,h:v},5:{x:50,y:0,w:v,h:v},6:{x:60,y:0,w:v,h:v},7:{x:70,y:0,w:v,h:v},8:{x:80,y:0,w:v,h:v},MINE:{x:90,y:0,w:v,h:v},HIDDEN:{x:100,y:0,w:v,h:v},FLAG:{x:110,y:0,w:v,h:v},CLOSE:{x:120,y:0,w:v,h:v}},MODAL:{BACK:{x:0,y:90,w:24,h:v},BACK_HOVERED:{x:24,y:90,w:24,h:v}},MAIN_MENU:{TITLE:{x:0,y:10,w:95,h:v},EASY:{x:0,y:20,w:26,h:v},EASY_HOVERED:{x:26,y:20,w:26,h:v},MEDIUM:{x:0,y:30,w:35,h:v},MEDIUM_HOVERED:{x:35,y:30,w:30,h:v},HARD:{x:0,y:40,w:25,h:v},HARD_HOVERED:{x:25,y:40,w:26,h:v},CUSTOM:{x:0,y:50,w:38,h:v},CUSTOM_HOVERED:{x:38,y:50,w:26,h:v},INFINITE:{x:0,y:60,w:43,h:v},INFINITE_HOVERED:{x:43,y:60,w:43,h:v}},RETRY_MODAL:{TITLE:{x:0,y:70,w:45,h:v},RETRY:{x:0,y:80,w:30,h:v},RETRY_HOVERED:{x:30,y:80,w:30,h:v}},SUCCESS_MODAL:{TITLE:{x:0,y:100,w:52,h:v},RESET:{x:0,y:110,w:53,h:v},RESET_HOVERED:{x:53,y:110,w:53,h:v}}},w=document.getElementById("canvas"),E=w.getContext("2d"),y=new Image,g=new Promise((e=>{y.addEventListener("load",(()=>{u("Finished loading spritesheet"),e()}))}));function M(e,t){E.drawImage(y,e.x,e.y,e.w,e.h,t.x,t.y,t.w,t.h)}y.src=new URL(n(882),n.b).toString();var D,b,x=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)},T=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n};function S(e){u("(camera) "+e)}const L=30;class A extends e{constructor(e){super(),D.set(this,void 0),b.set(this,void 0),this.fieldSize=e,this.reset(),this.pointerDownEvent={touches:[],moveOrScale:!1,distance:null,longPressTimeout:null},this.handleWheel=e=>{const t=x(this,b,"f")+-.0025*e.deltaY;t>.5&&t<4&&(T(this,b,t,"f"),this.callEventListeners("move",{translation:x(this,D,"f"),scale:x(this,b,"f")}))},this.handlePointerDown=e=>{e.preventDefault(),0==this.pointerDownEvent.touches.length?(S("first pointerdown"),this.pointerDownEvent.longPressTimeout=setTimeout((()=>{0===this.pointerDownEvent.touches.length||this.pointerDownEvent.moveOrScale||(S("longpress timeout"),this.callEventListeners("longpress",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button}),this.pointerDownEvent.touches=[])}),200),this.pointerDownEvent.moveOrScale=!1,this.pointerDownEvent.distance=null):S("another pointerdown"),this.pointerDownEvent.touches.push(e)},this.handlePointerMove=e=>{if(e.preventDefault(),0===this.pointerDownEvent.touches.length)return;if(1===this.pointerDownEvent.touches.length){const t=e.clientX-this.pointerDownEvent.touches[0].clientX,n=e.clientY-this.pointerDownEvent.touches[0].clientY;if(!this.pointerDownEvent.moveOrScale&&Math.abs(t)<7.5&&Math.abs(n)<7.5)return;if(x(this,D,"f").x+=t,x(this,D,"f").y+=n,void 0!==this.fieldSize){const e=this.fieldSize.w*L*x(this,b,"f")/2,t=this.fieldSize.h*L*x(this,b,"f")/2;x(this,D,"f").x=Math.min(x(this,D,"f").x,e),x(this,D,"f").x=Math.max(x(this,D,"f").x,-e),x(this,D,"f").y=Math.min(x(this,D,"f").y,t),x(this,D,"f").y=Math.max(x(this,D,"f").y,-t)}}else{const e=this.pointerDownEvent.touches[0],t=this.pointerDownEvent.touches[1],n=Math.hypot(e.clientX-t.clientX,e.clientY-t.clientY);null!=this.pointerDownEvent.distance&&(T(this,b,x(this,b,"f")+.005*(n-this.pointerDownEvent.distance),"f"),T(this,b,Math.max(x(this,b,"f"),.5),"f"),T(this,b,Math.min(x(this,b,"f"),4),"f")),this.pointerDownEvent.distance=n}this.pointerDownEvent.moveOrScale||(S("pointer moved, not press event"),this.pointerDownEvent.moveOrScale=!0,clearTimeout(this.pointerDownEvent.longPressTimeout));const t=this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId));this.pointerDownEvent.touches[t]=e,this.callEventListeners("move",{translation:x(this,D,"f"),scale:x(this,b,"f")})},this.handlePointerCancel=e=>{S("pointercancel")},this.handlePointerOut=e=>{e.preventDefault(),0!=this.pointerDownEvent.touches.length&&(this.pointerDownEvent.touches.length>1?(S("pointerout: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),this.pointerDownEvent.distance=null):(S("pointerout: no press event"),clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]))},this.handlePointerUp=e=>{if(e.preventDefault(),0!==this.pointerDownEvent.touches.length){if(this.pointerDownEvent.touches.length>1)return S("pointerup: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),void(this.pointerDownEvent.distance=null);this.pointerDownEvent.moveOrScale?S("pointerup"):(S("pointerup: no movement or scaling, press event"),this.callEventListeners("press",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button})),clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]}},this.registerEvents()}middleTranslation(){return void 0===this.fieldSize?{x:w.width/2,y:w.height/2}:{x:w.width/2-this.scale*(this.fieldSize.w*L/2),y:w.height/2-this.scale*(this.fieldSize.h*L/2)}}get translation(){return x(this,D,"f")}get scale(){return x(this,b,"f")}get visibleTiles(){const e=w.getBoundingClientRect(),t=L*this.scale,n=this.toWorldPos(e.left-t,e.top-t),i=this.toWorldPos(e.right+t,e.bottom+t);return{x:n.x,y:n.y,w:i.x-n.x,h:i.y-n.y}}toCanvasPos(e,t){const n=this.middleTranslation(),i=w.getBoundingClientRect();return{x:n.x+i.left+this.translation.x+e*L*this.scale,y:n.y+i.top+this.translation.y+t*L*this.scale}}toWorldPos(e,t){const n=this.middleTranslation(),i=w.getBoundingClientRect();return{x:Math.floor((e-i.left-n.x-this.translation.x)/this.scale/L),y:Math.floor((t-i.top-n.y-this.translation.y)/this.scale/L)}}reset(){void 0!==this.fieldSize?(T(this,b,Math.min(w.width/(this.fieldSize.w*L*1.1),w.height/(this.fieldSize.h*L*1.1)),"f"),T(this,b,Math.max(x(this,b,"f"),.5),"f"),T(this,b,Math.min(x(this,b,"f"),4),"f")):T(this,b,1,"f"),T(this,D,{x:0,y:0},"f")}registerEvents(){w.addEventListener("wheel",this.handleWheel),w.addEventListener("pointerdown",this.handlePointerDown),w.addEventListener("pointermove",this.handlePointerMove),w.addEventListener("pointercancel",this.handlePointerCancel),w.addEventListener("pointerout",this.handlePointerOut),w.addEventListener("pointerup",this.handlePointerUp)}deregisterEvents(){w.removeEventListener("wheel",this.handleWheel),w.removeEventListener("pointerdown",this.handlePointerDown),w.removeEventListener("pointermove",this.handlePointerMove),w.removeEventListener("pointercancel",this.handlePointerCancel),w.removeEventListener("pointerout",this.handlePointerOut),w.removeEventListener("pointerup",this.handlePointerUp)}}D=new WeakMap,b=new WeakMap;var N=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};u("Creating WASM worker");const I=new Worker(new URL(n.p+n.u(303),n.b)),P=new Map;u("Registering WebIO event listener for Go"),I.addEventListener("message",(e=>{if(e.data){const t=e.data,[n,i]=P.get(t.id);t.success?n(t.data):(u("Error response for '"+t.cmd+"': "+t.data),i(t.data))}}));let C=!1;const O=[];function R(e,t,n){return new Promise(((i,r)=>{const s=function(e,t){return{cmd:e,id:e+Date.now(),data:t}}(e,t);P.set(s.id,[i,r]),n||C?I.postMessage(s):(u(e+" message received, but worker hasn't connected yet. Adding to queue"),O.push(s))}))}function _(e){return N(this,void 0,void 0,(function*(){const t=R("ping",null,!0),n=new Promise(((t,n)=>setTimeout(n,e)));try{return yield Promise.race([t,n]),C=!0,O.forEach((e=>{I.postMessage(e)})),O.length=0,!0}catch(e){return!1}}))}function H(e){return R("init",e)}function U(e){return R("flag",e)}(function(){return N(this,void 0,void 0,(function*(){let e=0,t=100;for(;!C&&e<5;)u("Sending ping with timeout "+t+"ms"),e++,(yield _(t))||(t*=2,u("Ping timeout reached"));if(e>=5)throw new Error("Max pings 5 reached, assuming WASM module is not functional")}))})().then((()=>{u("Response to ping received, worker connected")}));const Y=(e,t)=>e.reduce(((e,n)=>e.sprite[t]*e.scale>n.sprite[t]*n.scale?e:n));function W(e,t){const n=w.getBoundingClientRect();return[Math.round(e-n.left),Math.round(t-n.top)]}function k(e,t,n){return e>n.x&&t>n.y&&e<n.x+n.w&&t<n.y+n.h}class B extends e{constructor(e){super(),this.elements=e,this.tallestElement=Y(e,"h"),this.longestElement=Y(e,"w"),this.elementHitboxes=new Map,this.hoveredElement=null,this.handlePointerMove=e=>{const[t,n]=W(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())if(k(t,n,i))return void(this.hoveredElement!==e&&(this.hoveredElement=e,this.callEventListeners("hover",{hoveredElement:e})));null!==this.hoveredElement&&(this.hoveredElement=null,this.callEventListeners("hover",{hoveredElement:null}))},this.handlePointerDown=e=>{const[t,n]=W(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())k(t,n,i)&&this.callEventListeners("press",{pressedElement:e});return null},this.registerEvents()}draw(e){return t=this,n=void 0,r=function*(){e||(e={x:0,y:0,w:w.width,h:w.height});let t=e.h*(.5/this.elements.length)/(this.tallestElement.sprite.h*this.tallestElement.scale);return t*this.longestElement.sprite.w*this.longestElement.scale>=.9*e.w&&(t=.9*e.w/(this.longestElement.sprite.w*this.longestElement.scale)),new Promise((n=>{let i=e.y+this.tallestElement.sprite.h*t*.5;this.elements.forEach((n=>{const r=n.sprite.w*n.scale*t,s=n.sprite.h*n.scale*t,o={x:e.x+(e.w/2-r/2),y:i,w:r,h:s};n.interactable&&this.elementHitboxes.set(n.id,o);const a=(h=n.sprite,JSON.parse(JSON.stringify(h)));var h;n.id===this.hoveredElement&&"hoveredSprite"in n&&(a.x=n.hoveredSprite.x,a.y=n.hoveredSprite.y),M(a,o),i+=1.5*s})),n()}))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){window.addEventListener("pointermove",this.handlePointerMove),window.addEventListener("pointerdown",this.handlePointerDown)}deregisterEvents(){window.removeEventListener("pointermove",this.handlePointerMove),window.removeEventListener("pointerdown",this.handlePointerDown)}}const z=e=>({x:e.x,y:e.y});const F={id:"modal.close_button",sprite:f.TILES.CLOSE,scale:1},j={id:"modal.back_button",sprite:f.MODAL.BACK,hoveredSprite:z(f.MODAL.BACK_HOVERED),scale:1.25,interactable:!0};class V extends B{constructor(e){super(e)}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){yield new Promise((e=>{const t=w.width,n=w.height;E.fillStyle="rgba(0, 0, 0, 0.4)",E.fillRect(0,0,t,n);const i=t>n?.8*n:.8*t,r=t/2-i/2,s=n/2-i/2,o=i/10;for(let e=0;e<10;e++)for(let t=0;t<10;t++){const n={x:r+t*o,y:s+e*o,w:o,h:o};let i={x:f.TILES.EMPTY.w/2,y:f.TILES.EMPTY.h/2,w:1,h:1};0!==t&&9!==t&&0!==e&&9!==e||(9===t&&0===e?(i=F.sprite,this.elementHitboxes.set(F.id,n)):i=f.TILES.HIDDEN),M(i,n)}e({x:r+o,y:s+o,w:i-2*o,h:i-2*o})})).then((t=>e.draw.call(this,t)))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}}const Z={id:"modal.retry.title",sprite:f.RETRY_MODAL.TITLE,scale:1},J={id:"modal.retry.retry_button",sprite:f.RETRY_MODAL.RETRY,hoveredSprite:z(f.RETRY_MODAL.RETRY_HOVERED),scale:1.25,interactable:!0},X=[Z,J,j],G=V.bind(V,X),K={id:"modal.success.title",sprite:f.SUCCESS_MODAL.TITLE,scale:1},$={id:"modal.success.reset_button",sprite:f.SUCCESS_MODAL.RESET,hoveredSprite:z(f.SUCCESS_MODAL.RESET_HOVERED),scale:1.25,interactable:!0},q=[K,$,j],Q=V.bind(V,q);var ee,te=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))},ne=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n},ie=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class re{constructor(){ee.set(this,void 0),this.modal=null,ne(this,ee,!0,"f")}open(e){this.modal=e,ne(this,ee,!1,"f")}close(){if(!this.modal)throw new Error("No modal to close");this.hide(),this.modal=null}get hidden(){return ie(this,ee,"f")}hide(){if(!this.modal)throw new Error("No modal to hide");this.modal.deregisterEvents(),ne(this,ee,!0,"f")}reveal(){if(!this.modal)throw new Error("No modal to reveal");this.modal.registerEvents(),ne(this,ee,!1,"f")}draw(){return te(this,void 0,void 0,(function*(){ie(this,ee,"f")||(yield this.modal.draw())}))}deregisterEvents(){var e;null===(e=this.modal)||void 0===e||e.deregisterEvents()}}function se(e){e.preventDefault()}ee=new WeakMap;class oe{constructor(e){this.props=e,"w"in this.props&&"h"in this.props?this.camera=new A({w:this.props.w,h:this.props.h}):this.camera=new A,this.camera.addEventListener("press",this.handlePress.bind(this)),this.camera.addEventListener("longpress",this.handleLongPress.bind(this)),this.camera.addEventListener("move",this.draw.bind(this)),this.modal=new re,this.drawWithLimit=p(this.draw.bind(this),100),this.lastDrawTimestamp=0,this.reset(),this.registerEvents()}reset(){let e;if(this.camera.reset(),this.gameOver=!1,"w"in this.props&&"h"in this.props&&"numMines"in this.props)e=H({width:this.props.w,height:this.props.h,mines:this.props.numMines});else{if(!("mineDensity"in this.props))throw new Error("unknown game props type");e=H({mineDensity:this.props.mineDensity})}e.then(this.draw.bind(this))}draw(){return te(this,void 0,void 0,(function*(){const e=Date.now();var t;e-this.lastDrawTimestamp>1e3/60&&(this.lastDrawTimestamp=e,yield(t=this.camera.visibleTiles,R("appearance",t)).then(this.drawAppearance.bind(this)).then(this.modal.draw.bind(this.modal)))}))}registerEvents(){window.addEventListener("resize",this.drawWithLimit),w.addEventListener("contextmenu",se),this.modal.hidden&&this.camera.registerEvents()}deregisterEvents(){window.removeEventListener("resize",this.drawWithLimit),w.removeEventListener("contextmenu",se),this.camera.deregisterEvents(),this.modal.deregisterEvents()}drawAppearance(e){return te(this,void 0,void 0,(function*(){const t=w.width,n=w.height;E.clearRect(0,0,t,n);const i={x:Number.MAX_VALUE,y:Number.MAX_VALUE},r={x:Number.MIN_VALUE,y:Number.MIN_VALUE};for(const t in e){const n=Number(t);i.y=Math.min(i.y,n),r.y=Math.max(r.y,n);for(const t in e[n]){const s=Number(t);i.x=Math.min(i.x,s),r.x=Math.max(r.x,s);const o=f.TILES[e[n][s]],a=this.camera.toCanvasPos(s,n);M(o,{x:a.x,y:a.y,w:L*this.camera.scale,h:L*this.camera.scale})}}}))}handleState(e){switch(e.state){case"win":this.gameOver=!0,u("Win detected, displaying success modal"),this.handleEndGameModal(Q,$.id);break;case"loss":this.gameOver=!0,u("Loss detected, displaying retry modal"),setTimeout(this.handleEndGameModal.bind(this,G,J.id),1e3)}}handleEndGameModal(e,t){return te(this,void 0,void 0,(function*(){const n=new e;this.modal.open(n),n.addEventListener("hover",this.draw.bind(this)),n.addEventListener("press",(e=>{switch(e.pressedElement){case F.id:this.modal.hide(),this.camera.registerEvents(),this.draw();break;case t:this.modal.close(),this.camera.registerEvents(),this.reset(),this.draw();break;case j.id:this.deregisterEvents(),this.props.handleBack()}})),this.camera.deregisterEvents(),yield this.draw()}))}handlePress(e){var t;this.gameOver?this.modal.hidden&&(this.modal.reveal(),this.camera.deregisterEvents(),this.draw()):0===e.button?(t=e.pos,R("uncover",t)).then((e=>te(this,void 0,void 0,(function*(){yield this.draw(),this.handleState(e)})))):2===e.button&&U(e.pos).then(this.draw.bind(this))}handleLongPress(e){this.gameOver||0!==e.button||U(e.pos).then(this.draw.bind(this))}}const ae={id:"menu.main.title",sprite:f.MAIN_MENU.TITLE,scale:1},he={id:"menu.main.easy_button",sprite:f.MAIN_MENU.EASY,hoveredSprite:z(f.MAIN_MENU.EASY_HOVERED),scale:1.25,interactable:!0},ce={id:"menu.main.medium_button",sprite:f.MAIN_MENU.MEDIUM,hoveredSprite:z(f.MAIN_MENU.MEDIUM_HOVERED),scale:1.25,interactable:!0},de={id:"menu.main.hard_button",sprite:f.MAIN_MENU.HARD,hoveredSprite:z(f.MAIN_MENU.HARD_HOVERED),scale:1.25,interactable:!0},le={id:"menu.main.infinite_button",sprite:f.MAIN_MENU.INFINITE,hoveredSprite:z(f.MAIN_MENU.INFINITE_HOVERED),scale:1.25,interactable:!0},ue=[ae,he,ce,de,le];var me=n(379),pe=n.n(me),ve=n(795),fe=n.n(ve),we=n(569),Ee=n.n(we),ye=n(565),ge=n.n(ye),Me=n(216),De=n.n(Me),be=n(589),xe=n.n(be),Te=n(250),Se={};function Le(){w.width=window.innerWidth,w.height=window.innerHeight,E.imageSmoothingEnabled=!1,E.webkitImageSmoothingEnabled=!1,E.mozImageSmoothingEnabled=!1}Se.styleTagTransform=xe(),Se.setAttributes=ge(),Se.insert=Ee().bind(null,"head"),Se.domAPI=fe(),Se.insertStyleElement=De(),pe()(Te.Z,Se),Te.Z&&Te.Z.locals&&Te.Z.locals,window.addEventListener("resize",Le),Le();const Ae=new class extends B{constructor(){super(ue),super.addEventListener("press",this.draw.bind(this)),super.addEventListener("hover",this.draw.bind(this)),this.drawWithLimit=p(this.draw.bind(this),100),this.registerEvents()}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){return function(e){return t=this,n=void 0,r=function*(){e||(e={x:0,y:0,w:w.width,h:w.height}),E.clearRect(e.x,e.y,e.w,e.h)},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}().then(e.draw.bind(this))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){super.registerEvents(),window.addEventListener("resize",this.drawWithLimit)}deregisterEvents(){super.deregisterEvents(),window.removeEventListener("resize",this.drawWithLimit)}};Ae.addEventListener("press",(e=>{let t;switch(Ae.deregisterEvents(),e.pressedElement){case he.id:t={w:9,h:9,numMines:10};break;case ce.id:t={w:16,h:16,numMines:40};break;case de.id:t={w:30,h:16,numMines:99};break;case le.id:t={mineDensity:40}}new oe(Object.assign(Object.assign({},t),{handleBack:()=>{Ae.registerEvents(),Ae.draw()}}))})),g.then(Ae.draw.bind(Ae))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RixFQUFHLEVBQ0gvRixFQUFHLEVBQ0hnRyxFQUFHMEIsRUFBT3FELE1BQ1Y5RyxFQUFHeUQsRUFBT3NELFNBR2xCcEQsRUFBSW9KLFVBQVVyRixFQUFLNUYsRUFBRzRGLEVBQUszTCxFQUFHMkwsRUFBSzNGLEVBQUcyRixFQUFLMUgsSSwrUlViaEN1TyxHQUFRcEYsS0FBSyxFQUFNa0IsS0FBS21CLEtBQUszYSxRLCtSQUd4QytWLGlCQUNJbEMsTUFBTWtDLGlCQUNOM1IsT0FBT3FFLGlCQUFpQixTQUFVekksS0FBS3liLGVBRzNDM0UsbUJBQ0lqRCxNQUFNaUQsbUJBQ04xUyxPQUFPMEUsb0JBQW9CLFNBQVU5SSxLQUFLeWIsaUJFaERsRGdDLEdBQVNoVixpQkFBaUIsU0FBVVMsSUFJaEMsSUFBSXlVLEVBQ0osT0FKQUYsR0FBUzNHLG1CQUlENU4sRUFBTXFRLGdCQUNkLEtBQUt3RCxHQUFZcGQsR0FDYmdlLEVBQVksQ0FDUnpNLEVBQUcsRUFDSC9CLEVBQUcsRUFDSDJNLFNBQVUsSUFFZCxNQUNKLEtBQUtrQixHQUFjcmQsR0FDZmdlLEVBQVksQ0FDUnpNLEVBQUcsR0FDSC9CLEVBQUcsR0FDSDJNLFNBQVUsSUFFZCxNQUNKLEtBQUttQixHQUFZdGQsR0FDYmdlLEVBQVksQ0FDUnpNLEVBQUcsR0FDSC9CLEVBQUcsR0FDSDJNLFNBQVUsSUFFZCxNQUNKLEtBQUtvQixHQUFnQnZkLEdBQ2pCZ2UsRUFBWSxDQUVSNUIsWUFBYSxJQUtyQixJQUFJWCxHQUFLLE9BQUQsd0JBQ0R1QyxHQUFTLENBQ1piLFdBQVksS0FDUlcsR0FBUzFILGlCQUNUMEgsR0FBU2pFLGNBTXJCdEcsRUFBa0JvRixLQUFLbUYsR0FBU2pFLEtBQUttQixLQUFLOEMsTSIsInNvdXJjZXMiOlsid2VicGFjazovL21pbmVzd2VlcGVyLy4vYXNzZXRzL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9ldmVudC1tYW5hZ2VyLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vbm9kZV9tb2R1bGVzL2RhdGVmb3JtYXQvbGliL2RhdGVmb3JtYXQuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvdXRpbC50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9kcmF3LnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2dhbWUvY2FtZXJhLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2dvaW8vd29ya2VyLWhlbHBlci50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9nb2lvL2dvaW8udHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvbWVudS9tZW51LnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2NvbW1vbi50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9tZW51L21vZGFsLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL21lbnUvcmV0cnktbW9kYWwudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvbWVudS9zdWNjZXNzLW1vZGFsLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2dhbWUvZ2FtZS50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9tZW51L21haW4tbWVudS50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL2Fzc2V0cy9zdHlsZXMuY3NzP2Y3NjQiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHkge1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICBtYXJnaW46IDA7XFxufVxcbmNhbnZhcyB7XFxuICAgIGltYWdlLXJlbmRlcmluZzogLW1vei1jcmlzcC1lZGdlcztcXG4gICAgaW1hZ2UtcmVuZGVyaW5nOiAtd2Via2l0LWNyaXNwLWVkZ2VzO1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IHBpeGVsYXRlZDtcXG4gICAgaW1hZ2UtcmVuZGVyaW5nOiBjcmlzcC1lZGdlcztcXG4gICAgdG91Y2gtYWN0aW9uOiBub25lO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9hc3NldHMvc3R5bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQixTQUFTO0FBQ2I7QUFDQTtJQUNJLGlDQUFpQztJQUNqQyxvQ0FBb0M7SUFDcEMsMEJBQTBCO0lBQzFCLDRCQUE0QjtJQUM1QixrQkFBa0I7QUFDdEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiYm9keSB7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIG1hcmdpbjogMDtcXG59XFxuY2FudmFzIHtcXG4gICAgaW1hZ2UtcmVuZGVyaW5nOiAtbW96LWNyaXNwLWVkZ2VzO1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IC13ZWJraXQtY3Jpc3AtZWRnZXM7XFxuICAgIGltYWdlLXJlbmRlcmluZzogcGl4ZWxhdGVkO1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IGNyaXNwLWVkZ2VzO1xcbiAgICB0b3VjaC1hY3Rpb246IG5vbmU7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmJ1bmRsZS5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsImV4cG9ydCB0eXBlIEV2ZW50TGlzdGVuZXI8RXZlbnRNYXBUPiA9IChldmVudDogRXZlbnRNYXBUW2tleW9mIEV2ZW50TWFwVF0pID0+IHZvaWRcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRNYW5hZ2VyPEV2ZW50TWFwVD4ge1xuICAgIHByaXZhdGUgZXZlbnRMaXN0ZW5lcnM6IE1hcDxrZXlvZiBFdmVudE1hcFQsIEFycmF5PEV2ZW50TGlzdGVuZXI8RXZlbnRNYXBUPj4+O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEV2ZW50TGlzdGVuZXI8SyBleHRlbmRzIGtleW9mIEV2ZW50TWFwVD4odHlwZTogSywgbGlzdGVuZXI6IChldmVudDogRXZlbnRNYXBUW0tdKSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyc0ZvckV2ZW50ID0gdGhpcy5ldmVudExpc3RlbmVycy5nZXQodHlwZSkgPz8gW107XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMuc2V0KHR5cGUsIFsuLi5saXN0ZW5lcnNGb3JFdmVudCwgbGlzdGVuZXJdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgRXZlbnRNYXBUPih0eXBlOiBLLCBsaXN0ZW5lcjogKGV2ZW50OiBFdmVudE1hcFRbS10pID0+IHZvaWQpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzRm9yRXZlbnQgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLmdldCh0eXBlKSA/PyBbXTtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5zZXQodHlwZSxcbiAgICAgICAgICAgIGxpc3RlbmVyc0ZvckV2ZW50LmZpbHRlcihsaXN0ZW5lckZvckV2ZW50ID0+IGxpc3RlbmVyRm9yRXZlbnQgPT09IGxpc3RlbmVyKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNhbGxFdmVudExpc3RlbmVyczxLIGV4dGVuZHMga2V5b2YgRXZlbnRNYXBUPih0eXBlOiBLLCBldmVudDogRXZlbnRNYXBUW0tdKSB7XG4gICAgICAgICh0aGlzLmV2ZW50TGlzdGVuZXJzLmdldCh0eXBlKSA/PyBbXSkuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcihldmVudCkpO1xuICAgIH1cbn0iLCJ2YXIgdG9rZW49L2R7MSw0fXxEezMsNH18bXsxLDR9fHl5KD86eXkpP3woW0hoTXNUdF0pXFwxP3xXezEsMn18W0xsb3BTWk5dfFwiW15cIl0qXCJ8J1teJ10qJy9nO3ZhciB0aW1lem9uZT0vXFxiKD86W0EtWl17MSwzfVtBLVpdW1RDXSkoPzpbLStdXFxkezR9KT98KCg/OkF1c3RyYWxpYW4gKT8oPzpQYWNpZmljfE1vdW50YWlufENlbnRyYWx8RWFzdGVybnxBdGxhbnRpYykgKD86U3RhbmRhcmR8RGF5bGlnaHR8UHJldmFpbGluZykgVGltZSlcXGIvZzt2YXIgdGltZXpvbmVDbGlwPS9bXi0rXFxkQS1aXS9nO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRhdGVGb3JtYXQoZGF0ZSxtYXNrLHV0YyxnbXQpe2lmKGFyZ3VtZW50cy5sZW5ndGg9PT0xJiZ0eXBlb2YgZGF0ZT09PVwic3RyaW5nXCImJiEvXFxkLy50ZXN0KGRhdGUpKXttYXNrPWRhdGU7ZGF0ZT11bmRlZmluZWR9ZGF0ZT1kYXRlfHxkYXRlPT09MD9kYXRlOm5ldyBEYXRlO2lmKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKXtkYXRlPW5ldyBEYXRlKGRhdGUpfWlmKGlzTmFOKGRhdGUpKXt0aHJvdyBUeXBlRXJyb3IoXCJJbnZhbGlkIGRhdGVcIil9bWFzaz1TdHJpbmcobWFza3NbbWFza118fG1hc2t8fG1hc2tzW1wiZGVmYXVsdFwiXSk7dmFyIG1hc2tTbGljZT1tYXNrLnNsaWNlKDAsNCk7aWYobWFza1NsaWNlPT09XCJVVEM6XCJ8fG1hc2tTbGljZT09PVwiR01UOlwiKXttYXNrPW1hc2suc2xpY2UoNCk7dXRjPXRydWU7aWYobWFza1NsaWNlPT09XCJHTVQ6XCIpe2dtdD10cnVlfX12YXIgXz1mdW5jdGlvbiBfKCl7cmV0dXJuIHV0Yz9cImdldFVUQ1wiOlwiZ2V0XCJ9O3ZhciBfZD1mdW5jdGlvbiBkKCl7cmV0dXJuIGRhdGVbXygpK1wiRGF0ZVwiXSgpfTt2YXIgRD1mdW5jdGlvbiBEKCl7cmV0dXJuIGRhdGVbXygpK1wiRGF5XCJdKCl9O3ZhciBfbT1mdW5jdGlvbiBtKCl7cmV0dXJuIGRhdGVbXygpK1wiTW9udGhcIl0oKX07dmFyIHk9ZnVuY3Rpb24geSgpe3JldHVybiBkYXRlW18oKStcIkZ1bGxZZWFyXCJdKCl9O3ZhciBfSD1mdW5jdGlvbiBIKCl7cmV0dXJuIGRhdGVbXygpK1wiSG91cnNcIl0oKX07dmFyIF9NPWZ1bmN0aW9uIE0oKXtyZXR1cm4gZGF0ZVtfKCkrXCJNaW51dGVzXCJdKCl9O3ZhciBfcz1mdW5jdGlvbiBzKCl7cmV0dXJuIGRhdGVbXygpK1wiU2Vjb25kc1wiXSgpfTt2YXIgX0w9ZnVuY3Rpb24gTCgpe3JldHVybiBkYXRlW18oKStcIk1pbGxpc2Vjb25kc1wiXSgpfTt2YXIgX289ZnVuY3Rpb24gbygpe3JldHVybiB1dGM/MDpkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCl9O3ZhciBfVz1mdW5jdGlvbiBXKCl7cmV0dXJuIGdldFdlZWsoZGF0ZSl9O3ZhciBfTj1mdW5jdGlvbiBOKCl7cmV0dXJuIGdldERheU9mV2VlayhkYXRlKX07dmFyIGZsYWdzPXtkOmZ1bmN0aW9uIGQoKXtyZXR1cm4gX2QoKX0sZGQ6ZnVuY3Rpb24gZGQoKXtyZXR1cm4gcGFkKF9kKCkpfSxkZGQ6ZnVuY3Rpb24gZGRkKCl7cmV0dXJuIGkxOG4uZGF5TmFtZXNbRCgpXX0sREREOmZ1bmN0aW9uIERERCgpe3JldHVybiBnZXREYXlOYW1lKHt5OnkoKSxtOl9tKCksZDpfZCgpLF86XygpLGRheU5hbWU6aTE4bi5kYXlOYW1lc1tEKCldLHNob3J0OnRydWV9KX0sZGRkZDpmdW5jdGlvbiBkZGRkKCl7cmV0dXJuIGkxOG4uZGF5TmFtZXNbRCgpKzddfSxEREREOmZ1bmN0aW9uIEREREQoKXtyZXR1cm4gZ2V0RGF5TmFtZSh7eTp5KCksbTpfbSgpLGQ6X2QoKSxfOl8oKSxkYXlOYW1lOmkxOG4uZGF5TmFtZXNbRCgpKzddfSl9LG06ZnVuY3Rpb24gbSgpe3JldHVybiBfbSgpKzF9LG1tOmZ1bmN0aW9uIG1tKCl7cmV0dXJuIHBhZChfbSgpKzEpfSxtbW06ZnVuY3Rpb24gbW1tKCl7cmV0dXJuIGkxOG4ubW9udGhOYW1lc1tfbSgpXX0sbW1tbTpmdW5jdGlvbiBtbW1tKCl7cmV0dXJuIGkxOG4ubW9udGhOYW1lc1tfbSgpKzEyXX0seXk6ZnVuY3Rpb24geXkoKXtyZXR1cm4gU3RyaW5nKHkoKSkuc2xpY2UoMil9LHl5eXk6ZnVuY3Rpb24geXl5eSgpe3JldHVybiBwYWQoeSgpLDQpfSxoOmZ1bmN0aW9uIGgoKXtyZXR1cm4gX0goKSUxMnx8MTJ9LGhoOmZ1bmN0aW9uIGhoKCl7cmV0dXJuIHBhZChfSCgpJTEyfHwxMil9LEg6ZnVuY3Rpb24gSCgpe3JldHVybiBfSCgpfSxISDpmdW5jdGlvbiBISCgpe3JldHVybiBwYWQoX0goKSl9LE06ZnVuY3Rpb24gTSgpe3JldHVybiBfTSgpfSxNTTpmdW5jdGlvbiBNTSgpe3JldHVybiBwYWQoX00oKSl9LHM6ZnVuY3Rpb24gcygpe3JldHVybiBfcygpfSxzczpmdW5jdGlvbiBzcygpe3JldHVybiBwYWQoX3MoKSl9LGw6ZnVuY3Rpb24gbCgpe3JldHVybiBwYWQoX0woKSwzKX0sTDpmdW5jdGlvbiBMKCl7cmV0dXJuIHBhZChNYXRoLmZsb29yKF9MKCkvMTApKX0sdDpmdW5jdGlvbiB0KCl7cmV0dXJuIF9IKCk8MTI/aTE4bi50aW1lTmFtZXNbMF06aTE4bi50aW1lTmFtZXNbMV19LHR0OmZ1bmN0aW9uIHR0KCl7cmV0dXJuIF9IKCk8MTI/aTE4bi50aW1lTmFtZXNbMl06aTE4bi50aW1lTmFtZXNbM119LFQ6ZnVuY3Rpb24gVCgpe3JldHVybiBfSCgpPDEyP2kxOG4udGltZU5hbWVzWzRdOmkxOG4udGltZU5hbWVzWzVdfSxUVDpmdW5jdGlvbiBUVCgpe3JldHVybiBfSCgpPDEyP2kxOG4udGltZU5hbWVzWzZdOmkxOG4udGltZU5hbWVzWzddfSxaOmZ1bmN0aW9uIFooKXtyZXR1cm4gZ210P1wiR01UXCI6dXRjP1wiVVRDXCI6Zm9ybWF0VGltZXpvbmUoZGF0ZSl9LG86ZnVuY3Rpb24gbygpe3JldHVybihfbygpPjA/XCItXCI6XCIrXCIpK3BhZChNYXRoLmZsb29yKE1hdGguYWJzKF9vKCkpLzYwKSoxMDArTWF0aC5hYnMoX28oKSklNjAsNCl9LHA6ZnVuY3Rpb24gcCgpe3JldHVybihfbygpPjA/XCItXCI6XCIrXCIpK3BhZChNYXRoLmZsb29yKE1hdGguYWJzKF9vKCkpLzYwKSwyKStcIjpcIitwYWQoTWF0aC5mbG9vcihNYXRoLmFicyhfbygpKSU2MCksMil9LFM6ZnVuY3Rpb24gUygpe3JldHVybltcInRoXCIsXCJzdFwiLFwibmRcIixcInJkXCJdW19kKCklMTA+Mz8wOihfZCgpJTEwMC1fZCgpJTEwIT0xMCkqX2QoKSUxMF19LFc6ZnVuY3Rpb24gVygpe3JldHVybiBfVygpfSxXVzpmdW5jdGlvbiBXVygpe3JldHVybiBwYWQoX1coKSl9LE46ZnVuY3Rpb24gTigpe3JldHVybiBfTigpfX07cmV0dXJuIG1hc2sucmVwbGFjZSh0b2tlbixmdW5jdGlvbihtYXRjaCl7aWYobWF0Y2ggaW4gZmxhZ3Mpe3JldHVybiBmbGFnc1ttYXRjaF0oKX1yZXR1cm4gbWF0Y2guc2xpY2UoMSxtYXRjaC5sZW5ndGgtMSl9KX1leHBvcnQgdmFyIG1hc2tzPXtkZWZhdWx0OlwiZGRkIG1tbSBkZCB5eXl5IEhIOk1NOnNzXCIsc2hvcnREYXRlOlwibS9kL3l5XCIscGFkZGVkU2hvcnREYXRlOlwibW0vZGQveXl5eVwiLG1lZGl1bURhdGU6XCJtbW0gZCwgeXl5eVwiLGxvbmdEYXRlOlwibW1tbSBkLCB5eXl5XCIsZnVsbERhdGU6XCJkZGRkLCBtbW1tIGQsIHl5eXlcIixzaG9ydFRpbWU6XCJoOk1NIFRUXCIsbWVkaXVtVGltZTpcImg6TU06c3MgVFRcIixsb25nVGltZTpcImg6TU06c3MgVFQgWlwiLGlzb0RhdGU6XCJ5eXl5LW1tLWRkXCIsaXNvVGltZTpcIkhIOk1NOnNzXCIsaXNvRGF0ZVRpbWU6XCJ5eXl5LW1tLWRkJ1QnSEg6TU06c3NvXCIsaXNvVXRjRGF0ZVRpbWU6XCJVVEM6eXl5eS1tbS1kZCdUJ0hIOk1NOnNzJ1onXCIsZXhwaXJlc0hlYWRlckZvcm1hdDpcImRkZCwgZGQgbW1tIHl5eXkgSEg6TU06c3MgWlwifTtleHBvcnQgdmFyIGkxOG49e2RheU5hbWVzOltcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiLFwiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl0sbW9udGhOYW1lczpbXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCIsXCJKYW51YXJ5XCIsXCJGZWJydWFyeVwiLFwiTWFyY2hcIixcIkFwcmlsXCIsXCJNYXlcIixcIkp1bmVcIixcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIl0sdGltZU5hbWVzOltcImFcIixcInBcIixcImFtXCIsXCJwbVwiLFwiQVwiLFwiUFwiLFwiQU1cIixcIlBNXCJdfTt2YXIgcGFkPWZ1bmN0aW9uIHBhZCh2YWwpe3ZhciBsZW49YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOjI7cmV0dXJuIFN0cmluZyh2YWwpLnBhZFN0YXJ0KGxlbixcIjBcIil9O3ZhciBnZXREYXlOYW1lPWZ1bmN0aW9uIGdldERheU5hbWUoX3JlZil7dmFyIHk9X3JlZi55LG09X3JlZi5tLGQ9X3JlZi5kLF89X3JlZi5fLGRheU5hbWU9X3JlZi5kYXlOYW1lLF9yZWYkc2hvcnQ9X3JlZltcInNob3J0XCJdLF9zaG9ydD1fcmVmJHNob3J0PT09dm9pZCAwP2ZhbHNlOl9yZWYkc2hvcnQ7dmFyIHRvZGF5PW5ldyBEYXRlO3ZhciB5ZXN0ZXJkYXk9bmV3IERhdGU7eWVzdGVyZGF5LnNldERhdGUoeWVzdGVyZGF5W18rXCJEYXRlXCJdKCktMSk7dmFyIHRvbW9ycm93PW5ldyBEYXRlO3RvbW9ycm93LnNldERhdGUodG9tb3Jyb3dbXytcIkRhdGVcIl0oKSsxKTt2YXIgdG9kYXlfZD1mdW5jdGlvbiB0b2RheV9kKCl7cmV0dXJuIHRvZGF5W18rXCJEYXRlXCJdKCl9O3ZhciB0b2RheV9tPWZ1bmN0aW9uIHRvZGF5X20oKXtyZXR1cm4gdG9kYXlbXytcIk1vbnRoXCJdKCl9O3ZhciB0b2RheV95PWZ1bmN0aW9uIHRvZGF5X3koKXtyZXR1cm4gdG9kYXlbXytcIkZ1bGxZZWFyXCJdKCl9O3ZhciB5ZXN0ZXJkYXlfZD1mdW5jdGlvbiB5ZXN0ZXJkYXlfZCgpe3JldHVybiB5ZXN0ZXJkYXlbXytcIkRhdGVcIl0oKX07dmFyIHllc3RlcmRheV9tPWZ1bmN0aW9uIHllc3RlcmRheV9tKCl7cmV0dXJuIHllc3RlcmRheVtfK1wiTW9udGhcIl0oKX07dmFyIHllc3RlcmRheV95PWZ1bmN0aW9uIHllc3RlcmRheV95KCl7cmV0dXJuIHllc3RlcmRheVtfK1wiRnVsbFllYXJcIl0oKX07dmFyIHRvbW9ycm93X2Q9ZnVuY3Rpb24gdG9tb3Jyb3dfZCgpe3JldHVybiB0b21vcnJvd1tfK1wiRGF0ZVwiXSgpfTt2YXIgdG9tb3Jyb3dfbT1mdW5jdGlvbiB0b21vcnJvd19tKCl7cmV0dXJuIHRvbW9ycm93W18rXCJNb250aFwiXSgpfTt2YXIgdG9tb3Jyb3dfeT1mdW5jdGlvbiB0b21vcnJvd195KCl7cmV0dXJuIHRvbW9ycm93W18rXCJGdWxsWWVhclwiXSgpfTtpZih0b2RheV95KCk9PT15JiZ0b2RheV9tKCk9PT1tJiZ0b2RheV9kKCk9PT1kKXtyZXR1cm4gX3Nob3J0P1wiVGR5XCI6XCJUb2RheVwifWVsc2UgaWYoeWVzdGVyZGF5X3koKT09PXkmJnllc3RlcmRheV9tKCk9PT1tJiZ5ZXN0ZXJkYXlfZCgpPT09ZCl7cmV0dXJuIF9zaG9ydD9cIllzZFwiOlwiWWVzdGVyZGF5XCJ9ZWxzZSBpZih0b21vcnJvd195KCk9PT15JiZ0b21vcnJvd19tKCk9PT1tJiZ0b21vcnJvd19kKCk9PT1kKXtyZXR1cm4gX3Nob3J0P1wiVG13XCI6XCJUb21vcnJvd1wifXJldHVybiBkYXlOYW1lfTt2YXIgZ2V0V2Vlaz1mdW5jdGlvbiBnZXRXZWVrKGRhdGUpe3ZhciB0YXJnZXRUaHVyc2RheT1uZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksZGF0ZS5nZXRNb250aCgpLGRhdGUuZ2V0RGF0ZSgpKTt0YXJnZXRUaHVyc2RheS5zZXREYXRlKHRhcmdldFRodXJzZGF5LmdldERhdGUoKS0odGFyZ2V0VGh1cnNkYXkuZ2V0RGF5KCkrNiklNyszKTt2YXIgZmlyc3RUaHVyc2RheT1uZXcgRGF0ZSh0YXJnZXRUaHVyc2RheS5nZXRGdWxsWWVhcigpLDAsNCk7Zmlyc3RUaHVyc2RheS5zZXREYXRlKGZpcnN0VGh1cnNkYXkuZ2V0RGF0ZSgpLShmaXJzdFRodXJzZGF5LmdldERheSgpKzYpJTcrMyk7dmFyIGRzPXRhcmdldFRodXJzZGF5LmdldFRpbWV6b25lT2Zmc2V0KCktZmlyc3RUaHVyc2RheS5nZXRUaW1lem9uZU9mZnNldCgpO3RhcmdldFRodXJzZGF5LnNldEhvdXJzKHRhcmdldFRodXJzZGF5LmdldEhvdXJzKCktZHMpO3ZhciB3ZWVrRGlmZj0odGFyZ2V0VGh1cnNkYXktZmlyc3RUaHVyc2RheSkvKDg2NGU1KjcpO3JldHVybiAxK01hdGguZmxvb3Iod2Vla0RpZmYpfTt2YXIgZ2V0RGF5T2ZXZWVrPWZ1bmN0aW9uIGdldERheU9mV2VlayhkYXRlKXt2YXIgZG93PWRhdGUuZ2V0RGF5KCk7aWYoZG93PT09MCl7ZG93PTd9cmV0dXJuIGRvd307ZXhwb3J0IHZhciBmb3JtYXRUaW1lem9uZT1mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShkYXRlKXtyZXR1cm4oU3RyaW5nKGRhdGUpLm1hdGNoKHRpbWV6b25lKXx8W1wiXCJdKS5wb3AoKS5yZXBsYWNlKHRpbWV6b25lQ2xpcCxcIlwiKS5yZXBsYWNlKC9HTVRcXCswMDAwL2csXCJVVENcIil9OyIsImltcG9ydCBkYXRlRm9ybWF0IGZyb20gJ2RhdGVmb3JtYXQnO1xuXG5jb25zdCBMT0dfVElNRV9GT1JNQVQgPSAneXl5eS9tbS9kZCBISDpNTTpzcy5sJztcblxuLy8gV3JpdGVzIHRoZSBnaXZlbiB0ZXh0IHRvIHRoZSBjb25zb2xlLCB3aXRoICdKUzogJyBwcmVwZW5kZWQgKHRvIGRpc3Rpbmd1aXNoXG4vLyBmcm9tIGxvZ3MgaW4gdGhlIFdBU00gbW9kdWxlKVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnNvbGVMb2cocykge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgY29uc29sZS5sb2coJygnICsgZGF0ZUZvcm1hdChub3csIExPR19USU1FX0ZPUk1BVCkgKyAnKSBKUzogJyArIHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVPYmoobykge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG8pKTtcbn1cblxuY29uc3QgdGltZW91dElkRm9yRnVuYyA9IG5ldyBNYXA8VGltZXJIYW5kbGVyLCBudW1iZXI+KCk7XG5cbi8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG9ubHkgY2FsbHMgZnVuYyBpZiB0aGVyZSBoYXZlXG4vLyBiZWVuIG5vIGNhbGxzIHRvIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBpbiBkZWxheSBtaWxsaXNlY29uZHMuXG4vLyBVc2VmdWwgZm9yIHByZXZlbnRpbmcgZXhjZXNzaXZlIGNhbGxzIGZyb20gZXZlbnQgaGFuZGxlcnMgKGUuZy4gbm90IGRyYXdpbmcgb24gZXZlcnkgcmVzaXplIGV2ZW50KVxuZXhwb3J0IGZ1bmN0aW9uIGxpbWl0ZXIoZnVuYzogVGltZXJIYW5kbGVyLCBkZWxheTogbnVtYmVyKSB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSB0aW1lb3V0SWRGb3JGdW5jLmdldChmdW5jKTtcbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVvdXRJZEZvckZ1bmMuc2V0KGZ1bmMsIHNldFRpbWVvdXQoZnVuYywgZGVsYXkpKTtcbiAgICB9O1xufSIsImltcG9ydCB7UmVjdH0gZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IHtjb25zb2xlTG9nfSBmcm9tICcuL3V0aWwnO1xuXG4vLyBDb25zdGFudCBmb3IgdGhlIHNpemUgb2YgYSB0aWxlIGluIHRoZSBzcHJpdGVzaGVldFxuZXhwb3J0IGNvbnN0IFRJTEVfU0laRSA9IDEwO1xuXG4vLyBDb25zdGFudCBmb3IgdGhlIGhlaWdodCBvZiBhIHJvdyBpbiB0aGUgc3ByaXRlc2hlZXRcbmV4cG9ydCBjb25zdCBST1dfSEVJR0hUID0gVElMRV9TSVpFO1xuXG5leHBvcnQgY29uc3QgU1BSSVRFUyA9IHtcbiAgICBUSUxFUzoge1xuICAgICAgICBFTVBUWToge3g6IDAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICAxOiB7eDogMTAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICAyOiB7eDogMjAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICAzOiB7eDogMzAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICA0OiB7eDogNDAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICA1OiB7eDogNTAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICA2OiB7eDogNjAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICA3OiB7eDogNzAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICA4OiB7eDogODAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICBNSU5FOiB7eDogOTAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICBISURERU46IHt4OiAxMDAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0LFxuICAgICAgICBGTEFHOiB7eDogMTEwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgQ0xPU0U6IHt4OiAxMjAsIHk6IDAsIHc6IFRJTEVfU0laRSwgaDogVElMRV9TSVpFfSBhcyBSZWN0XG4gICAgfSxcblxuICAgIE1PREFMOiB7XG4gICAgICAgIEJBQ0s6IHt4OiAwLCB5OiA5MCwgdzogMjQsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIEJBQ0tfSE9WRVJFRDoge3g6IDI0LCB5OiA5MCwgdzogMjQsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3RcbiAgICB9LFxuXG4gICAgTUFJTl9NRU5VOiB7XG4gICAgICAgIFRJVExFOiB7eDogMCwgeTogMTAsIHc6IDk1LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBFQVNZOiB7eDogMCwgeTogMjAsIHc6IDI2LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBFQVNZX0hPVkVSRUQ6IHt4OiAyNiwgeTogMjAsIHc6IDI2LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBNRURJVU06IHt4OiAwLCB5OiAzMCwgdzogMzUsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIE1FRElVTV9IT1ZFUkVEOiB7eDogMzUsIHk6IDMwLCB3OiAzMCwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgSEFSRDoge3g6IDAsIHk6IDQwLCB3OiAyNSwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgSEFSRF9IT1ZFUkVEOiB7eDogMjUsIHk6IDQwLCB3OiAyNiwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgQ1VTVE9NOiB7eDogMCwgeTogNTAsIHc6IDM4LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBDVVNUT01fSE9WRVJFRDoge3g6IDM4LCB5OiA1MCwgdzogMjYsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIElORklOSVRFOiB7eDogMCwgeTogNjAsIHc6IDQzLCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBJTkZJTklURV9IT1ZFUkVEOiB7eDogNDMsIHk6IDYwLCB3OiA0MywgaDogUk9XX0hFSUdIVH0gYXMgUmVjdFxuICAgIH0sXG5cbiAgICBSRVRSWV9NT0RBTDoge1xuICAgICAgICBUSVRMRToge3g6IDAsIHk6IDcwLCB3OiA0NSwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgUkVUUlk6IHt4OiAwLCB5OiA4MCwgdzogMzAsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIFJFVFJZX0hPVkVSRUQ6IHt4OiAzMCwgeTogODAsIHc6IDMwLCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgIH0sXG5cbiAgICBTVUNDRVNTX01PREFMOiB7XG4gICAgICAgIFRJVExFOiB7eDogMCwgeTogMTAwLCB3OiA1MiwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgUkVTRVQ6IHt4OiAwLCB5OiAxMTAsIHc6IDUzLCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBSRVNFVF9IT1ZFUkVEOiB7eDogNTMsIHk6IDExMCwgdzogNTMsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgfVxufTtcblxuLy8gVGhlIGNhbnZhc1xuZXhwb3J0IGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcblxuLy8gVGhlIGdyYXBoaWNhbCBjb250ZXh0IHRvIGRyYXcgdG9cbmV4cG9ydCBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuY29uc3Qgc3ByaXRlc2hlZXQgPSBuZXcgSW1hZ2UoKTtcblxuZXhwb3J0IGNvbnN0IHNwcml0ZXNoZWV0TG9hZGVkID0gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XG4gICAgc3ByaXRlc2hlZXQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgICAgY29uc29sZUxvZygnRmluaXNoZWQgbG9hZGluZyBzcHJpdGVzaGVldCcpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG59KTtcblxuc3ByaXRlc2hlZXQuc3JjID0gbmV3IFVSTCgnLi4vYXNzZXRzL3Nwcml0ZXNoZWV0LnBuZycsIGltcG9ydC5tZXRhLnVybCkudG9TdHJpbmcoKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsZWFyKHJlY3Q/OiBSZWN0KSB7XG4gICAgaWYgKCFyZWN0KSB7XG4gICAgICAgIHJlY3QgPSB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHc6IGNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgIGg6IGNhbnZhcy5oZWlnaHRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY3R4LmNsZWFyUmVjdChyZWN0LngsIHJlY3QueSwgcmVjdC53LCByZWN0LmgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJhd1Nwcml0ZShzcHJpdGU6IFJlY3QsIGRyYXdSZWN0OiBSZWN0KSB7XG4gICAgY3R4LmRyYXdJbWFnZShzcHJpdGVzaGVldCxcbiAgICAgICAgc3ByaXRlLngsIHNwcml0ZS55LCBzcHJpdGUudywgc3ByaXRlLmgsXG4gICAgICAgIGRyYXdSZWN0LngsIGRyYXdSZWN0LnksIGRyYXdSZWN0LncsIGRyYXdSZWN0LmgpO1xufVxuIiwiaW1wb3J0IHtQb3MsIFJlY3QsIFNpemV9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgRXZlbnRNYW5hZ2VyIGZyb20gJy4uL2V2ZW50LW1hbmFnZXInO1xuaW1wb3J0IHtjYW52YXN9IGZyb20gJy4uL2RyYXcnO1xuXG5pbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4uL3V0aWwnO1xuXG5mdW5jdGlvbiBjb25zb2xlTG9nKHMpIHtcbiAgICBVdGlsLmNvbnNvbGVMb2coJyhjYW1lcmEpICcgKyBzKTtcbn1cblxuLy8gdG9kbyBsaW1pdCBwcmVzc2VzICh0byBwcmV2ZW50IHNwYW0pXG5cbi8vIENvbnN0YW50IGZvciB0aGUgZHJhdyBzaXplIG9mIGEgdGlsZVxuZXhwb3J0IGNvbnN0IFRJTEVfRFJBV19TSVpFID0gMzA7XG5cbi8vIENvbnN0YW50IGZvciB0aGUgbWluaW11bSBzY2FsZVxuZXhwb3J0IGNvbnN0IE1JTl9TQ0FMRSA9IDAuNTtcbi8vIENvbnN0YW50IGZvciB0aGUgbWF4aW11bSBzY2FsZVxuZXhwb3J0IGNvbnN0IE1BWF9TQ0FMRSA9IDQuMDtcblxuZXhwb3J0IGNvbnN0IE1PVVNFX1dIRUVMX1NDQUxFID0gMC4wMDI1O1xuXG4vLyBDb25zdGFudCBmb3IgaG93IGxvbmcgYSBwb2ludGVyIG5lZWRzIHRvIGJlIHByZXNzZWQgdG8gYmUgYSBcImxvbmcgcHJlc3NcIiwgaW5cbi8vIG1pbGxpc2Vjb25kc1xuZXhwb3J0IGNvbnN0IExPTkdfUFJFU1NfREVMQVlfTVMgPSAyMDA7XG5cbmV4cG9ydCB0eXBlIE1vdmVFdmVudCA9IHtcbiAgICB0cmFuc2xhdGlvbjogUG9zXG4gICAgc2NhbGU6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBQcmVzc0V2ZW50ID0ge1xuICAgIHBvczogUG9zXG4gICAgYnV0dG9uOiBudW1iZXJcbn1cblxuaW50ZXJmYWNlIENhbWVyYUV2ZW50TWFwIHtcbiAgICAvLyBBIG1vdmUgZXZlbnQgaW5jbHVkZXMgem9vbWluZyBpbiBvciBvdXRcbiAgICAnbW92ZSc6IE1vdmVFdmVudFxuICAgICdwcmVzcyc6IFByZXNzRXZlbnRcbiAgICAnbG9uZ3ByZXNzJzogUHJlc3NFdmVudFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW1lcmEgZXh0ZW5kcyBFdmVudE1hbmFnZXI8Q2FtZXJhRXZlbnRNYXA+IHtcbiAgICBwcml2YXRlIGZpZWxkU2l6ZTogU2l6ZSB8IHVuZGVmaW5lZDtcblxuICAgICN0cmFuc2xhdGlvbjogUG9zO1xuICAgICNzY2FsZTogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSBwb2ludGVyRG93bkV2ZW50IDoge1xuICAgICAgICB0b3VjaGVzOiBBcnJheTxQb2ludGVyRXZlbnQ+XG4gICAgICAgIG1vdmVPclNjYWxlOiBib29sZWFuLFxuICAgICAgICBkaXN0YW5jZTogbnVtYmVyIHwgbnVsbCxcbiAgICAgICAgbG9uZ1ByZXNzVGltZW91dDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4gfCBudWxsXG4gICAgfTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlV2hlZWw7XG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVQb2ludGVyRG93bjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVBvaW50ZXJNb3ZlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlUG9pbnRlckNhbmNlbDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVBvaW50ZXJPdXQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVQb2ludGVyVXA7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWVsZFNpemU/OiBTaXplKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5maWVsZFNpemUgPSBmaWVsZFNpemU7XG5cbiAgICAgICAgLy8gUmVzZXQgdGhlIGNhbWVyYVxuICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50ID0ge1xuICAgICAgICAgICAgdG91Y2hlczogW10sXG4gICAgICAgICAgICBtb3ZlT3JTY2FsZTogZmFsc2UsXG4gICAgICAgICAgICBkaXN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgIGxvbmdQcmVzc1RpbWVvdXQ6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZVdoZWVsID0gKGV2ZW50IDogV2hlZWxFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gQ2hhbmdlIHRoZSBjYW1lcmEncyBzY2FsZVxuICAgICAgICAgICAgY29uc3QgbmV3U2NhbGUgPSB0aGlzLiNzY2FsZSArIChldmVudC5kZWx0YVkgKiAtTU9VU0VfV0hFRUxfU0NBTEUpO1xuICAgICAgICAgICAgLy8gT25seSBjaGFuZ2UgdGhlIHNjYWxlIGlmIGl0J3MgdmFsaWRcbiAgICAgICAgICAgIGlmIChuZXdTY2FsZSA+IE1JTl9TQ0FMRSAmJiBuZXdTY2FsZSA8IE1BWF9TQ0FMRSkge1xuICAgICAgICAgICAgICAgIHRoaXMuI3NjYWxlID0gbmV3U2NhbGU7XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxFdmVudExpc3RlbmVycygnbW92ZScsIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb246IHRoaXMuI3RyYW5zbGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogdGhpcy4jc2NhbGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRvZG8gem9vbSBhdCBtb3VzZSBwb3NpdGlvblxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlckRvd24gPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgcG9pbnRlciBldmVudFxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygnZmlyc3QgcG9pbnRlcmRvd24nKTtcbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHRpbWVvdXQgZm9yIGxvbmcgcHJlc3Nlc1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5sb25nUHJlc3NUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSB3YXMgYSBwb2ludGVyIGRvd24gZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50Lm1vdmVPclNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZUxvZygnbG9uZ3ByZXNzIHRpbWVvdXQnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ2xvbmdwcmVzcycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogdGhpcy50b1dvcmxkUG9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzWzBdLmNsaWVudFgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSksXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b246IGV2ZW50LmJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgdG91Y2hlc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgIH0sIExPTkdfUFJFU1NfREVMQVlfTVMpO1xuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBvdGhlciBmaWVsZHNcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQuZGlzdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlTG9nKCdhbm90aGVyIHBvaW50ZXJkb3duJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFkZCB0aGUgcG9pbnRlciBldmVudFxuICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMucHVzaChldmVudCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyTW92ZSA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBvbmx5IG9uZSB0b3VjaCBldmVudFxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYW1vdW50IHRoZSBwb2ludGVyIG1vdmVkXG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGFYID0gZXZlbnQuY2xpZW50WCAtXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGFZID0gZXZlbnQuY2xpZW50WSAtXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgcmVnaXN0ZXIgYXMgYSBtb3ZlT3JTY2FsZSBldmVudCBpZiB0aGUgcG9pbnRlciBvbmx5IG1vdmVkIGhhbGYgYSB0aWxlIChub1xuICAgICAgICAgICAgICAgIC8vIHNjYWxpbmcpXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUgJiZcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoZGVsdGFYKSA8IFRJTEVfRFJBV19TSVpFIC8gNCAmJlxuICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyhkZWx0YVkpIDwgVElMRV9EUkFXX1NJWkUgLyA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVHJhbnNsYXRlIHRoZSBjYW1lcmFcbiAgICAgICAgICAgICAgICB0aGlzLiN0cmFuc2xhdGlvbi54ICs9IGRlbHRhWDtcbiAgICAgICAgICAgICAgICB0aGlzLiN0cmFuc2xhdGlvbi55ICs9IGRlbHRhWTtcblxuICAgICAgICAgICAgICAgIC8vIFJlc3RyaWN0IHRoZSBjYW1lcmEgaWYgdGhlIGZpZWxkIGlzIGZpeGVkIHNpemVcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWVsZFNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXhYID0gKHRoaXMuZmllbGRTaXplLncgKiBUSUxFX0RSQVdfU0laRSAqIHRoaXMuI3NjYWxlKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heFkgPSAodGhpcy5maWVsZFNpemUuaCAqIFRJTEVfRFJBV19TSVpFICogdGhpcy4jc2NhbGUpIC8gMjtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLiN0cmFuc2xhdGlvbi54ID0gTWF0aC5taW4odGhpcy4jdHJhbnNsYXRpb24ueCwgbWF4WCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3RyYW5zbGF0aW9uLnggPSBNYXRoLm1heCh0aGlzLiN0cmFuc2xhdGlvbi54LCAtbWF4WCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3RyYW5zbGF0aW9uLnkgPSBNYXRoLm1pbih0aGlzLiN0cmFuc2xhdGlvbi55LCBtYXhZKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jdHJhbnNsYXRpb24ueSA9IE1hdGgubWF4KHRoaXMuI3RyYW5zbGF0aW9uLnksIC1tYXhZKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG11bHRpcGxlLCB0aGlzIGlzIGEgcGluY2ggZXZlbnRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0d28gdG91Y2ggZXZlbnRzICh3ZSBvbmx5IGNhcmUgYWJvdXQgdGhlIGZpcnN0IHR3bywgZXZlbiBpZlxuICAgICAgICAgICAgICAgIC8vIHRoZSB1c2VyIGhhcyBtb3JlIHRoYW4gMiBmaW5nZXJzIHByZXNzZWQgb24gdGhlIHNjcmVlbilcbiAgICAgICAgICAgICAgICBjb25zdCB0b3VjaDAgPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3VjaDEgPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1sxXTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIHRvdWNoIGV2ZW50c1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5oeXBvdChcbiAgICAgICAgICAgICAgICAgICAgdG91Y2gwLmNsaWVudFggLSB0b3VjaDEuY2xpZW50WCxcbiAgICAgICAgICAgICAgICAgICAgdG91Y2gwLmNsaWVudFkgLSB0b3VjaDEuY2xpZW50WSk7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiBhIHByZXZpb3VzIGRpc3RhbmNlIGhhcyBiZWVuIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wb2ludGVyRG93bkV2ZW50LmRpc3RhbmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBuZXcgc2NhbGVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jc2NhbGUgKz0gKChkaXN0YW5jZSAtIHRoaXMucG9pbnRlckRvd25FdmVudC5kaXN0YW5jZSkgKiAwLjAwNSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzdHJpY3QgdGhlIHNjYWxlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3NjYWxlID0gTWF0aC5tYXgodGhpcy4jc2NhbGUsIE1JTl9TQ0FMRSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3NjYWxlID0gTWF0aC5taW4odGhpcy4jc2NhbGUsIE1BWF9TQ0FMRSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdG9kbyB6b29tIGF0IHRvdWNoIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBkaXN0YW5jZVxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIHBvaW50ZXIgYXMgaGF2aW5nIG1vdmVkIChzbyB0aGUgdXNlciBkb2Vzbid0IGZsYWcgc29tZXRoaW5nIGJ5XG4gICAgICAgICAgICAvLyBkcmFnZ2luZylcbiAgICAgICAgICAgIGlmICghdGhpcy5wb2ludGVyRG93bkV2ZW50Lm1vdmVPclNjYWxlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygncG9pbnRlciBtb3ZlZCwgbm90IHByZXNzIGV2ZW50Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50Lm1vdmVPclNjYWxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wb2ludGVyRG93bkV2ZW50LmxvbmdQcmVzc1RpbWVvdXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGV2ZW50XG4gICAgICAgICAgICBjb25zdCB0b3VjaEluZGV4ID0gdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMuZmluZEluZGV4KFxuICAgICAgICAgICAgICAgIGUgPT4gZS5wb2ludGVySWQgPT09IGV2ZW50LnBvaW50ZXJJZCk7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1t0b3VjaEluZGV4XSA9IGV2ZW50O1xuXG4gICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgIHRoaXMuY2FsbEV2ZW50TGlzdGVuZXJzKCdtb3ZlJywge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uOiB0aGlzLiN0cmFuc2xhdGlvbixcbiAgICAgICAgICAgICAgICBzY2FsZTogdGhpcy4jc2NhbGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlckNhbmNlbCA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlTG9nKCdwb2ludGVyY2FuY2VsJyk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB0aGlzLmhhbmRsZVBvaW50ZXJPdXQgPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSB3YXMgYSBwb2ludGVyIGRvd24gZXZlbnRcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIHBvaW50ZXJzXG4gICAgICAgICAgICBpZiAodGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coJ3BvaW50ZXJvdXQ6IG9uZSBvZiBtdWx0aXBsZScpO1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgcG9pbnRlcidzIHRvdWNoXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMgPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgIGUgPT4gZS5wb2ludGVySWQgIT09IGV2ZW50LnBvaW50ZXJJZCk7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBkaXN0YW5jZVxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5kaXN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coJ3BvaW50ZXJvdXQ6IG5vIHByZXNzIGV2ZW50Jyk7XG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGV2ZW50XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucG9pbnRlckRvd25FdmVudC5sb25nUHJlc3NUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlclVwID0gKGV2ZW50OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlcmUgd2FzIGEgcG9pbnRlciBkb3duIGV2ZW50XG4gICAgICAgICAgICBpZiAodGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgcG9pbnRlcnNcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygncG9pbnRlcnVwOiBvbmUgb2YgbXVsdGlwbGUnKTtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHBvaW50ZXIncyB0b3VjaFxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzID0gdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICBlID0+IGUucG9pbnRlcklkICE9PSBldmVudC5wb2ludGVySWQpO1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZGlzdGFuY2VcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQuZGlzdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIHBvaW50ZXIgZGlkbid0IG1vdmVPclNjYWxlXG4gICAgICAgICAgICBpZiAoIXRoaXMucG9pbnRlckRvd25FdmVudC5tb3ZlT3JTY2FsZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coJ3BvaW50ZXJ1cDogbm8gbW92ZW1lbnQgb3Igc2NhbGluZywgcHJlc3MgZXZlbnQnKTtcbiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxFdmVudExpc3RlbmVycygncHJlc3MnLCB7XG4gICAgICAgICAgICAgICAgICAgIHBvczogdGhpcy50b1dvcmxkUG9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzWzBdLmNsaWVudFkpLFxuICAgICAgICAgICAgICAgICAgICBidXR0b246IGV2ZW50LmJ1dHRvblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlTG9nKCdwb2ludGVydXAnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGV2ZW50XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wb2ludGVyRG93bkV2ZW50LmxvbmdQcmVzc1RpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMgPSBbXTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtaWRkbGVUcmFuc2xhdGlvbigpOiBQb3Mge1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGZpZWxkIHNpemUsIHRoZSBtaWRkbGUgaXMganVzdCB0aGUgbWlkZGxlIG9mIHRoZSBjYW52YXNcbiAgICAgICAgaWYgKHRoaXMuZmllbGRTaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeDogY2FudmFzLndpZHRoIC8gMixcbiAgICAgICAgICAgICAgICB5OiBjYW52YXMuaGVpZ2h0IC8gMlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogKChjYW52YXMud2lkdGggLyAyKSAtXG4gICAgICAgICAgICAgICAgKHRoaXMuc2NhbGUgKiAoKHRoaXMuZmllbGRTaXplLncgKiBUSUxFX0RSQVdfU0laRSkgLyAyKSkpLFxuICAgICAgICAgICAgeTogKChjYW52YXMuaGVpZ2h0IC8gMikgLVxuICAgICAgICAgICAgICAgICh0aGlzLnNjYWxlICogKCh0aGlzLmZpZWxkU2l6ZS5oICogVElMRV9EUkFXX1NJWkUpIC8gMikpKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgdHJhbnNsYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiN0cmFuc2xhdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHNjYWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jc2NhbGU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCB2aXNpYmxlVGlsZXMoKTogUmVjdCB7XG4gICAgICAgIGNvbnN0IGNhbnZhc1JlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgY29uc3QgdGlsZVNpemUgPSBUSUxFX0RSQVdfU0laRSAqIHRoaXMuc2NhbGU7XG5cbiAgICAgICAgY29uc3QgbWluID0gdGhpcy50b1dvcmxkUG9zKGNhbnZhc1JlY3QubGVmdCAtIHRpbGVTaXplLCBjYW52YXNSZWN0LnRvcCAtIHRpbGVTaXplKTtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy50b1dvcmxkUG9zKGNhbnZhc1JlY3QucmlnaHQgKyB0aWxlU2l6ZSwgY2FudmFzUmVjdC5ib3R0b20gKyB0aWxlU2l6ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBtaW4ueCxcbiAgICAgICAgICAgIHk6IG1pbi55LFxuICAgICAgICAgICAgdzogbWF4LnggLSBtaW4ueCxcbiAgICAgICAgICAgIGg6IG1heC55IC0gbWluLnksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHRvQ2FudmFzUG9zKHgsIHk6IG51bWJlcik6IFBvcyB7XG4gICAgICAgIGNvbnN0IG1pZGRsZVRyYW5zbGF0ZSA9IHRoaXMubWlkZGxlVHJhbnNsYXRpb24oKTtcbiAgICAgICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IG1pZGRsZVRyYW5zbGF0ZS54ICsgcmVjdC5sZWZ0ICsgdGhpcy50cmFuc2xhdGlvbi54ICtcbiAgICAgICAgICAgICAgICAoKHggKiBUSUxFX0RSQVdfU0laRSkgKiB0aGlzLnNjYWxlKSxcbiAgICAgICAgICAgIC8vIFRyYW5zbGF0ZSB0byB0aGUgY2VudGVyIG9mIHRoZSBjYW52YXNcbiAgICAgICAgICAgIHk6IG1pZGRsZVRyYW5zbGF0ZS55ICsgcmVjdC50b3AgKyB0aGlzLnRyYW5zbGF0aW9uLnkgK1xuICAgICAgICAgICAgICAgICgoeSAqIFRJTEVfRFJBV19TSVpFKSAqIHRoaXMuc2NhbGUpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyB0b1dvcmxkUG9zKHgsIHk6IG51bWJlcik6IFBvcyB7XG4gICAgICAgIGNvbnN0IG1pZGRsZVRyYW5zbGF0ZSA9IHRoaXMubWlkZGxlVHJhbnNsYXRpb24oKTtcbiAgICAgICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IE1hdGguZmxvb3IoKCh4IC0gcmVjdC5sZWZ0IC0gbWlkZGxlVHJhbnNsYXRlLnggLVxuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueCkgLyB0aGlzLnNjYWxlKSAvIFRJTEVfRFJBV19TSVpFKSxcbiAgICAgICAgICAgIHk6IE1hdGguZmxvb3IoKCh5IC0gcmVjdC50b3AgLSBtaWRkbGVUcmFuc2xhdGUueSAtXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGlvbi55KSAvIHRoaXMuc2NhbGUpIC8gVElMRV9EUkFXX1NJWkUpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFJlc2V0IHRoZSBjYW1lcmEgdG8gdGhlIG1pZGRsZSBvZiB0aGUgZmllbGRcbiAgICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgICAgIC8vIElmIHRoZSBmaWVsZCBzaXplIGlzIHNldFxuICAgICAgICBpZiAodGhpcy5maWVsZFNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gRml0IHRoZSBnYW1lIGluIHRoZSBjYW52YXNcbiAgICAgICAgICAgIHRoaXMuI3NjYWxlID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoIC8gKHRoaXMuZmllbGRTaXplLncgKiBUSUxFX0RSQVdfU0laRSAqIDEuMSksXG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCAvICh0aGlzLmZpZWxkU2l6ZS5oICogVElMRV9EUkFXX1NJWkUgKiAxLjEpKTtcbiAgICAgICAgICAgIC8vIFJlc3RyaWN0IHRoZSBzY2FsZVxuICAgICAgICAgICAgdGhpcy4jc2NhbGUgPSBNYXRoLm1heCh0aGlzLiNzY2FsZSwgTUlOX1NDQUxFKTtcbiAgICAgICAgICAgIHRoaXMuI3NjYWxlID0gTWF0aC5taW4odGhpcy4jc2NhbGUsIE1BWF9TQ0FMRSk7XG5cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSBzZXQgdGhlIHNjYWxlIHRvIGp1c3QgMVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4jc2NhbGUgPSAxLjA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNldCB0aGUgdHJhbnNsYXRpb25cbiAgICAgICAgdGhpcy4jdHJhbnNsYXRpb24gPSB7eDogMCwgeTogMH07XG4gICAgfVxuXG4gICAgcHVibGljIHJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLmhhbmRsZVdoZWVsKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmNhbmNlbCcsIHRoaXMuaGFuZGxlUG9pbnRlckNhbmNlbCk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyb3V0JywgdGhpcy5oYW5kbGVQb2ludGVyT3V0KTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHRoaXMuaGFuZGxlUG9pbnRlclVwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVyZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5oYW5kbGVXaGVlbCk7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlKTtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJjYW5jZWwnLCB0aGlzLmhhbmRsZVBvaW50ZXJDYW5jZWwpO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm91dCcsIHRoaXMuaGFuZGxlUG9pbnRlck91dCk7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCk7XG4gICAgfVxuXG59IiwiaW1wb3J0ICogYXMgVXRpbCBmcm9tICcuLi91dGlsJztcblxuLy8gQ3JlYXRlIHRoZSBXQVNNIHdlYiB3b3JrZXJcblV0aWwuY29uc29sZUxvZygnQ3JlYXRpbmcgV0FTTSB3b3JrZXInKTtcbmNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIobmV3IFVSTCgnLi93b3JrZXIudHMnLCBpbXBvcnQubWV0YS51cmwpKTtcblxudHlwZSBNZXNzYWdlPFQ+ID0ge1xuICAgIGNtZDogc3RyaW5nLFxuICAgIGlkOiBzdHJpbmcsXG4gICAgZGF0YTogVFxufVxuXG50eXBlIFJlc3BvbnNlTWVzc2FnZTxUPiA9IE1lc3NhZ2U8VD4gJiB7XG4gICAgc3VjY2VzczogYm9vbGVhblxufVxuXG5mdW5jdGlvbiBuZXdNZXNzYWdlPFQ+KGNtZDogc3RyaW5nLCBkYXRhOiBUKTogTWVzc2FnZTxUPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY21kLFxuICAgICAgICAvLyBXZSdyZSBhc3N1bWluZyB0aGUgY21kIG5hbWUgKyBjdXJyZW50IHRpbWUgaW4gbWlsbGlzZWNvbmRzIGlzIGEgZ29vZCBlbm91Z2ggSURcbiAgICAgICAgaWQ6IGNtZCArIERhdGUubm93KCksXG4gICAgICAgIGRhdGFcbiAgICB9O1xufVxuXG4vLyBBIG1hcCBvZiBwcm9taXNlcywgaW5kZXhlZCBieSBtZXNzYWdlIElEXG5jb25zdCBwcm9taXNlcyA9IG5ldyBNYXA8c3RyaW5nLCBbKGRhdGE6IHVua25vd24pID0+IHZvaWQsIChlcnI6IHVua25vd24pID0+IHZvaWRdPigpO1xuXG5VdGlsLmNvbnNvbGVMb2coJ1JlZ2lzdGVyaW5nIFdlYklPIGV2ZW50IGxpc3RlbmVyIGZvciBHbycpO1xud29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBlID0+IHtcbiAgICBpZiAoZS5kYXRhKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlOiBSZXNwb25zZU1lc3NhZ2U8dW5rbm93bj4gPSBlLmRhdGE7XG4gICAgICAgIGNvbnN0IFtyZXNvbHZlLCByZWplY3RdID0gcHJvbWlzZXMuZ2V0KHJlc3BvbnNlLmlkKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBVdGlsLmNvbnNvbGVMb2coJ0Vycm9yIHJlc3BvbnNlIGZvciBcXCcnICsgcmVzcG9uc2UuY21kICsgJ1xcJzogJyArIHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8vIFdoZXRoZXIgdGhlIHdvcmtlciBoYXMgYmVlbiBjb25uZWN0ZWRcbmV4cG9ydCBsZXQgd29ya2VyQ29ubmVjdGVkID0gZmFsc2U7XG5cbi8vIE1lc3NhZ2VzIHRoYXQgaGF2ZSBiZWVuIHBvc3RlZCB3aGlsZSB0aGUgd29ya2VyIGlzIGJlaW5nIGNyZWF0ZWRcbmNvbnN0IHF1ZXVlZE1lc3NhZ2VzOiBBcnJheTxNZXNzYWdlPHVua25vd24+PiA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gcG9zdE1lc3NhZ2U8VCwgUj4oY21kOiBzdHJpbmcsIGRhdGE/OiBULCBub1F1ZXVlPzogYm9vbGVhbik6IFByb21pc2U8Uj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IG1zZyA9IG5ld01lc3NhZ2UoY21kLCBkYXRhKTtcbiAgICAgICAgLy8gQWRkIHRoZSBwcm9taXNlXG4gICAgICAgIHByb21pc2VzLnNldChtc2cuaWQsIFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgICAgaWYgKCFub1F1ZXVlICYmICF3b3JrZXJDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIFV0aWwuY29uc29sZUxvZyhjbWQgKyAnIG1lc3NhZ2UgcmVjZWl2ZWQsIGJ1dCB3b3JrZXIgaGFzblxcJ3QgY29ubmVjdGVkIHlldC4gQWRkaW5nIHRvIHF1ZXVlJyk7XG4gICAgICAgICAgICBxdWV1ZWRNZXNzYWdlcy5wdXNoKG1zZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZW5kUGluZyh0aW1lb3V0OiBudW1iZXIpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBwaW5nUHJvbWlzZSA9IHBvc3RNZXNzYWdlKCdwaW5nJywgbnVsbCwgdHJ1ZSk7XG4gICAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gc2V0VGltZW91dChyLCB0aW1lb3V0KSk7XG5cbiAgICB0cnkge1xuICAgICAgICAvLyBBd2FpdCB0aGUgcGluZywgYW5kIGlmIGl0IHN1Y2NlZWRzXG4gICAgICAgIGF3YWl0IFByb21pc2UucmFjZShbcGluZ1Byb21pc2UsIHRpbWVvdXRQcm9taXNlXSk7XG4gICAgICAgIC8vIFNldCB0aGUgd29ya2VyIGFzIGNvbm5lY3RlZFxuICAgICAgICB3b3JrZXJDb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAvLyBQb3N0IHRoZSBxdWV1ZWQgbWVzc2FnZXMgdG8gdGhlIHdvcmtlclxuICAgICAgICBxdWV1ZWRNZXNzYWdlcy5mb3JFYWNoKChtc2cpID0+IHtcbiAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gQ2xlYXIgdGhlIHF1ZXVlXG4gICAgICAgIHF1ZXVlZE1lc3NhZ2VzLmxlbmd0aCA9IDA7XG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIC8vIElmIHRoZSB0aW1lb3V0IHByb21pc2UgcmVzb2x2ZWQgZmlyc3RcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmNvbnN0IE1BWF9QSU5HUyA9IDU7XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbmRQaW5nVW50aWxDb25uZWN0KCkge1xuICAgIGxldCBwaW5ncyA9IDA7XG4gICAgbGV0IHRpbWVvdXQgPSAxMDA7XG4gICAgd2hpbGUgKCF3b3JrZXJDb25uZWN0ZWQgJiYgcGluZ3MgPCBNQVhfUElOR1MpIHtcbiAgICAgICAgVXRpbC5jb25zb2xlTG9nKCdTZW5kaW5nIHBpbmcgd2l0aCB0aW1lb3V0ICcgKyB0aW1lb3V0ICsgJ21zJyk7XG4gICAgICAgIHBpbmdzKys7XG4gICAgICAgIGlmICghYXdhaXQgc2VuZFBpbmcodGltZW91dCkpIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSB0aW1lb3V0ICogMjtcbiAgICAgICAgICAgIFV0aWwuY29uc29sZUxvZygnUGluZyB0aW1lb3V0IHJlYWNoZWQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwaW5ncyA+PSBNQVhfUElOR1MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXggcGluZ3MgJyArIE1BWF9QSU5HUyArICcgcmVhY2hlZCwgYXNzdW1pbmcgV0FTTSBtb2R1bGUgaXMgbm90IGZ1bmN0aW9uYWwnKTtcbiAgICB9XG59XG5zZW5kUGluZ1VudGlsQ29ubmVjdCgpLnRoZW4oKCkgPT4ge1xuICAgIFV0aWwuY29uc29sZUxvZygnUmVzcG9uc2UgdG8gcGluZyByZWNlaXZlZCwgd29ya2VyIGNvbm5lY3RlZCcpO1xufSk7IiwiaW1wb3J0IHtwb3N0TWVzc2FnZX0gZnJvbSAnLi93b3JrZXItaGVscGVyJztcblxuaW1wb3J0IHtQb3MsIFJlY3R9IGZyb20gJy4uL2NvbW1vbic7XG5cbmV4cG9ydCB0eXBlIEluaXRSZXF1ZXN0RGF0YSA9IHtcbiAgICB3aWR0aDogbnVtYmVyLFxuICAgIGhlaWdodDogbnVtYmVyLFxuICAgIG1pbmVzOiBudW1iZXJcbn0gfCB7XG4gICAgbWluZURlbnNpdHk6IG51bWJlclxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChkYXRhOiBJbml0UmVxdWVzdERhdGEpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gcG9zdE1lc3NhZ2UoJ2luaXQnLCBkYXRhKTtcbn1cblxuZXhwb3J0IHR5cGUgQXBwZWFyYW5jZVJlcXVlc3REYXRhID0gUmVjdFxuXG5leHBvcnQgdHlwZSBBcHBlYXJhbmNlUmVzcG9uc2VEYXRhID0gQXJyYXk8QXJyYXk8c3RyaW5nPj5cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVhcmFuY2UoZGF0YTogQXBwZWFyYW5jZVJlcXVlc3REYXRhKTogUHJvbWlzZTxBcHBlYXJhbmNlUmVzcG9uc2VEYXRhPiB7XG4gICAgcmV0dXJuIHBvc3RNZXNzYWdlKCdhcHBlYXJhbmNlJywgZGF0YSk7XG59XG5cbmV4cG9ydCB0eXBlIFVuY292ZXJSZXF1ZXN0RGF0YSA9IFBvc1xuXG5leHBvcnQgdHlwZSBVbmNvdmVyUmVzcG9uc2VEYXRhID0ge1xuICAgIHN0YXRlOiBzdHJpbmcsXG4gICAgdGltZXI6IG51bWJlclxufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5jb3ZlcihkYXRhOiBVbmNvdmVyUmVxdWVzdERhdGEpOiBQcm9taXNlPFVuY292ZXJSZXNwb25zZURhdGE+IHtcbiAgICByZXR1cm4gcG9zdE1lc3NhZ2UoJ3VuY292ZXInLCBkYXRhKTtcbn1cblxuZXhwb3J0IHR5cGUgRmxhZ1JlcXVlc3REYXRhID0gUG9zXG5cbmV4cG9ydCBmdW5jdGlvbiBmbGFnKGRhdGE6IEZsYWdSZXF1ZXN0RGF0YSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBwb3N0TWVzc2FnZSgnZmxhZycsIGRhdGEpO1xufVxuIiwiaW1wb3J0IHtjYW52YXMsIGRyYXdTcHJpdGV9IGZyb20gJy4uL2RyYXcnO1xuaW1wb3J0IEV2ZW50TWFuYWdlciBmcm9tICcuLi9ldmVudC1tYW5hZ2VyJztcblxuaW1wb3J0IHtQb3MsIFJlY3R9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQge2Nsb25lT2JqfSBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0IHR5cGUgSGl0Ym94ID0gUmVjdFxuXG5leHBvcnQgdHlwZSBFbGVtZW50ID0ge1xuICAgIGlkOiBzdHJpbmdcbiAgICBzcHJpdGU6IFJlY3QsXG4gICAgaG92ZXJlZFNwcml0ZT86IFBvcyxcbiAgICBzY2FsZTogbnVtYmVyLFxuICAgIGludGVyYWN0YWJsZT86IGJvb2xlYW5cbn1cblxuY29uc3QgYmlnZ2VzdEVsZW1lbnRCeUZpZWxkID0gKGVsZW1lbnRzOiBBcnJheTxFbGVtZW50PiwgZmllbGQ6IHN0cmluZykgPT5cbiAgICBlbGVtZW50cy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+XG4gICAgICAgIHByZXYuc3ByaXRlW2ZpZWxkXSAqIHByZXYuc2NhbGUgPiBjdXJyLnNwcml0ZVtmaWVsZF0gKiBjdXJyLnNjYWxlID8gcHJldiA6IGN1cnIpO1xuXG5mdW5jdGlvbiBnZXRBYnNQb3MoeCwgeTogbnVtYmVyKSB7XG4gICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gW01hdGgucm91bmQoeCAtIHJlY3QubGVmdCksIE1hdGgucm91bmQoeSAtIHJlY3QudG9wKV07XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdCh4LCB5OiBudW1iZXIsIGhpdGJveDogSGl0Ym94KSB7XG4gICAgcmV0dXJuIHggPiBoaXRib3gueCAmJiB5ID4gaGl0Ym94LnkgJiZcbiAgICAgICAgeCA8IGhpdGJveC54ICsgaGl0Ym94LncgJiYgeSA8IGhpdGJveC55ICsgaGl0Ym94Lmg7XG59XG5cbmV4cG9ydCB0eXBlIEVsZW1lbnRQcmVzc0V2ZW50ID0ge1xuICAgIHByZXNzZWRFbGVtZW50OiBzdHJpbmdcbn1cblxuZXhwb3J0IHR5cGUgRWxlbWVudEhvdmVyZWRFdmVudCA9IHtcbiAgICBob3ZlcmVkRWxlbWVudDogc3RyaW5nIHwgbnVsbFxufVxuXG5pbnRlcmZhY2UgTWVudUV2ZW50TWFwIHtcbiAgICAncHJlc3MnOiBFbGVtZW50UHJlc3NFdmVudFxuICAgICdob3Zlcic6IEVsZW1lbnRIb3ZlcmVkRXZlbnRcbn1cblxuLy8gQ2xhc3MgZm9yIGEgdmVyeSBzaW1wbGUgbWVudSwgd2hlcmUgZWFjaCBcImVsZW1lbnRcIiBpcyBkcmF3biB0b3AgZG93biwgZXF1YWxseSBzcGFjZWRcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbnUgZXh0ZW5kcyBFdmVudE1hbmFnZXI8TWVudUV2ZW50TWFwPiB7XG4gICAgcHJpdmF0ZSBlbGVtZW50czogQXJyYXk8RWxlbWVudD47XG4gICAgcHJpdmF0ZSB0YWxsZXN0RWxlbWVudDogRWxlbWVudDtcbiAgICBwcml2YXRlIGxvbmdlc3RFbGVtZW50OiBFbGVtZW50O1xuXG4gICAgcHJvdGVjdGVkIGVsZW1lbnRIaXRib3hlczogTWFwPHN0cmluZywgSGl0Ym94PjtcbiAgICBwcm90ZWN0ZWQgaG92ZXJlZEVsZW1lbnQ6IHN0cmluZyB8IG51bGw7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVBvaW50ZXJNb3ZlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlUG9pbnRlckRvd247XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50czogQXJyYXk8RWxlbWVudD4pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgICAgICB0aGlzLnRhbGxlc3RFbGVtZW50ID0gYmlnZ2VzdEVsZW1lbnRCeUZpZWxkKGVsZW1lbnRzLCAnaCcpO1xuICAgICAgICB0aGlzLmxvbmdlc3RFbGVtZW50ID0gYmlnZ2VzdEVsZW1lbnRCeUZpZWxkKGVsZW1lbnRzLCAndycpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudEhpdGJveGVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmhvdmVyZWRFbGVtZW50ID0gbnVsbDtcblxuICAgICAgICB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlID0gKGV2ZW50OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYWJzb2x1dGUgWCBhbmQgWSBvZiB0aGUgYnV0dG9uIHByZXNzXG4gICAgICAgICAgICBjb25zdCBbeCwgeV0gPSBnZXRBYnNQb3MoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIG1lbnUgZWxlbWVudHNcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2VsZW1lbnQsIGhpdGJveF0gb2YgdGhpcy5lbGVtZW50SGl0Ym94ZXMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHBvaW50ZXIgaW50ZXJzZWN0ZWQgdGhlIG1lbnUgaXRlbVxuICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3QoeCwgeSwgaGl0Ym94KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG5ld2x5IGhvdmVyZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaG92ZXJlZEVsZW1lbnQgIT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3ZlcmVkRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxFdmVudExpc3RlbmVycygnaG92ZXInLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJlZEVsZW1lbnQ6IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiBhbiBlbGVtZW50IGlzIGJlaW5nIGhvdmVyZWQgb3ZlciAoYnV0IG5vdCBhbnltb3JlKVxuICAgICAgICAgICAgaWYgKHRoaXMuaG92ZXJlZEVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgaG92ZXJlZCBlbGVtZW50XG4gICAgICAgICAgICAgICAgdGhpcy5ob3ZlcmVkRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ2hvdmVyJywge1xuICAgICAgICAgICAgICAgICAgICBob3ZlcmVkRWxlbWVudDogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlckRvd24gPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBhYnNvbHV0ZSBYIGFuZCBZIG9mIHRoZSBidXR0b24gcHJlc3NcbiAgICAgICAgICAgIGNvbnN0IFt4LCB5XSA9IGdldEFic1BvcyhldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgbWVudSBlbGVtZW50c1xuICAgICAgICAgICAgZm9yIChjb25zdCBbZWxlbWVudCwgaGl0Ym94XSBvZiB0aGlzLmVsZW1lbnRIaXRib3hlcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcG9pbnRlciBpbnRlcnNlY3RlZCB0aGUgbWVudSBpdGVtXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdCh4LCB5LCBoaXRib3gpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbEV2ZW50TGlzdGVuZXJzKCdwcmVzcycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNzZWRFbGVtZW50OiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudHMoKTtcbiAgICB9XG5cbiAgICBhc3luYyBkcmF3KGJvdW5kcz86IFJlY3QpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gSWYgdGhlIGJvdW5kcyB3ZXJlbid0IGdpdmVuXG4gICAgICAgIGlmICghYm91bmRzKSB7XG4gICAgICAgICAgICAvLyBXZSBhc3N1bWUgdGhlIGJvdW5kcyBhcmUgdGhlIHdob2xlIGNhbnZhc1xuICAgICAgICAgICAgYm91bmRzID0ge1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICB3OiBjYW52YXMud2lkdGgsXG4gICAgICAgICAgICAgICAgaDogY2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJzdCwgc2NhbGUgc28gdGhlIGVsZW1lbnRzIGFyZSBldmVubHkgc3BhY2VkIGJ5IGhlaWdodFxuICAgICAgICBsZXQgc2NhbGUgPSAoYm91bmRzLmggKiAoMC41IC8gdGhpcy5lbGVtZW50cy5sZW5ndGgpKSAvXG4gICAgICAgICAgICAodGhpcy50YWxsZXN0RWxlbWVudC5zcHJpdGUuaCAqIHRoaXMudGFsbGVzdEVsZW1lbnQuc2NhbGUpO1xuXG4gICAgICAgIC8vIElmIHRoZSBsb25nZXN0IGVsZW1lbnQgd291bGQgYmUgdG9vIGxvbmdcbiAgICAgICAgaWYgKHNjYWxlICogdGhpcy5sb25nZXN0RWxlbWVudC5zcHJpdGUudyAqIHRoaXMubG9uZ2VzdEVsZW1lbnQuc2NhbGUgPj0gYm91bmRzLncgKiAwLjkpIHtcbiAgICAgICAgICAgIC8vIFNjYWxlIHNvIHRoZSBsb25nZXN0IGVsZW1lbnQgaXMgOTAlIHRoZSB3aWR0aCBvZiB0aGUgY2FudmFzXG4gICAgICAgICAgICBzY2FsZSA9IChib3VuZHMudyAqIDAuOSkgLyAodGhpcy5sb25nZXN0RWxlbWVudC5zcHJpdGUudyAqIHRoaXMubG9uZ2VzdEVsZW1lbnQuc2NhbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgbGV0IHkgPSBib3VuZHMueSArICh0aGlzLnRhbGxlc3RFbGVtZW50LnNwcml0ZS5oICogc2NhbGUgKiAwLjUpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbFdpZHRoID0gZWxlbWVudC5zcHJpdGUudyAqIGVsZW1lbnQuc2NhbGUgKiBzY2FsZTtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWxIZWlnaHQgPSBlbGVtZW50LnNwcml0ZS5oICogZWxlbWVudC5zY2FsZSAqIHNjYWxlO1xuXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBlbGVtZW50J3MgaGl0Ym94XG4gICAgICAgICAgICAgICAgY29uc3QgaGl0Ym94OiBIaXRib3ggPSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50J3MgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgeDogYm91bmRzLnggKyAoKGJvdW5kcy53IC8gMikgLSAoYWN0dWFsV2lkdGggLyAyKSksIHk6IHksXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50J3Mgc2l6ZVxuICAgICAgICAgICAgICAgICAgICB3OiBhY3R1YWxXaWR0aCwgaDogYWN0dWFsSGVpZ2h0LFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pbnRlcmFjdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBlbGVtZW50J3MgaGl0Ym94IHRvIHRoZSBtYXBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50SGl0Ym94ZXMuc2V0KGVsZW1lbnQuaWQsIGhpdGJveCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ByaXRlID0gY2xvbmVPYmooZWxlbWVudC5zcHJpdGUpO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgZWxlbWVudCBpcyBiZWluZyBob3ZlcmVkIG92ZXIgKGFuZCBoYXMgYSBzcHJpdGUpXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaWQgPT09IHRoaXMuaG92ZXJlZEVsZW1lbnQgJiYgJ2hvdmVyZWRTcHJpdGUnIGluIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UncmUgYXNzdW1pbmcgdGhlIGhvdmVyZWQgc3ByaXRlIGlzIHRoZSBzYW1lIHNpemUgaGVyZVxuICAgICAgICAgICAgICAgICAgICBzcHJpdGUueCA9IGVsZW1lbnQuaG92ZXJlZFNwcml0ZS54O1xuICAgICAgICAgICAgICAgICAgICBzcHJpdGUueSA9IGVsZW1lbnQuaG92ZXJlZFNwcml0ZS55O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERyYXcgdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBkcmF3U3ByaXRlKHNwcml0ZSwgaGl0Ym94KTtcblxuICAgICAgICAgICAgICAgIC8vIE1vdmUgdGhlIHkgZG93blxuICAgICAgICAgICAgICAgIHkgKz0gYWN0dWFsSGVpZ2h0ICogMS41O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgfVxuXG4gICAgcHVibGljIGRlcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLmhhbmRsZVBvaW50ZXJEb3duKTtcbiAgICB9XG59IiwiZXhwb3J0IHR5cGUgUG9zID0ge1xuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXJcbn1cblxuZXhwb3J0IHR5cGUgU2l6ZSA9IHtcbiAgICB3OiBudW1iZXIsXG4gICAgaDogbnVtYmVyXG59XG5cbmV4cG9ydCB0eXBlIFJlY3QgPSBQb3MgJiBTaXplXG5cbmV4cG9ydCBjb25zdCBwb3MgPSAocjogUmVjdCk6IFBvcyA9PiAoe3g6IHIueCwgeTogci55fSk7XG5cbmV4cG9ydCBjb25zdCByZWN0ID0gKHA6IFBvcywgczogU2l6ZSk6IFJlY3QgPT4gKHt4OiBwLngsIHk6IHAueSwgdzogcy53LCBoOiBzLmh9KTsiLCJpbXBvcnQgTWVudSwge0VsZW1lbnR9IGZyb20gJy4vbWVudSc7XG5pbXBvcnQge1NQUklURVMsIGNhbnZhcywgY3R4LCBkcmF3U3ByaXRlfSBmcm9tICcuLi9kcmF3JztcblxuaW1wb3J0IHtSZWN0LCBwb3N9IGZyb20gJy4uL2NvbW1vbic7XG5cbi8vIFRIZSBiYWNrZ3JvdW5kIG9mIHRoZSBtb2RhbCBpcyBtYWRlIHVwIG9mIGEgZ3JpZCBvZiAxMngxMiB0aWxlc1xuY29uc3QgTU9EQUxfR1JJRF9TSVpFID0gMTA7XG5cbmV4cG9ydCBjb25zdCBDTE9TRV9CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtb2RhbC5jbG9zZV9idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5USUxFUy5DTE9TRSxcbiAgICBzY2FsZTogMVxufTtcblxuZXhwb3J0IGNvbnN0IEJBQ0tfQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbW9kYWwuYmFja19idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5NT0RBTC5CQUNLLFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLk1PREFMLkJBQ0tfSE9WRVJFRCksXG4gICAgc2NhbGU6IDEuMjUsXG4gICAgaW50ZXJhY3RhYmxlOiB0cnVlXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCBleHRlbmRzIE1lbnUge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRzOiBBcnJheTxFbGVtZW50Pikge1xuICAgICAgICBzdXBlcihlbGVtZW50cyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZHJhdygpIHtcbiAgICAgICAgLy8gRHJhdyB0aGUgYmFja2dyb3VuZCBpbiBhIHByb21pc2VcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8UmVjdD4ocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAvLyBUaGUgY2FudmFzIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgICAgICAgIGNvbnN0IHcgPSBjYW52YXMud2lkdGgsIGggPSBjYW52YXMuaGVpZ2h0O1xuXG4gICAgICAgICAgICAvLyBEYXJrZW4gdGhlIGZpZWxkXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMCwgMCwgMCwgMC40KSc7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgdywgaCk7XG5cbiAgICAgICAgICAgIC8vIFRoZSBtb2RhbCBpcyA4MCUgdGhlIGhlaWdodCBvZiB0aGUgY2FudmFzIGlmIGxhbmRzY2FwZSwgb3IgODAlIHRoZSB3aWR0aCBpZiBwb3J0cmFpdFxuICAgICAgICAgICAgY29uc3QgbW9kYWxTaXplID0gdyA+IGggPyBoICogMC44IDogdyAqIDAuODtcblxuICAgICAgICAgICAgY29uc3QgbW9kYWxYID0gKHcgLyAyKSAtIChtb2RhbFNpemUgLyAyKTtcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsWSA9IChoIC8gMikgLSAobW9kYWxTaXplIC8gMik7XG5cbiAgICAgICAgICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGlzIG1hZGUgdXAgb2YgYSBncmlkIG9mIDEyeDEyIHRpbGVzXG4gICAgICAgICAgICBjb25zdCB0aWxlU2l6ZSA9IG1vZGFsU2l6ZSAvIE1PREFMX0dSSURfU0laRTtcblxuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBNT0RBTF9HUklEX1NJWkU7IHkrKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgTU9EQUxfR1JJRF9TSVpFOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSB0aWxlJ3MgaGl0Ym94XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhpdGJveDogUmVjdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IG1vZGFsWCArICh4ICogdGlsZVNpemUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogbW9kYWxZICsgKHkgKiB0aWxlU2l6ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB3OiB0aWxlU2l6ZSwgaDogdGlsZVNpemUsXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdG9kbyBkcmF3IHRoZSBiYWNrZ3JvdW5kIHByb3Blcmx5XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcHJpdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQaWNrIHRoZSBjZW50ZXIgcGl4ZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IFNQUklURVMuVElMRVMuRU1QVFkudyAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBTUFJJVEVTLlRJTEVTLkVNUFRZLmggLyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdzogMSwgaDogMVxuICAgICAgICAgICAgICAgICAgICB9IGFzIFJlY3Q7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0aWxlIHNob3VsZCBiZSBhIGNvcm5lclxuICAgICAgICAgICAgICAgICAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSBNT0RBTF9HUklEX1NJWkUgLSAxIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID09PSAwIHx8IHkgPT09IE1PREFMX0dSSURfU0laRSAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0aWxlIGlzIGluIHRoZSB1cHBlciByaWdodCBjb3JuZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4ID09PSBNT0RBTF9HUklEX1NJWkUgLSAxICYmIHkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudCBpcyB0aGUgY2xvc2UgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlID0gQ0xPU0VfQlVUVE9OLnNwcml0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGhpdGJveCB0byB0aGUgbWVudVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudEhpdGJveGVzLnNldChDTE9TRV9CVVRUT04uaWQsIGhpdGJveCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlID0gU1BSSVRFUy5USUxFUy5ISURERU47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkcmF3U3ByaXRlKHNwcml0ZSwgaGl0Ym94KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlc29sdmUgdGhlIHByb21pc2Ugd2l0aCB0aGUgbW9kYWwncyBpbm5lciBib3VuZHMsIGZvciBkcmF3aW5nIHRoZSBtZW51XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICB4OiBtb2RhbFggKyB0aWxlU2l6ZSxcbiAgICAgICAgICAgICAgICB5OiBtb2RhbFkgKyB0aWxlU2l6ZSxcbiAgICAgICAgICAgICAgICB3OiBtb2RhbFNpemUgLSAodGlsZVNpemUgKiAyKSxcbiAgICAgICAgICAgICAgICBoOiBtb2RhbFNpemUgLSAodGlsZVNpemUgKiAyKSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBUaGVuLCBkcmF3IHRoZSBtZW51IG92ZXIgaXRcbiAgICAgICAgfSkudGhlbihpbm5lck1vZGFsQm91bmRzID0+IHN1cGVyLmRyYXcoaW5uZXJNb2RhbEJvdW5kcykpO1xuICAgIH1cbn0iLCJpbXBvcnQgTW9kYWwsIHtCQUNLX0JVVFRPTn0gZnJvbSAnLi9tb2RhbCc7XG5pbXBvcnQge0VsZW1lbnR9IGZyb20gJy4vbWVudSc7XG5pbXBvcnQge1NQUklURVN9IGZyb20gJy4uL2RyYXcnO1xuXG5pbXBvcnQge3Bvc30gZnJvbSAnLi4vY29tbW9uJztcblxuZXhwb3J0IGNvbnN0IFRJVExFOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbW9kYWwucmV0cnkudGl0bGUnLFxuICAgIHNwcml0ZTogU1BSSVRFUy5SRVRSWV9NT0RBTC5USVRMRSxcbiAgICBzY2FsZTogMSxcbn07XG5cbmV4cG9ydCBjb25zdCBSRVRSWV9CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtb2RhbC5yZXRyeS5yZXRyeV9idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5SRVRSWV9NT0RBTC5SRVRSWSxcbiAgICBob3ZlcmVkU3ByaXRlOiBwb3MoU1BSSVRFUy5SRVRSWV9NT0RBTC5SRVRSWV9IT1ZFUkVEKSxcbiAgICBzY2FsZTogMS4yNSxcbiAgICBpbnRlcmFjdGFibGU6IHRydWVcbn07XG5cbi8vIFRoZSBlbGVtZW50cywgaW4gb3JkZXIgb2YgaG93IHRoZXkncmUgZGlzcGxheWVkIG9uIHNjcmVlbiAodG9wIGRvd24pXG5jb25zdCBFTEVNRU5UUzogQXJyYXk8RWxlbWVudD4gPSBbVElUTEUsIFJFVFJZX0JVVFRPTiwgQkFDS19CVVRUT05dO1xuXG5leHBvcnQgZGVmYXVsdCBNb2RhbC5iaW5kKE1vZGFsLCBFTEVNRU5UUyk7IiwiaW1wb3J0IE1vZGFsLCB7QkFDS19CVVRUT059IGZyb20gJy4vbW9kYWwnO1xuaW1wb3J0IHtFbGVtZW50fSBmcm9tICcuL21lbnUnO1xuaW1wb3J0IHtTUFJJVEVTfSBmcm9tICcuLi9kcmF3JztcblxuaW1wb3J0IHtwb3N9IGZyb20gJy4uL2NvbW1vbic7XG5cbmV4cG9ydCBjb25zdCBUSVRMRTogRWxlbWVudCA9IHtcbiAgICBpZDogJ21vZGFsLnN1Y2Nlc3MudGl0bGUnLFxuICAgIHNwcml0ZTogU1BSSVRFUy5TVUNDRVNTX01PREFMLlRJVExFLFxuICAgIHNjYWxlOiAxLFxufTtcblxuZXhwb3J0IGNvbnN0IFJFU0VUX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21vZGFsLnN1Y2Nlc3MucmVzZXRfYnV0dG9uJyxcbiAgICBzcHJpdGU6IFNQUklURVMuU1VDQ0VTU19NT0RBTC5SRVNFVCxcbiAgICBob3ZlcmVkU3ByaXRlOiBwb3MoU1BSSVRFUy5TVUNDRVNTX01PREFMLlJFU0VUX0hPVkVSRUQpLFxuICAgIHNjYWxlOiAxLjI1LFxuICAgIGludGVyYWN0YWJsZTogdHJ1ZVxufTtcblxuLy8gVGhlIGVsZW1lbnRzLCBpbiBvcmRlciBvZiBob3cgdGhleSdyZSBkaXNwbGF5ZWQgb24gc2NyZWVuICh0b3AgZG93bilcbmNvbnN0IEVMRU1FTlRTOiBBcnJheTxFbGVtZW50PiA9IFtUSVRMRSwgUkVTRVRfQlVUVE9OLCBCQUNLX0JVVFRPTl07XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGFsLmJpbmQoTW9kYWwsIEVMRU1FTlRTKTsiLCJpbXBvcnQgQ2FtZXJhLCB7UHJlc3NFdmVudCwgVElMRV9EUkFXX1NJWkV9IGZyb20gJy4vY2FtZXJhJztcbmltcG9ydCB7U1BSSVRFUywgY2FudmFzLCBjdHgsIGRyYXdTcHJpdGV9IGZyb20gJy4uL2RyYXcnO1xuXG5pbXBvcnQgKiBhcyBnb2lvIGZyb20gJy4uL2dvaW8vZ29pbyc7XG5cbmltcG9ydCBNb2RhbCwge0JBQ0tfQlVUVE9OLCBDTE9TRV9CVVRUT059IGZyb20gJy4uL21lbnUvbW9kYWwnO1xuaW1wb3J0IFJldHJ5TW9kYWwsIHtSRVRSWV9CVVRUT059IGZyb20gJy4uL21lbnUvcmV0cnktbW9kYWwnO1xuaW1wb3J0IFN1Y2Nlc3NNb2RhbCwge1JFU0VUX0JVVFRPTn0gZnJvbSAnLi4vbWVudS9zdWNjZXNzLW1vZGFsJztcbmltcG9ydCB7RWxlbWVudFByZXNzRXZlbnR9IGZyb20gJy4uL21lbnUvbWVudSc7XG5cbmltcG9ydCB7Y29uc29sZUxvZywgbGltaXRlcn0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge1NpemV9IGZyb20gJy4uL2NvbW1vbic7XG5cbi8vIENvbnN0YW50cyBmb3IgdGhlIGdhbWUgc3RhdGVzXG5jb25zdCBHQU1FX1NUQVRFUyA9IHtcbiAgICBTVEFSVDogJ3N0YXJ0JyxcbiAgICBQTEFZSU5HOiAncGxheWluZycsXG4gICAgV0lOOiAnd2luJyxcbiAgICBMT1NTOiAnbG9zcydcbn07XG5cbmNsYXNzIE1vZGFsQ29udGFpbmVyIHtcbiAgICBwcml2YXRlIG1vZGFsOiBNb2RhbCB8IG51bGw7XG4gICAgI2hpZGRlbjogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1vZGFsID0gbnVsbDtcbiAgICAgICAgdGhpcy4jaGlkZGVuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb3Blbihtb2RhbDogTW9kYWwpIHtcbiAgICAgICAgdGhpcy5tb2RhbCA9IG1vZGFsO1xuICAgICAgICB0aGlzLiNoaWRkZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xvc2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5tb2RhbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtb2RhbCB0byBjbG9zZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB0aGlzLm1vZGFsID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGhpZGRlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2hpZGRlbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGlkZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vZGFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1vZGFsIHRvIGhpZGUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGFsLmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgdGhpcy4jaGlkZGVuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmV2ZWFsKCkge1xuICAgICAgICBpZiAoIXRoaXMubW9kYWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbW9kYWwgdG8gcmV2ZWFsJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RhbC5yZWdpc3RlckV2ZW50cygpO1xuICAgICAgICB0aGlzLiNoaWRkZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZHJhdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNoaWRkZW4pIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubW9kYWwuZHJhdygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGRlcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIHRoaXMubW9kYWw/LmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGU6IEV2ZW50KSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5leHBvcnQgdHlwZSBGaW5pdGVHYW1lUHJvcHMgPSBTaXplICYge1xuICAgIG51bU1pbmVzOiBudW1iZXJcbn1cblxuZXhwb3J0IHR5cGUgSW5maW5pdGVHYW1lUHJvcHMgPSB7XG4gICAgbWluZURlbnNpdHk6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBHYW1lUHJvcHMgPSAoRmluaXRlR2FtZVByb3BzIHwgSW5maW5pdGVHYW1lUHJvcHMpICYge1xuICAgIGhhbmRsZUJhY2s6ICgpID0+IHZvaWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogR2FtZVByb3BzO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBjYW1lcmE6IENhbWVyYTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1vZGFsOiBNb2RhbENvbnRhaW5lcjtcblxuICAgIC8vIFRoZSBkcmF3IGZ1bmN0aW9uIHdpdGggYSBsaW1pdGVyLCB0byBwcmV2ZW50IGZsaWNrZXJpbmcgd2hlbiByZXNpemluZ1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZHJhd1dpdGhMaW1pdDogKCkgPT4gdm9pZDtcbiAgICAvLyBUaGUgbGFzdCB0aW1lIGEgZHJhdyB3YXMgZG9uZSwgdG8gcHJldmVudCB0aGUgZHJhdyBtZXRob2QgZnJvbSBzcGFtbWluZyB0aGUgYmFja2VuZFxuICAgIC8vIHRvZG8gdGhpcyBpc24ndCBhIHBlcmZlY3Qgc29sdXRpb24sIGlmIHlvdSBzY3JvbGwgZmFzdCBlbm91Z2hcbiAgICAvLyAgeW91IGNhbiBzdGlsbCBzZWUgdGhlIHRpbGVzIGxvYWQgaW5cbiAgICBwcml2YXRlIGxhc3REcmF3VGltZXN0YW1wOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIGdhbWVPdmVyOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IEdhbWVQcm9wcykge1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG5cbiAgICAgICAgaWYgKCd3JyBpbiB0aGlzLnByb3BzICYmICdoJyBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYSA9IG5ldyBDYW1lcmEoe3c6IHRoaXMucHJvcHMudywgaDogdGhpcy5wcm9wcy5ofSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYSA9IG5ldyBDYW1lcmEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FtZXJhLmFkZEV2ZW50TGlzdGVuZXIoJ3ByZXNzJywgdGhpcy5oYW5kbGVQcmVzcy5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5jYW1lcmEuYWRkRXZlbnRMaXN0ZW5lcignbG9uZ3ByZXNzJywgdGhpcy5oYW5kbGVMb25nUHJlc3MuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuY2FtZXJhLmFkZEV2ZW50TGlzdGVuZXIoJ21vdmUnLCB0aGlzLmRyYXcuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5tb2RhbCA9IG5ldyBNb2RhbENvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLmRyYXdXaXRoTGltaXQgPSBsaW1pdGVyKHRoaXMuZHJhdy5iaW5kKHRoaXMpLCAxMDApO1xuICAgICAgICB0aGlzLmxhc3REcmF3VGltZXN0YW1wID0gMDtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50cygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuY2FtZXJhLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZ2FtZU92ZXIgPSBmYWxzZTtcblxuICAgICAgICBsZXQgaW5pdGlhbGlzZVByb21pc2U7XG4gICAgICAgIC8vIEZpbml0ZSB0eXBlXG4gICAgICAgIGlmICgndycgaW4gdGhpcy5wcm9wcyAmJiAnaCcgaW4gdGhpcy5wcm9wcyAmJiAnbnVtTWluZXMnIGluIHRoaXMucHJvcHMpIHtcbiAgICAgICAgICAgIGluaXRpYWxpc2VQcm9taXNlID0gZ29pby5pbml0KHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5wcm9wcy53LFxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5wcm9wcy5oLFxuICAgICAgICAgICAgICAgIG1pbmVzOiB0aGlzLnByb3BzLm51bU1pbmVzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gSW5maW5pdGUgdHlwZVxuICAgICAgICB9IGVsc2UgaWYgKCdtaW5lRGVuc2l0eScgaW4gdGhpcy5wcm9wcykge1xuICAgICAgICAgICAgaW5pdGlhbGlzZVByb21pc2UgPSBnb2lvLmluaXQoe1xuICAgICAgICAgICAgICAgIG1pbmVEZW5zaXR5OiB0aGlzLnByb3BzLm1pbmVEZW5zaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBnYW1lIHByb3BzIHR5cGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9uY2UgaW5pdGlhbGlzZWQsIGRyYXcgaXRcbiAgICAgICAgaW5pdGlhbGlzZVByb21pc2UudGhlbih0aGlzLmRyYXcuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIC8vIE1heCBvZiAzMCBkcmF3cyBwZXIgc2Vjb25kXG4gICAgICAgIGlmIChub3cgLSB0aGlzLmxhc3REcmF3VGltZXN0YW1wID4gMTAwMCAvIDYwKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3REcmF3VGltZXN0YW1wID0gbm93O1xuICAgICAgICAgICAgLy8gUmVxdWVzdCB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgYm9hcmQgZnJvbSBHb1xuICAgICAgICAgICAgYXdhaXQgZ29pby5hcHBlYXJhbmNlKHRoaXMuY2FtZXJhLnZpc2libGVUaWxlcylcbiAgICAgICAgICAgICAgICAvLyBUaGVuIGRyYXcgaXRcbiAgICAgICAgICAgICAgICAudGhlbih0aGlzLmRyYXdBcHBlYXJhbmNlLmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgLy8gVGhlbiBkcmF3IHRoZSBtb2RhbCBvdmVyIHRvcCAoaWYgYWN0aXZlKVxuICAgICAgICAgICAgICAgIC50aGVuKHRoaXMubW9kYWwuZHJhdy5iaW5kKHRoaXMubW9kYWwpKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHVibGljIHJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5kcmF3V2l0aExpbWl0KTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgcHJldmVudERlZmF1bHQpO1xuICAgICAgICBpZiAodGhpcy5tb2RhbC5oaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhLnJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZGVyZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuZHJhd1dpdGhMaW1pdCk7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgdGhpcy5jYW1lcmEuZGVyZWdpc3RlckV2ZW50cygpO1xuICAgICAgICB0aGlzLm1vZGFsLmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGRyYXdBcHBlYXJhbmNlKGFwcGVhcmFuY2VEYXRhOiBnb2lvLkFwcGVhcmFuY2VSZXNwb25zZURhdGEpIHtcbiAgICAgICAgLy8gVGhlIGNhbnZhcyB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICAgIGNvbnN0IHcgPSBjYW52YXMud2lkdGgsIGggPSBjYW52YXMuaGVpZ2h0O1xuXG4gICAgICAgIC8vIENsZWFyIHRoZSBjYW52YXMgKGZvciBub3cpXG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdywgaCk7XG5cbiAgICAgICAgY29uc3QgbWluID0ge3g6IE51bWJlci5NQVhfVkFMVUUsIHk6IE51bWJlci5NQVhfVkFMVUV9O1xuICAgICAgICBjb25zdCBtYXggPSB7eDogTnVtYmVyLk1JTl9WQUxVRSwgeTogTnVtYmVyLk1JTl9WQUxVRX07XG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdGlsZXNcbiAgICAgICAgZm9yIChjb25zdCB5S2V5IGluIGFwcGVhcmFuY2VEYXRhKSB7XG4gICAgICAgICAgICBjb25zdCB5ID0gTnVtYmVyKHlLZXkpO1xuICAgICAgICAgICAgbWluLnkgPSBNYXRoLm1pbihtaW4ueSwgeSk7XG4gICAgICAgICAgICBtYXgueSA9IE1hdGgubWF4KG1heC55LCB5KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgeEtleSBpbiBhcHBlYXJhbmNlRGF0YVt5XSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBOdW1iZXIoeEtleSk7XG4gICAgICAgICAgICAgICAgbWluLnggPSBNYXRoLm1pbihtaW4ueCwgeCk7XG4gICAgICAgICAgICAgICAgbWF4LnggPSBNYXRoLm1heChtYXgueCwgeCk7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBzcHJpdGVcbiAgICAgICAgICAgICAgICBjb25zdCBzcHJpdGUgPSBTUFJJVEVTLlRJTEVTW2FwcGVhcmFuY2VEYXRhW3ldW3hdXTtcbiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSB0aWxlIG9uIHRoZSBjYW52YXNcbiAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSB0aGlzLmNhbWVyYS50b0NhbnZhc1Bvcyh4LCB5KTtcbiAgICAgICAgICAgICAgICBkcmF3U3ByaXRlKHNwcml0ZSwge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcG9zaXRpb24gb2YgdGhlIHRpbGUgdG8gZHJhdyB0b1xuICAgICAgICAgICAgICAgICAgICB4OiBwb3MueCwgeTogcG9zLnksXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzaXplIG9mIHRoZSB0aWxlIHRvIGRyYXcgdG9cbiAgICAgICAgICAgICAgICAgICAgdzogVElMRV9EUkFXX1NJWkUgKiB0aGlzLmNhbWVyYS5zY2FsZSwgaDogVElMRV9EUkFXX1NJWkUgKiB0aGlzLmNhbWVyYS5zY2FsZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdG9kbyBwYWdpbmF0aW9uXG4gICAgICAgIC8vIHRvZG8gZHJhdyBiYXJcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZVN0YXRlKHN0YXRlRGF0YTogZ29pby5VbmNvdmVyUmVzcG9uc2VEYXRhKSB7XG4gICAgICAgIHN3aXRjaCAoc3RhdGVEYXRhLnN0YXRlKSB7XG4gICAgICAgIGNhc2UgR0FNRV9TVEFURVMuV0lOOlxuICAgICAgICAgICAgdGhpcy5nYW1lT3ZlciA9IHRydWU7XG4gICAgICAgICAgICBjb25zb2xlTG9nKCdXaW4gZGV0ZWN0ZWQsIGRpc3BsYXlpbmcgc3VjY2VzcyBtb2RhbCcpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFbmRHYW1lTW9kYWwoU3VjY2Vzc01vZGFsLCBSRVNFVF9CVVRUT04uaWQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgR0FNRV9TVEFURVMuTE9TUzpcbiAgICAgICAgICAgIHRoaXMuZ2FtZU92ZXIgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZUxvZygnTG9zcyBkZXRlY3RlZCwgZGlzcGxheWluZyByZXRyeSBtb2RhbCcpO1xuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLmhhbmRsZUVuZEdhbWVNb2RhbC5iaW5kKHRoaXMsIFJldHJ5TW9kYWwsIFJFVFJZX0JVVFRPTi5pZCksXG4gICAgICAgICAgICAgICAgLy8gRGlzcGxheSBhZnRlciAxcyBzbyB0aGUgdXNlciBjYW4gc2VlIHRoZSBmaWVsZCBmb3IgYSBiaXRcbiAgICAgICAgICAgICAgICAxMDAwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBoYW5kbGVFbmRHYW1lTW9kYWwobW9kYWxDb25zdHJ1Y3RvcjogKCkgPT4gdm9pZCwgcmVzZXRFbGVtZW50SWQ6IHN0cmluZykge1xuICAgICAgICAvLyBEaXNwbGF5IHRoZSBtb2RhbFxuICAgICAgICBjb25zdCBtb2RhbDogTW9kYWwgPSBuZXcgbW9kYWxDb25zdHJ1Y3RvcigpO1xuICAgICAgICB0aGlzLm1vZGFsLm9wZW4obW9kYWwpO1xuICAgICAgICAvLyBBZGQgc29tZSBjb21tb24gZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignaG92ZXInLCB0aGlzLmRyYXcuYmluZCh0aGlzKSk7XG4gICAgICAgIG1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ3ByZXNzJywgKGV2ZW50OiBFbGVtZW50UHJlc3NFdmVudCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC5wcmVzc2VkRWxlbWVudCkge1xuICAgICAgICAgICAgY2FzZSBDTE9TRV9CVVRUT04uaWQ6XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RhbC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmEucmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgcmVzZXRFbGVtZW50SWQ6XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RhbC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLnJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBCQUNLX0JVVFRPTi5pZDpcbiAgICAgICAgICAgICAgICB0aGlzLmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRoZSBtb2RhbCBpcyBvcGVuIHNvIGRvbid0IGFsbG93IHRoZSBjYW1lcmEgdG8gbW92ZVxuICAgICAgICB0aGlzLmNhbWVyYS5kZXJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgIC8vIERyYXcgdGhlIG1vZGFsXG4gICAgICAgIGF3YWl0IHRoaXMuZHJhdygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlUHJlc3MoZXZlbnQ6IFByZXNzRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmdhbWVPdmVyKSB7XG4gICAgICAgICAgICAvLyBMZWZ0IG1vdXNlIGJ1dHRvblxuICAgICAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGdvaW8udW5jb3ZlcihldmVudC5wb3MpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGFzeW5jIHN0YXRlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gUmlnaHQgbW91c2UgYnV0dG9uXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMikge1xuICAgICAgICAgICAgICAgIGdvaW8uZmxhZyhldmVudC5wb3MpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHRoaXMuZHJhdy5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIGdhbWUgaXMgb3ZlciBidXQgdGhlIG1vZGFsIGlzIGhpZGRlblxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW9kYWwuaGlkZGVuKSB7XG4gICAgICAgICAgICAvLyBSZW9wZW4gdGhlIG1vZGFsXG4gICAgICAgICAgICB0aGlzLm1vZGFsLnJldmVhbCgpO1xuICAgICAgICAgICAgdGhpcy5jYW1lcmEuZGVyZWdpc3RlckV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUxvbmdQcmVzcyhldmVudDogUHJlc3NFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuZ2FtZU92ZXIgJiYgZXZlbnQuYnV0dG9uID09PSAwKSB7XG4gICAgICAgICAgICBnb2lvLmZsYWcoZXZlbnQucG9zKS50aGVuKHRoaXMuZHJhdy5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgTWVudSwge0VsZW1lbnR9IGZyb20gJy4vbWVudSc7XG5pbXBvcnQge1NQUklURVMsIGNsZWFyfSBmcm9tICcuLi9kcmF3JztcblxuaW1wb3J0IHtsaW1pdGVyfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7cG9zfSBmcm9tICcuLi9jb21tb24nO1xuXG5jb25zdCBUSVRMRTogRWxlbWVudCA9IHtcbiAgICBpZDogJ21lbnUubWFpbi50aXRsZScsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1BSU5fTUVOVS5USVRMRSxcbiAgICBzY2FsZTogMSxcbn07XG5cbmV4cG9ydCBjb25zdCBFQVNZX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21lbnUubWFpbi5lYXN5X2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1BSU5fTUVOVS5FQVNZLFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLk1BSU5fTUVOVS5FQVNZX0hPVkVSRUQpLFxuICAgIHNjYWxlOiAxLjI1LFxuICAgIGludGVyYWN0YWJsZTogdHJ1ZVxufTtcblxuZXhwb3J0IGNvbnN0IE1FRElVTV9CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtZW51Lm1haW4ubWVkaXVtX2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1BSU5fTUVOVS5NRURJVU0sXG4gICAgaG92ZXJlZFNwcml0ZTogcG9zKFNQUklURVMuTUFJTl9NRU5VLk1FRElVTV9IT1ZFUkVEKSxcbiAgICBzY2FsZTogMS4yNSxcbiAgICBpbnRlcmFjdGFibGU6IHRydWVcbn07XG5cbmV4cG9ydCBjb25zdCBIQVJEX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21lbnUubWFpbi5oYXJkX2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1BSU5fTUVOVS5IQVJELFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLk1BSU5fTUVOVS5IQVJEX0hPVkVSRUQpLFxuICAgIHNjYWxlOiAxLjI1LFxuICAgIGludGVyYWN0YWJsZTogdHJ1ZVxufTtcblxuLyogdG9kbyBpbXBsZW1lbnQgY3VzdG9tIGRpZmZpY3VsdHlcbmV4cG9ydCBjb25zdCBDVVNUT01fQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbWVudS5tYWluLmN1c3RvbV9idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5NQUlOX01FTlUuQ1VTVE9NLFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLk1BSU5fTUVOVS5DVVNUT01fSE9WRVJFRCksXG4gICAgc2NhbGU6IDEuMjUsXG4gICAgaW50ZXJhY3RhYmxlOiBmYWxzZVxufTsqL1xuXG5leHBvcnQgY29uc3QgSU5GSU5JVEVfQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbWVudS5tYWluLmluZmluaXRlX2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1BSU5fTUVOVS5JTkZJTklURSxcbiAgICBob3ZlcmVkU3ByaXRlOiBwb3MoU1BSSVRFUy5NQUlOX01FTlUuSU5GSU5JVEVfSE9WRVJFRCksXG4gICAgc2NhbGU6IDEuMjUsXG4gICAgaW50ZXJhY3RhYmxlOiB0cnVlXG59O1xuXG4vLyBUaGUgZWxlbWVudHMsIGluIG9yZGVyIG9mIGhvdyB0aGV5J3JlIGRpc3BsYXllZCBvbiBzY3JlZW4gKHRvcCBkb3duKVxuY29uc3QgRUxFTUVOVFM6IEFycmF5PEVsZW1lbnQ+ID0gW1RJVExFLCBFQVNZX0JVVFRPTiwgTUVESVVNX0JVVFRPTiwgSEFSRF9CVVRUT04vKiwgQ1VTVE9NX0JVVFRPTiovLCBJTkZJTklURV9CVVRUT05dO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWluTWVudSBleHRlbmRzIE1lbnUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZHJhd1dpdGhMaW1pdDogKCkgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihFTEVNRU5UUyk7XG4gICAgICAgIHN1cGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3ByZXNzJywgdGhpcy5kcmF3LmJpbmQodGhpcykpO1xuICAgICAgICBzdXBlci5hZGRFdmVudExpc3RlbmVyKCdob3ZlcicsIHRoaXMuZHJhdy5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBUaGUgZHJhdyBmdW5jdGlvbiB3aXRoIGEgbGltaXRlciwgdG8gcHJldmVudCBmbGlja2VyaW5nIHdoZW4gcmVzaXppbmdcbiAgICAgICAgdGhpcy5kcmF3V2l0aExpbWl0ID0gbGltaXRlcih0aGlzLmRyYXcuYmluZCh0aGlzKSwgMTAwKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZHJhdygpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFyKCkudGhlbihzdXBlci5kcmF3LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICBzdXBlci5yZWdpc3RlckV2ZW50cygpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5kcmF3V2l0aExpbWl0KTtcbiAgICB9XG5cbiAgICBkZXJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICBzdXBlci5kZXJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmRyYXdXaXRoTGltaXQpO1xuICAgIH1cbn0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBHYW1lLCB7RmluaXRlR2FtZVByb3BzLCBJbmZpbml0ZUdhbWVQcm9wc30gZnJvbSAnLi9nYW1lL2dhbWUnO1xuaW1wb3J0IE1haW5NZW51LCB7RUFTWV9CVVRUT04sIEhBUkRfQlVUVE9OLCBJTkZJTklURV9CVVRUT04sIE1FRElVTV9CVVRUT059IGZyb20gJy4vbWVudS9tYWluLW1lbnUnO1xuXG5pbXBvcnQge2NhbnZhcywgY3R4LCBzcHJpdGVzaGVldExvYWRlZH0gZnJvbSAnLi9kcmF3JztcbmltcG9ydCB7RWxlbWVudFByZXNzRXZlbnR9IGZyb20gJy4vbWVudS9tZW51JztcblxuaW1wb3J0ICcuLi9hc3NldHMvc3R5bGVzLmNzcyc7XG5cbi8vIE1ha2UgdGhlIGNhbnZhcyBmdWxsc2NyZWVuXG5mdW5jdGlvbiBmdWxsc2NyZWVuQ2FudmFzKCkge1xuICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnQgKi9cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY3R4LndlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjdHgubW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnQgKi9cbn1cblxuLy8gQWRkIGFuIGV2ZW50IGhhbmRsZXIgdG8gcmVzaXplIHRoZSBjYW52YXNcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdWxsc2NyZWVuQ2FudmFzKTtcblxuLy8gTWFrZSB0aGUgY2FudmFzIGZ1bGxzY3JlZW5cbmZ1bGxzY3JlZW5DYW52YXMoKTtcblxuLy8gQ3JlYXRlIHRoZSBtYWluIG1lbnVcbmNvbnN0IG1haW5NZW51ID0gbmV3IE1haW5NZW51KCk7XG5cbi8vIEFkZCBhbiBldmVudCBsaXN0ZW5lciBmb3IgcHJlc3NpbmcgdGhlIG1lbnUgYnV0dG9uc1xubWFpbk1lbnUuYWRkRXZlbnRMaXN0ZW5lcigncHJlc3MnLCAoZXZlbnQgOiBFbGVtZW50UHJlc3NFdmVudCkgPT4ge1xuICAgIG1haW5NZW51LmRlcmVnaXN0ZXJFdmVudHMoKTtcblxuICAgIC8vIERldGVybWluZSB0aGUgZ2FtZSBwcm9wZXJ0aWVzXG4gICAgbGV0IGdhbWVQcm9wczogRmluaXRlR2FtZVByb3BzIHwgSW5maW5pdGVHYW1lUHJvcHMgfCB1bmRlZmluZWQ7XG4gICAgc3dpdGNoIChldmVudC5wcmVzc2VkRWxlbWVudCkge1xuICAgIGNhc2UgRUFTWV9CVVRUT04uaWQ6XG4gICAgICAgIGdhbWVQcm9wcyA9IHtcbiAgICAgICAgICAgIHc6IDksXG4gICAgICAgICAgICBoOiA5LFxuICAgICAgICAgICAgbnVtTWluZXM6IDEwXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgTUVESVVNX0JVVFRPTi5pZDpcbiAgICAgICAgZ2FtZVByb3BzID0ge1xuICAgICAgICAgICAgdzogMTYsXG4gICAgICAgICAgICBoOiAxNixcbiAgICAgICAgICAgIG51bU1pbmVzOiA0MFxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIEhBUkRfQlVUVE9OLmlkOlxuICAgICAgICBnYW1lUHJvcHMgPSB7XG4gICAgICAgICAgICB3OiAzMCxcbiAgICAgICAgICAgIGg6IDE2LFxuICAgICAgICAgICAgbnVtTWluZXM6IDk5XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgSU5GSU5JVEVfQlVUVE9OLmlkOlxuICAgICAgICBnYW1lUHJvcHMgPSB7XG4gICAgICAgICAgICAvLyBNZWRpdW0gZGlmZmljdWx0eSBtaW5lIGRlbnNpdHlcbiAgICAgICAgICAgIG1pbmVEZW5zaXR5OiA0MCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdGhlIGdhbWVcbiAgICBuZXcgR2FtZSh7XG4gICAgICAgIC4uLmdhbWVQcm9wcyxcbiAgICAgICAgaGFuZGxlQmFjazogKCkgPT4ge1xuICAgICAgICAgICAgbWFpbk1lbnUucmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgICAgIG1haW5NZW51LmRyYXcoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG5cbi8vIERyYXcgdGhlIG1haW4gbWVudSBvbmNlIHRoZSBzcHJpdGVzaGVldCBoYXMgbG9hZGVkXG5zcHJpdGVzaGVldExvYWRlZC50aGVuKG1haW5NZW51LmRyYXcuYmluZChtYWluTWVudSkpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJ1IiwiY2h1bmtJZCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIkV2ZW50TWFuYWdlciIsImNvbnN0cnVjdG9yIiwiZXZlbnRMaXN0ZW5lcnMiLCJNYXAiLCJhZGRFdmVudExpc3RlbmVyIiwidHlwZSIsImxpc3RlbmVyIiwibGlzdGVuZXJzRm9yRXZlbnQiLCJzZXQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZmlsdGVyIiwibGlzdGVuZXJGb3JFdmVudCIsImNhbGxFdmVudExpc3RlbmVycyIsImV2ZW50IiwiZm9yRWFjaCIsInRva2VuIiwidGltZXpvbmUiLCJ0aW1lem9uZUNsaXAiLCJtYXNrcyIsImRlZmF1bHQiLCJzaG9ydERhdGUiLCJwYWRkZWRTaG9ydERhdGUiLCJtZWRpdW1EYXRlIiwibG9uZ0RhdGUiLCJmdWxsRGF0ZSIsInNob3J0VGltZSIsIm1lZGl1bVRpbWUiLCJsb25nVGltZSIsImlzb0RhdGUiLCJpc29UaW1lIiwiaXNvRGF0ZVRpbWUiLCJpc29VdGNEYXRlVGltZSIsImV4cGlyZXNIZWFkZXJGb3JtYXQiLCJpMThuIiwiZGF5TmFtZXMiLCJtb250aE5hbWVzIiwidGltZU5hbWVzIiwicGFkIiwidmFsIiwibGVuIiwiYXJndW1lbnRzIiwiU3RyaW5nIiwicGFkU3RhcnQiLCJnZXREYXlOYW1lIiwiX3JlZiIsInkiLCJfIiwiZGF5TmFtZSIsIl9yZWYkc2hvcnQiLCJfc2hvcnQiLCJ0b2RheSIsIkRhdGUiLCJ5ZXN0ZXJkYXkiLCJzZXREYXRlIiwidG9tb3Jyb3ciLCJnZXRXZWVrIiwiZGF0ZSIsInRhcmdldFRodXJzZGF5IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXREYXkiLCJmaXJzdFRodXJzZGF5IiwiZHMiLCJnZXRUaW1lem9uZU9mZnNldCIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJ3ZWVrRGlmZiIsIk1hdGgiLCJmbG9vciIsImdldERheU9mV2VlayIsImRvdyIsImZvcm1hdFRpbWV6b25lIiwibWF0Y2giLCJwb3AiLCJjb25zb2xlTG9nIiwicyIsIm5vdyIsImNvbnNvbGUiLCJsb2ciLCJtYXNrIiwidXRjIiwiZ210IiwidGVzdCIsImlzTmFOIiwiVHlwZUVycm9yIiwibWFza1NsaWNlIiwic2xpY2UiLCJfZCIsIkQiLCJfbSIsIl9IIiwiX00iLCJfcyIsIl9MIiwiX28iLCJfVyIsIl9OIiwiZmxhZ3MiLCJkZCIsImRkZCIsIkRERCIsInNob3J0IiwiZGRkZCIsIkREREQiLCJtbSIsIm1tbSIsIm1tbW0iLCJ5eSIsInl5eXkiLCJoIiwiaGgiLCJIIiwiSEgiLCJNIiwiTU0iLCJzcyIsImwiLCJMIiwidCIsInR0IiwiVCIsIlRUIiwiWiIsImFicyIsIlMiLCJXIiwiV1ciLCJOIiwiZGF0ZUZvcm1hdCIsInRpbWVvdXRJZEZvckZ1bmMiLCJsaW1pdGVyIiwiZnVuYyIsImRlbGF5IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIlRJTEVfU0laRSIsIlNQUklURVMiLCJUSUxFUyIsIkVNUFRZIiwieCIsInciLCJNSU5FIiwiSElEREVOIiwiRkxBRyIsIkNMT1NFIiwiTU9EQUwiLCJCQUNLIiwiQkFDS19IT1ZFUkVEIiwiTUFJTl9NRU5VIiwiVElUTEUiLCJFQVNZIiwiRUFTWV9IT1ZFUkVEIiwiTUVESVVNIiwiTUVESVVNX0hPVkVSRUQiLCJIQVJEIiwiSEFSRF9IT1ZFUkVEIiwiQ1VTVE9NIiwiQ1VTVE9NX0hPVkVSRUQiLCJJTkZJTklURSIsIklORklOSVRFX0hPVkVSRUQiLCJSRVRSWV9NT0RBTCIsIlJFVFJZIiwiUkVUUllfSE9WRVJFRCIsIlNVQ0NFU1NfTU9EQUwiLCJSRVNFVCIsIlJFU0VUX0hPVkVSRUQiLCJjYW52YXMiLCJnZXRFbGVtZW50QnlJZCIsImN0eCIsImdldENvbnRleHQiLCJzcHJpdGVzaGVldCIsIkltYWdlIiwic3ByaXRlc2hlZXRMb2FkZWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImRyYXdTcHJpdGUiLCJzcHJpdGUiLCJkcmF3UmVjdCIsImRyYXdJbWFnZSIsIlVSTCIsIlRJTEVfRFJBV19TSVpFIiwiQ2FtZXJhIiwiZmllbGRTaXplIiwic3VwZXIiLCJyZXNldCIsInBvaW50ZXJEb3duRXZlbnQiLCJ0b3VjaGVzIiwibW92ZU9yU2NhbGUiLCJkaXN0YW5jZSIsImxvbmdQcmVzc1RpbWVvdXQiLCJoYW5kbGVXaGVlbCIsIm5ld1NjYWxlIiwiZGVsdGFZIiwidHJhbnNsYXRpb24iLCJzY2FsZSIsImhhbmRsZVBvaW50ZXJEb3duIiwicHJldmVudERlZmF1bHQiLCJwb3MiLCJ0b1dvcmxkUG9zIiwiY2xpZW50WCIsImNsaWVudFkiLCJidXR0b24iLCJoYW5kbGVQb2ludGVyTW92ZSIsImRlbHRhWCIsIm1heFgiLCJtYXhZIiwibWluIiwibWF4IiwidG91Y2gwIiwidG91Y2gxIiwiaHlwb3QiLCJ0b3VjaEluZGV4IiwiZmluZEluZGV4IiwicG9pbnRlcklkIiwiaGFuZGxlUG9pbnRlckNhbmNlbCIsImhhbmRsZVBvaW50ZXJPdXQiLCJoYW5kbGVQb2ludGVyVXAiLCJyZWdpc3RlckV2ZW50cyIsIm1pZGRsZVRyYW5zbGF0aW9uIiwid2lkdGgiLCJoZWlnaHQiLCJ2aXNpYmxlVGlsZXMiLCJjYW52YXNSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidGlsZVNpemUiLCJsZWZ0IiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJ0b0NhbnZhc1BvcyIsIm1pZGRsZVRyYW5zbGF0ZSIsInJlY3QiLCJkZXJlZ2lzdGVyRXZlbnRzIiwid29ya2VyIiwiV29ya2VyIiwicHJvbWlzZXMiLCJyZXNwb25zZSIsInJlamVjdCIsInN1Y2Nlc3MiLCJjbWQiLCJ3b3JrZXJDb25uZWN0ZWQiLCJxdWV1ZWRNZXNzYWdlcyIsInBvc3RNZXNzYWdlIiwibm9RdWV1ZSIsIm1zZyIsIm5ld01lc3NhZ2UiLCJzZW5kUGluZyIsInRpbWVvdXQiLCJwaW5nUHJvbWlzZSIsInRpbWVvdXRQcm9taXNlIiwiciIsInJhY2UiLCJpbml0IiwiZmxhZyIsInBpbmdzIiwic2VuZFBpbmdVbnRpbENvbm5lY3QiLCJ0aGVuIiwiYmlnZ2VzdEVsZW1lbnRCeUZpZWxkIiwiZWxlbWVudHMiLCJmaWVsZCIsInJlZHVjZSIsInByZXYiLCJjdXJyIiwiZ2V0QWJzUG9zIiwicm91bmQiLCJpbnRlcnNlY3QiLCJoaXRib3giLCJNZW51IiwidGFsbGVzdEVsZW1lbnQiLCJsb25nZXN0RWxlbWVudCIsImVsZW1lbnRIaXRib3hlcyIsImhvdmVyZWRFbGVtZW50IiwiZW50cmllcyIsInByZXNzZWRFbGVtZW50IiwiZHJhdyIsImJvdW5kcyIsImFjdHVhbFdpZHRoIiwiYWN0dWFsSGVpZ2h0IiwiaW50ZXJhY3RhYmxlIiwicGFyc2UiLCJob3ZlcmVkU3ByaXRlIiwiQ0xPU0VfQlVUVE9OIiwiQkFDS19CVVRUT04iLCJNb2RhbCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwibW9kYWxTaXplIiwibW9kYWxYIiwibW9kYWxZIiwiTU9EQUxfR1JJRF9TSVpFIiwiaW5uZXJNb2RhbEJvdW5kcyIsIlJFVFJZX0JVVFRPTiIsIkVMRU1FTlRTIiwiYmluZCIsIlJFU0VUX0JVVFRPTiIsIk1vZGFsQ29udGFpbmVyIiwibW9kYWwiLCJvcGVuIiwiY2xvc2UiLCJoaWRlIiwiaGlkZGVuIiwicmV2ZWFsIiwiR2FtZSIsInByb3BzIiwiY2FtZXJhIiwiaGFuZGxlUHJlc3MiLCJoYW5kbGVMb25nUHJlc3MiLCJkcmF3V2l0aExpbWl0IiwibGFzdERyYXdUaW1lc3RhbXAiLCJpbml0aWFsaXNlUHJvbWlzZSIsImdhbWVPdmVyIiwibWluZXMiLCJudW1NaW5lcyIsIm1pbmVEZW5zaXR5IiwiZHJhd0FwcGVhcmFuY2UiLCJhcHBlYXJhbmNlRGF0YSIsImNsZWFyUmVjdCIsIk51bWJlciIsIk1BWF9WQUxVRSIsIk1JTl9WQUxVRSIsInlLZXkiLCJ4S2V5IiwiaGFuZGxlU3RhdGUiLCJzdGF0ZURhdGEiLCJzdGF0ZSIsImhhbmRsZUVuZEdhbWVNb2RhbCIsIm1vZGFsQ29uc3RydWN0b3IiLCJyZXNldEVsZW1lbnRJZCIsImhhbmRsZUJhY2siLCJFQVNZX0JVVFRPTiIsIk1FRElVTV9CVVRUT04iLCJIQVJEX0JVVFRPTiIsIklORklOSVRFX0JVVFRPTiIsImZ1bGxzY3JlZW5DYW52YXMiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJ3ZWJraXRJbWFnZVNtb290aGluZ0VuYWJsZWQiLCJtb3pJbWFnZVNtb290aGluZ0VuYWJsZWQiLCJtYWluTWVudSIsImNsZWFyIiwiZ2FtZVByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==