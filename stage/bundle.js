(()=>{"use strict";var e={250:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(537),s=n.n(i),r=n(879),o=n.n(r)()(s());o.push([e.id,"body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}","",{version:3,sources:["webpack://./assets/styles.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,SAAS;AACb;AACA;IACI,iCAAiC;IACjC,oCAAoC;IACpC,0BAA0B;IAC1B,4BAA4B;IAC5B,kBAAkB;AACtB",sourcesContent:["body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}"],sourceRoot:""}]);const a=o},879:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,s,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);i&&o[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),s&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=s):d[4]="".concat(s)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(s," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var r={},o=[],a=0;a<e.length;a++){var h=e[a],c=i.base?h[0]+i.base:h[0],d=r[c]||0,l="".concat(c," ").concat(d);r[c]=d+1;var u=n(l),p={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=s(p,i);i.byIndex=a,t.splice(a,0,{identifier:l,updater:m,references:1})}o.push(l)}return o}function s(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,s){var r=i(e=e||[],s=s||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var a=n(r[o]);t[a].references--}for(var h=i(e,s),c=0;c<r.length;c++){var d=n(r[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}r=h}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,s&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},882:(e,t,n)=>{e.exports=n.p+"8777ac99e8bfc6c31260.png"}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var r=t[i]={id:i,exports:{}};return e[i](r,r.exports,n),r.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.u=e=>e+".bundle.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{var e=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,t=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,i=/[^-+\dA-Z]/g,s={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},r={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(e).padStart(t,"0")},a=function(e){var t=e.y,n=e.m,i=e.d,s=e._,r=e.dayName,o=e.short,a=void 0!==o&&o,h=new Date,c=new Date;c.setDate(c[s+"Date"]()-1);var d=new Date;return d.setDate(d[s+"Date"]()+1),h[s+"FullYear"]()===t&&h[s+"Month"]()===n&&h[s+"Date"]()===i?a?"Tdy":"Today":c[s+"FullYear"]()===t&&c[s+"Month"]()===n&&c[s+"Date"]()===i?a?"Ysd":"Yesterday":d[s+"FullYear"]()===t&&d[s+"Month"]()===n&&d[s+"Date"]()===i?a?"Tmw":"Tomorrow":r},h=function(e){var t=new Date(e.getFullYear(),e.getMonth(),e.getDate());t.setDate(t.getDate()-(t.getDay()+6)%7+3);var n=new Date(t.getFullYear(),0,4);n.setDate(n.getDate()-(n.getDay()+6)%7+3);var i=t.getTimezoneOffset()-n.getTimezoneOffset();t.setHours(t.getHours()-i);var s=(t-n)/6048e5;return 1+Math.floor(s)},c=function(e){var t=e.getDay();return 0===t&&(t=7),t},d=function(e){return(String(e).match(t)||[""]).pop().replace(i,"").replace(/GMT\+0000/g,"UTC")};function l(t){const n=new Date;console.log("("+function(t,n,i,l){if(1!==arguments.length||"string"!=typeof t||/\d/.test(t)||(n=t,t=void 0),(t=t||0===t?t:new Date)instanceof Date||(t=new Date(t)),isNaN(t))throw TypeError("Invalid date");var u=(n=String(s[n]||n||s.default)).slice(0,4);"UTC:"!==u&&"GMT:"!==u||(n=n.slice(4),i=!0,"GMT:"===u&&(l=!0));var p=function(){return i?"getUTC":"get"},m=function(){return t[p()+"Date"]()},v=function(){return t[p()+"Day"]()},w=function(){return t[p()+"Month"]()},f=function(){return t[p()+"FullYear"]()},y=function(){return t[p()+"Hours"]()},E=function(){return t[p()+"Minutes"]()},g=function(){return t[p()+"Seconds"]()},x=function(){return t[p()+"Milliseconds"]()},b=function(){return i?0:t.getTimezoneOffset()},D=function(){return h(t)},M=function(){return c(t)},T={d:function(){return m()},dd:function(){return o(m())},ddd:function(){return r.dayNames[v()]},DDD:function(){return a({y:f(),m:w(),d:m(),_:p(),dayName:r.dayNames[v()],short:!0})},dddd:function(){return r.dayNames[v()+7]},DDDD:function(){return a({y:f(),m:w(),d:m(),_:p(),dayName:r.dayNames[v()+7]})},m:function(){return w()+1},mm:function(){return o(w()+1)},mmm:function(){return r.monthNames[w()]},mmmm:function(){return r.monthNames[w()+12]},yy:function(){return String(f()).slice(2)},yyyy:function(){return o(f(),4)},h:function(){return y()%12||12},hh:function(){return o(y()%12||12)},H:function(){return y()},HH:function(){return o(y())},M:function(){return E()},MM:function(){return o(E())},s:function(){return g()},ss:function(){return o(g())},l:function(){return o(x(),3)},L:function(){return o(Math.floor(x()/10))},t:function(){return y()<12?r.timeNames[0]:r.timeNames[1]},tt:function(){return y()<12?r.timeNames[2]:r.timeNames[3]},T:function(){return y()<12?r.timeNames[4]:r.timeNames[5]},TT:function(){return y()<12?r.timeNames[6]:r.timeNames[7]},Z:function(){return l?"GMT":i?"UTC":d(t)},o:function(){return(b()>0?"-":"+")+o(100*Math.floor(Math.abs(b())/60)+Math.abs(b())%60,4)},p:function(){return(b()>0?"-":"+")+o(Math.floor(Math.abs(b())/60),2)+":"+o(Math.floor(Math.abs(b())%60),2)},S:function(){return["th","st","nd","rd"][m()%10>3?0:(m()%100-m()%10!=10)*m()%10]},W:function(){return D()},WW:function(){return o(D())},N:function(){return M()}};return n.replace(e,(function(e){return e in T?T[e]():e.slice(1,e.length-1)}))}(n,"yyyy/mm/dd HH:MM:ss.l")+") JS: "+t)}function u(e,t,n){void 0!==t&&(e=Math.min(e,Math.pow(10,t)-1),e=Math.max(e,-(Math.pow(10,t)-1)));let i=e.toString(10);return n&&e>=0&&(i=[...Array(t-i.length)].map((()=>"0")).join("").concat(i)),i}const p=10,m=p,v={TILES:{EMPTY:{x:0,y:0,w:p,h:p},1:{x:10,y:0,w:p,h:p},2:{x:20,y:0,w:p,h:p},3:{x:30,y:0,w:p,h:p},4:{x:40,y:0,w:p,h:p},5:{x:50,y:0,w:p,h:p},6:{x:60,y:0,w:p,h:p},7:{x:70,y:0,w:p,h:p},8:{x:80,y:0,w:p,h:p},MINE:{x:90,y:0,w:p,h:p},HIDDEN:{x:100,y:0,w:p,h:p},FLAG:{x:110,y:0,w:p,h:p}},MODAL:{BACK:{x:0,y:90,w:24,h:m},BACK_HOVERED:{x:24,y:90,w:24,h:m}},MAIN_MENU:{TITLE:{x:0,y:10,w:95,h:m},EASY:{x:0,y:20,w:26,h:m},EASY_HOVERED:{x:26,y:20,w:26,h:m},MEDIUM:{x:0,y:30,w:35,h:m},MEDIUM_HOVERED:{x:35,y:30,w:30,h:m},HARD:{x:0,y:40,w:25,h:m},HARD_HOVERED:{x:25,y:40,w:26,h:m},CUSTOM:{x:0,y:50,w:38,h:m},CUSTOM_HOVERED:{x:38,y:50,w:26,h:m},INFINITE:{x:0,y:60,w:43,h:m},INFINITE_HOVERED:{x:43,y:60,w:43,h:m}},RETRY_MODAL:{TITLE:{x:0,y:70,w:45,h:m},RETRY:{x:0,y:80,w:30,h:m},RETRY_HOVERED:{x:30,y:80,w:30,h:m}},SUCCESS_MODAL:{TITLE:{x:0,y:100,w:52,h:m},RESET:{x:0,y:110,w:53,h:m},RESET_HOVERED:{x:53,y:110,w:53,h:m}},ICONS:{0:{x:0,y:120,w:7,h:m},1:{x:7,y:120,w:7,h:m},2:{x:14,y:120,w:7,h:m},3:{x:21,y:120,w:7,h:m},4:{x:28,y:120,w:7,h:m},5:{x:35,y:120,w:7,h:m},6:{x:42,y:120,w:7,h:m},7:{x:49,y:120,w:7,h:m},8:{x:56,y:120,w:7,h:m},9:{x:63,y:120,w:7,h:m},":":{x:70,y:120,w:7,h:m},"-":{x:77,y:120,w:7,h:m},INFINITY:{x:84,y:120,w:14,h:m},CLOCK:{x:98,y:120,w:10,h:m},CROSS:{x:108,y:120,w:10,h:m},MINE:{x:0,y:10,w:10,h:m}}},w=document.getElementById("canvas"),f=w.getContext("2d"),y=new Image,E=new Promise((e=>{y.addEventListener("load",(()=>{l("Finished loading spritesheet"),e()}))}));function g(e,t){f.drawImage(y,e.x,e.y,e.w,e.h,t.x,t.y,t.w,t.h)}function x(e,t,n){const i={w:n/m*v.ICONS[0].w,h:n};let s=t.x;for(const n of e){const e=Object.assign({x:s,y:t.y},i);g(v.ICONS[n],e),s+=e.w}}y.src=new URL(n(882),n.b).toString();class b{constructor(){this.eventListeners=new Map}addEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,[...i,t])}removeEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,i.filter((e=>e===t)))}callEventListeners(e,t){var n;(null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[]).forEach((e=>e(t)))}}const D=e=>({x:e.x,y:e.y}),M=(e,t)=>e.x>t.x&&e.y>t.y&&e.x<t.x+t.w&&e.y<t.y+t.h;function T(e){l("(camera) "+e)}const S=30;class I extends b{constructor(e,t){super(),this.bounds=e,this.fieldSize=t,this.reset(),this.pointerDownEvent={touches:[],moveOrScale:!1,moveDistance:0,pinchDistance:null,longPressTimeout:null},this.lastPressTimestamp=0,this.handleWheel=e=>{if(this.intersect(e)){e.preventDefault();const t=e.deltaY>0?.8:1.25;this.zoom(t,e.clientX,e.clientY)}},this.handlePointerDown=e=>{this.intersect(e)&&(e.preventDefault(),0==this.pointerDownEvent.touches.length?(T("first pointerdown"),this.pointerDownEvent.longPressTimeout=setTimeout((()=>{0===this.pointerDownEvent.touches.length||this.pointerDownEvent.moveOrScale||(T("longpress timeout"),this.callEventListeners("longpress",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button}))}),200),this.pointerDownEvent.moveOrScale=!1,this.pointerDownEvent.moveDistance=0,this.pointerDownEvent.pinchDistance=null):T("another pointerdown"),this.pointerDownEvent.touches.push(e))},this.handlePointerMove=e=>{if(0===this.pointerDownEvent.touches.length)return;const t=this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId));if(-1===t)return;e.preventDefault();const n=this.pointerDownEvent.touches[t];if(this.pointerDownEvent.touches[t]=e,1===this.pointerDownEvent.touches.length){const t={x:e.clientX-n.clientX,y:e.clientY-n.clientY},i=Math.hypot(t.x,t.y);if(this.pointerDownEvent.moveDistance+=i,!this.pointerDownEvent.moveOrScale&&this.pointerDownEvent.moveDistance<5)return;if(this.translation.x+=t.x,this.translation.y+=t.y,void 0!==this.fieldSize){const e={x:this.fieldSize.w*S*this.scale,y:this.fieldSize.h*S*this.scale},t={x:this.bounds.w/2-e.x,y:this.bounds.h/2-e.y},n={x:this.bounds.w/2,y:this.bounds.h/2};this.translation.x=Math.min(this.translation.x,n.x),this.translation.x=Math.max(this.translation.x,t.x),this.translation.y=Math.min(this.translation.y,n.y),this.translation.y=Math.max(this.translation.y,t.y)}}else{const e=this.pointerDownEvent.touches[0],t=this.pointerDownEvent.touches[1],n=Math.hypot(e.clientX-t.clientX,e.clientY-t.clientY);if(null!=this.pointerDownEvent.pinchDistance){const i=n/this.pointerDownEvent.pinchDistance,s={x:(e.clientX+t.clientX)/2,y:(e.clientY+t.clientY)/2};this.zoom(i,s.x,s.y)}this.pointerDownEvent.pinchDistance=n}this.pointerDownEvent.moveOrScale||(T("pointer moved, not press event"),this.pointerDownEvent.moveOrScale=!0,clearTimeout(this.pointerDownEvent.longPressTimeout)),this.callEventListeners("move",{})},this.handlePointerCancel=e=>{T("pointercancel")},this.handlePointerOut=e=>{0!=this.pointerDownEvent.touches.length&&-1!==this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId))&&(e.preventDefault(),this.pointerDownEvent.touches.length>1?(T("pointerout: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),this.pointerDownEvent.pinchDistance=null):(T("pointerout: no press event"),clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]))},this.handlePointerUp=e=>{if(0!==this.pointerDownEvent.touches.length&&-1!==this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId))){if(e.preventDefault(),this.pointerDownEvent.touches.length>1)return T("pointerup: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),void(this.pointerDownEvent.pinchDistance=null);if(this.pointerDownEvent.moveOrScale)T("pointerup");else{T("pointerup: no movement or scaling, press event");const t=Date.now();t-this.lastPressTimestamp>50?(this.lastPressTimestamp=t,this.callEventListeners("press",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button})):T(`last press was ${t-this.lastPressTimestamp}ms ago, no event (min50ms)`)}clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]}},this.registerEvents()}intersect(e){return M({x:e.clientX,y:e.clientY},this.bounds)}middleTranslation(){return void 0===this.fieldSize?{x:0,y:0}:{x:this.bounds.w/2-this.scale*(this.fieldSize.w*S/2),y:this.bounds.h/2-this.scale*(this.fieldSize.h*S/2)}}toCanvasPos(e,t){return{x:this.bounds.x+this.translation.x+e*S*this.scale,y:this.bounds.y+this.translation.y+t*S*this.scale}}toWorldPos(e,t){return{x:Math.floor((e-this.translation.x-this.bounds.x)/this.scale/S),y:Math.floor((t-this.translation.y-this.bounds.y)/this.scale/S)}}zoom(e,t,n){const i=this.scale*e;i>1&&i<4&&(this.translation.x-=(t-this.translation.x)*(e-1),this.translation.y-=(n-this.translation.y)*(e-1),this.scale=i,this.callEventListeners("move",{}))}draw(e){return t=this,n=void 0,s=function*(){const t=this.visibleTiles;for(let n=t.y;n<t.y+t.h;n++)for(let i=t.x;i<t.x+t.w;i++)if(e[n]&&e[n][i]){const t=v.TILES[e[n][i]],s=this.toCanvasPos(i,n);g(t,{x:s.x,y:s.y,w:S*this.scale,h:S*this.scale})}},new((i=void 0)||(i=Promise))((function(e,r){function o(e){try{h(s.next(e))}catch(e){r(e)}}function a(e){try{h(s.throw(e))}catch(e){r(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((s=s.apply(t,n||[])).next())}));var t,n,i,s}get visibleTiles(){const e=this.toWorldPos(this.bounds.x,this.bounds.y),t=this.toWorldPos(this.bounds.x+this.bounds.w,this.bounds.y+this.bounds.h);return{x:e.x-1,y:e.y-1,w:t.x-e.x+2,h:t.y-e.y+2}}reset(){void 0!==this.fieldSize?(this.scale=Math.min(this.bounds.w/(this.fieldSize.w*S*1.1),this.bounds.h/(this.fieldSize.h*S*1.1)),this.scale=Math.max(this.scale,1),this.scale=Math.min(this.scale,4)):this.scale=2,this.translation=this.middleTranslation()}resize(e){this.translation.x+=(e.w-this.bounds.w)/2,this.translation.y+=(e.h-this.bounds.h)/2,this.bounds=e}registerEvents(){w.addEventListener("wheel",this.handleWheel),w.addEventListener("pointerdown",this.handlePointerDown),w.addEventListener("pointermove",this.handlePointerMove),w.addEventListener("pointercancel",this.handlePointerCancel),w.addEventListener("pointerout",this.handlePointerOut),w.addEventListener("pointerup",this.handlePointerUp)}deregisterEvents(){w.removeEventListener("wheel",this.handleWheel),w.removeEventListener("pointerdown",this.handlePointerDown),w.removeEventListener("pointermove",this.handlePointerMove),w.removeEventListener("pointercancel",this.handlePointerCancel),w.removeEventListener("pointerout",this.handlePointerOut),w.removeEventListener("pointerup",this.handlePointerUp)}}var L=function(e,t,n,i){return new(n||(n=Promise))((function(s,r){function o(e){try{h(i.next(e))}catch(e){r(e)}}function a(e){try{h(i.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};class N extends b{constructor(e,t){super(),this.bounds=e,this.remainingMines=t,this.currentElapsed=0,this.clock=null,this.handlePointerDown=e=>{M({x:e.clientX,y:e.clientY},this.closeHitbox)&&this.callEventListeners("close",{})}}startClock(){let e=Date.now(),t=Math.floor(this.currentElapsed/1e3);this.clock=setInterval((()=>L(this,void 0,void 0,(function*(){const n=Date.now();this.currentElapsed+=n-e,Math.floor(this.currentElapsed/1e3)!==t&&(yield this.draw(),t=Math.floor(this.currentElapsed/1e3)),e=n}))),100)}stopClock(){null!=this.clock&&clearInterval(this.clock)}resize(e){this.bounds=e}draw(){return L(this,void 0,void 0,(function*(){return new Promise((e=>{g({x:v.TILES.HIDDEN.x+.1*v.TILES.HIDDEN.w,y:v.TILES.HIDDEN.y,w:.8*v.TILES.HIDDEN.w,h:v.TILES.HIDDEN.h},this.bounds),e()})).then((()=>{const e=.8*this.bounds.h,t=this.bounds.y+(this.bounds.h/2-e/2);{const n=u(Math.floor(this.currentElapsed/1e3),3,!0),i=function(e,t){return t/m*v.ICONS[0].w*e.length}(n,e),s={x:this.bounds.x+(this.bounds.w/2-i),y:t};x(n,s,e);const r={x:s.x-1.1*e,y:t,w:e,h:e};g(v.ICONS.CLOCK,r)}{const n={x:this.bounds.x+this.bounds.w/2,y:t,w:e,h:e};g(v.ICONS.MINE,n);const i={x:n.x+n.w,y:t};if(this.remainingMines===1/0){const t=Object.assign(Object.assign({},i),{w:e/v.ICONS.INFINITY.h*v.ICONS.INFINITY.w,h:e});g(v.ICONS.INFINITY,t)}else x(u(this.remainingMines,2,!0),i,e)}this.closeHitbox={x:this.bounds.x+this.bounds.w-this.bounds.h,y:this.bounds.y,w:this.bounds.h,h:this.bounds.h},g(v.ICONS.CROSS,this.closeHitbox)}))}))}registerEvents(){w.addEventListener("pointerdown",this.handlePointerDown)}deregisterEvents(){w.removeEventListener("pointerdown",this.handlePointerDown)}}var A=function(e,t,n,i){return new(n||(n=Promise))((function(s,r){function o(e){try{h(i.next(e))}catch(e){r(e)}}function a(e){try{h(i.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};l("Creating WASM worker");const C=new Worker(new URL(n.p+n.u(303),n.b)),O=new Map;l("Registering WebIO event listener for Go"),C.addEventListener("message",(e=>{if(e.data){const t=e.data,[n,i]=O.get(t.id);t.success?n(t.data):(l("Error response for '"+t.cmd+"': "+t.data),i(t.data))}}));let P=!1;const R=[];function H(e,t,n){return new Promise(((i,s)=>{const r=function(e,t){return{cmd:e,id:e+Date.now(),data:t}}(e,t);O.set(r.id,[i,s]),n||P?C.postMessage(r):(l(e+" message received, but worker hasn't connected yet. Adding to queue"),R.push(r))}))}function _(e){return A(this,void 0,void 0,(function*(){const t=H("ping",null,!0),n=new Promise(((t,n)=>setTimeout(n,e)));try{return yield Promise.race([t,n]),P=!0,R.forEach((e=>{C.postMessage(e)})),R.length=0,!0}catch(e){return!1}}))}function Y(e){return H("init",e)}function U(e){return H("flag",e)}(function(){return A(this,void 0,void 0,(function*(){let e=0,t=100;for(;!P&&e<5;)l("Sending ping with timeout "+t+"ms"),e++,(yield _(t))||(t*=2,l("Ping timeout reached"));if(e>=5)throw new Error("Max pings 5 reached, assuming WASM module is not functional")}))})().then((()=>{l("Response to ping received, worker connected")}));const k=(e,t)=>e.reduce(((e,n)=>e.sprite[t]*e.scale>n.sprite[t]*n.scale?e:n));class z extends b{constructor(e){super(),this.elements=e,this.tallestElement=k(e,"h"),this.longestElement=k(e,"w"),this.elementHitboxes=new Map,this.hoveredElement=null,this.handlePointerMove=e=>{for(const[t,n]of this.elementHitboxes.entries())if(M({x:e.clientX,y:e.clientY},n))return void(this.hoveredElement!==t&&(this.hoveredElement=t,this.callEventListeners("hover",{hoveredElement:t})));null!==this.hoveredElement&&(this.hoveredElement=null,this.callEventListeners("hover",{hoveredElement:null}))},this.handlePointerDown=e=>{for(const[t,n]of this.elementHitboxes.entries())M({x:e.clientX,y:e.clientY},n)&&this.callEventListeners("press",{pressedElement:t});return null},this.registerEvents()}draw(e){return t=this,n=void 0,s=function*(){e||(e={x:0,y:0,w:w.width,h:w.height});let t=e.h*(.5/this.elements.length)/(this.tallestElement.sprite.h*this.tallestElement.scale);return t*this.longestElement.sprite.w*this.longestElement.scale>=.9*e.w&&(t=.9*e.w/(this.longestElement.sprite.w*this.longestElement.scale)),new Promise((n=>{let i=e.y+this.tallestElement.sprite.h*t*.5;this.elements.forEach((n=>{const s=n.sprite.w*n.scale*t,r=n.sprite.h*n.scale*t,o={x:e.x+(e.w/2-s/2),y:i,w:s,h:r};n.interactable&&this.elementHitboxes.set(n.id,o);const a=(h=n.sprite,JSON.parse(JSON.stringify(h)));var h;n.id===this.hoveredElement&&"hoveredSprite"in n&&(a.x=n.hoveredSprite.x,a.y=n.hoveredSprite.y),g(a,o),i+=1.5*r})),n()}))},new((i=void 0)||(i=Promise))((function(e,r){function o(e){try{h(s.next(e))}catch(e){r(e)}}function a(e){try{h(s.throw(e))}catch(e){r(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((s=s.apply(t,n||[])).next())}));var t,n,i,s}registerEvents(){w.addEventListener("pointermove",this.handlePointerMove),w.addEventListener("pointerdown",this.handlePointerDown)}deregisterEvents(){w.removeEventListener("pointermove",this.handlePointerMove),w.removeEventListener("pointerdown",this.handlePointerDown)}}const F={id:"modal.close_button",sprite:v.ICONS.CROSS,scale:1},j={id:"modal.back_button",sprite:v.MODAL.BACK,hoveredSprite:D(v.MODAL.BACK_HOVERED),scale:1.25,interactable:!0};class B extends z{constructor(e){super(e)}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,s=function*(){yield new Promise((e=>{const t=w.width,n=w.height;f.fillStyle="rgba(0, 0, 0, 0.4)",f.fillRect(0,0,t,n);const i=t>n?.8*n:.8*t,s=t/2-i/2,r=n/2-i/2,o=i/10;for(let e=0;e<10;e++)for(let t=0;t<10;t++){const n={x:s+t*o,y:r+e*o,w:o,h:o};let i={x:v.TILES.EMPTY.x+v.TILES.EMPTY.w/2,y:v.TILES.EMPTY.y+v.TILES.EMPTY.h/2,w:1,h:1};0!==t&&9!==t&&0!==e&&9!==e||(i=v.TILES.HIDDEN),g(i,n),9===t&&0===e&&(g(F.sprite,n),this.elementHitboxes.set(F.id,n))}e({x:s+o,y:r+o,w:i-2*o,h:i-2*o})})).then((t=>e.draw.call(this,t)))},new((i=void 0)||(i=Promise))((function(e,r){function o(e){try{h(s.next(e))}catch(e){r(e)}}function a(e){try{h(s.throw(e))}catch(e){r(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((s=s.apply(t,n||[])).next())}));var t,n,i,s}}const W={id:"modal.retry.title",sprite:v.RETRY_MODAL.TITLE,scale:1},V={id:"modal.retry.retry_button",sprite:v.RETRY_MODAL.RETRY,hoveredSprite:D(v.RETRY_MODAL.RETRY_HOVERED),scale:1.25,interactable:!0},X=[W,V,j],Z=B.bind(B,X),J={id:"modal.success.title",sprite:v.SUCCESS_MODAL.TITLE,scale:1},G={id:"modal.success.reset_button",sprite:v.SUCCESS_MODAL.RESET,hoveredSprite:D(v.SUCCESS_MODAL.RESET_HOVERED),scale:1.25,interactable:!0},$=[J,G,j],K=B.bind(B,$);var q,Q=function(e,t,n,i){return new(n||(n=Promise))((function(s,r){function o(e){try{h(i.next(e))}catch(e){r(e)}}function a(e){try{h(i.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))},ee=function(e,t,n,i,s){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?s.call(e,n):s?s.value=n:t.set(e,n),n},te=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class ne{constructor(){q.set(this,void 0),this.modal=null,ee(this,q,!0,"f")}open(e){this.modal=e,ee(this,q,!1,"f")}close(){if(!this.modal)throw new Error("No modal to close");this.hide(),this.modal=null}get hidden(){return te(this,q,"f")}hide(){if(!this.modal)throw new Error("No modal to hide");this.modal.deregisterEvents(),ee(this,q,!0,"f")}reveal(){if(!this.modal)throw new Error("No modal to reveal");this.modal.registerEvents(),ee(this,q,!1,"f")}draw(){return Q(this,void 0,void 0,(function*(){te(this,q,"f")||(yield this.modal.draw())}))}deregisterEvents(){var e;null===(e=this.modal)||void 0===e||e.deregisterEvents()}}function ie(e){e.preventDefault()}q=new WeakMap;class se{constructor(e){this.props=e;const t=se.bounds();this.handleResize=()=>{const e=se.bounds();this.bar.resize(e.bar),this.camera.resize(e.camera),this.draw()},this.handleState=e=>{switch(this.bar.currentElapsed=e.timer,e.state){case"win":this.gameOver=!0,this.bar.stopClock(),l("Win detected, displaying success modal"),this.createEndGameModal(K,G.id);break;case"loss":this.gameOver=!0,this.bar.stopClock(),l("Loss detected, displaying retry modal"),setTimeout((()=>this.createEndGameModal(Z,V.id)),1e3)}},this.handleFlag=e=>{this.bar.remainingMines=e.remainingMines,this.draw(!0)},this.handlePress=e=>{var t;this.gameOver?this.modal.hidden&&(this.modal.reveal(),this.bar.deregisterEvents(),this.camera.deregisterEvents(),this.draw()):0===e.button?(t=e.pos,H("uncover",t)).then((e=>Q(this,void 0,void 0,(function*(){this.gameStarted||(this.gameStarted=!0,this.bar.startClock()),yield this.draw(!0),this.handleState(e)})))):2===e.button&&U(e.pos).then(this.handleFlag)},this.handleLongPress=e=>{this.gameOver||0!==e.button||U(e.pos).then(this.handleFlag)};let n,i=1/0;"numMines"in this.props&&(i=this.props.numMines),this.bar=new N(t.bar,i),this.bar.addEventListener("close",(()=>{this.bar.stopClock(),this.deregisterEvents(),this.props.handleBack()})),"w"in this.props&&"h"in this.props&&(n={w:this.props.w,h:this.props.h}),this.camera=new I(t.camera,n),this.camera.addEventListener("press",this.handlePress),this.camera.addEventListener("longpress",this.handleLongPress),this.camera.addEventListener("move",(()=>this.draw())),this.modal=new ne,this.appearance=null,this.lastAppearanceRequestTimestamp=0,this.reset(),this.registerEvents()}static bounds(){const e={x:0,y:0,w:w.width,h:Math.min(.075*w.width,.075*w.height)};return{bar:e,camera:{x:0,y:e.y+e.h,w:w.width,h:w.height-(e.y+e.h)}}}reset(){let e;if(this.camera.reset(),this.bar.stopClock(),this.bar.currentElapsed=0,"numMines"in this.props&&(this.bar.remainingMines=this.props.numMines),this.gameStarted=!1,this.gameOver=!1,"w"in this.props&&"h"in this.props&&"numMines"in this.props)e=Y({width:this.props.w,height:this.props.h,mines:this.props.numMines});else{if(!("mineDensity"in this.props))throw new Error("unknown game props type");e=Y({mineDensity:this.props.mineDensity})}e.then((()=>this.draw(!0)))}createEndGameModal(e,t){return Q(this,void 0,void 0,(function*(){const n=new e;this.modal.open(n),n.addEventListener("hover",(()=>this.draw())),n.addEventListener("press",(e=>{switch(e.pressedElement){case F.id:this.modal.hide(),this.bar.registerEvents(),this.camera.registerEvents(),this.draw();break;case t:this.modal.close(),this.bar.registerEvents(),this.camera.registerEvents(),this.reset(),this.draw();break;case j.id:this.deregisterEvents(),this.props.handleBack()}})),this.bar.deregisterEvents(),this.camera.deregisterEvents(),yield this.draw()}))}shouldUpdateAppearance(){if(null==this.appearance)return!0;if(Date.now()-this.lastAppearanceRequestTimestamp<100)return!1;const e=this.camera.visibleTiles;return e.x<this.appearance.rect.x+this.appearance.rect.w/6||e.y<this.appearance.rect.y+this.appearance.rect.h/6||e.x+e.w>this.appearance.rect.x+this.appearance.rect.w-this.appearance.rect.w/6||e.y+e.h>this.appearance.rect.y+this.appearance.rect.h-this.appearance.rect.h/6}draw(e){return Q(this,void 0,void 0,(function*(){if(e||this.shouldUpdateAppearance()){const e=this.camera.visibleTiles;e.x-=e.w/2,e.y-=e.h/2,e.w*=2,e.h*=2,l(`redrawing, rect x${e.x} y ${e.y} w ${e.w} h ${e.h}`),this.lastAppearanceRequestTimestamp=Date.now(),this.appearance={data:yield(t=e,H("appearance",t)),rect:e}}var t;f.clearRect(0,0,w.width,w.height),yield this.camera.draw(this.appearance.data).then((()=>this.bar.draw())).then((()=>this.modal.draw()))}))}registerEvents(){window.addEventListener("resize",this.handleResize),w.addEventListener("contextmenu",ie),this.modal.hidden&&(this.bar.registerEvents(),this.camera.registerEvents())}deregisterEvents(){window.removeEventListener("resize",this.handleResize),w.removeEventListener("contextmenu",ie),this.bar.deregisterEvents(),this.camera.deregisterEvents(),this.modal.deregisterEvents()}}const re={id:"menu.main.title",sprite:v.MAIN_MENU.TITLE,scale:1},oe={id:"menu.main.easy_button",sprite:v.MAIN_MENU.EASY,hoveredSprite:D(v.MAIN_MENU.EASY_HOVERED),scale:1.25,interactable:!0},ae={id:"menu.main.medium_button",sprite:v.MAIN_MENU.MEDIUM,hoveredSprite:D(v.MAIN_MENU.MEDIUM_HOVERED),scale:1.25,interactable:!0},he={id:"menu.main.hard_button",sprite:v.MAIN_MENU.HARD,hoveredSprite:D(v.MAIN_MENU.HARD_HOVERED),scale:1.25,interactable:!0},ce={id:"menu.main.infinite_button",sprite:v.MAIN_MENU.INFINITE,hoveredSprite:D(v.MAIN_MENU.INFINITE_HOVERED),scale:1.25,interactable:!0},de=[re,oe,ae,he,ce];var le=n(379),ue=n.n(le),pe=n(795),me=n.n(pe),ve=n(569),we=n.n(ve),fe=n(565),ye=n.n(fe),Ee=n(216),ge=n.n(Ee),xe=n(589),be=n.n(xe),De=n(250),Me={};function Te(){w.width=window.innerWidth,w.height=window.innerHeight,f.imageSmoothingEnabled=!1,f.webkitImageSmoothingEnabled=!1,f.mozImageSmoothingEnabled=!1}Me.styleTagTransform=be(),Me.setAttributes=ye(),Me.insert=we().bind(null,"head"),Me.domAPI=me(),Me.insertStyleElement=ge(),ue()(De.Z,Me),De.Z&&De.Z.locals&&De.Z.locals,window.addEventListener("resize",Te),Te();const Se=new class extends z{constructor(){super(de),super.addEventListener("press",(()=>this.draw())),super.addEventListener("hover",(()=>this.draw())),this.handleResize=()=>this.draw(),this.registerEvents()}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,s=function*(){return function(e){return t=this,n=void 0,s=function*(){e||(e={x:0,y:0,w:w.width,h:w.height}),f.clearRect(e.x,e.y,e.w,e.h)},new((i=void 0)||(i=Promise))((function(e,r){function o(e){try{h(s.next(e))}catch(e){r(e)}}function a(e){try{h(s.throw(e))}catch(e){r(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((s=s.apply(t,n||[])).next())}));var t,n,i,s}().then((()=>e.draw.call(this)))},new((i=void 0)||(i=Promise))((function(e,r){function o(e){try{h(s.next(e))}catch(e){r(e)}}function a(e){try{h(s.throw(e))}catch(e){r(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((s=s.apply(t,n||[])).next())}));var t,n,i,s}registerEvents(){super.registerEvents(),window.addEventListener("resize",this.handleResize)}deregisterEvents(){super.deregisterEvents(),window.removeEventListener("resize",this.handleResize)}};Se.addEventListener("press",(e=>{let t;switch(Se.deregisterEvents(),e.pressedElement){case oe.id:t={w:9,h:9,numMines:10};break;case ae.id:t={w:16,h:16,numMines:40};break;case he.id:t={w:30,h:16,numMines:99};break;case ce.id:t={mineDensity:40}}new se(Object.assign(Object.assign({},t),{handleBack:()=>{Se.registerEvents(),Se.draw()}}))})),E.then((()=>Se.draw()))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,