(()=>{"use strict";var e={250:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(537),r=n.n(i),s=n(645),o=n.n(s)()(r());o.push([e.id,"body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}","",{version:3,sources:["webpack://./assets/styles.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,SAAS;AACb;AACA;IACI,iCAAiC;IACjC,oCAAoC;IACpC,0BAA0B;IAC1B,4BAA4B;IAC5B,kBAAkB;AACtB",sourcesContent:["body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}"],sourceRoot:""}]);const a=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,s){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);i&&o[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var s={},o=[],a=0;a<e.length;a++){var h=e[a],c=i.base?h[0]+i.base:h[0],d=s[c]||0,l="".concat(c," ").concat(d);s[c]=d+1;var u=n(l),p={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=r(p,i);i.byIndex=a,t.splice(a,0,{identifier:l,updater:m,references:1})}o.push(l)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var s=i(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<s.length;o++){var a=n(s[o]);t[a].references--}for(var h=i(e,r),c=0;c<s.length;c++){var d=n(s[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=h}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},882:(e,t,n)=>{e.exports=n.p+"16579aa28cba396948f1.png"}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.u=e=>e+".bundle.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{var e=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,t=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,i=/[^-+\dA-Z]/g,r={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},s={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(e).padStart(t,"0")},a=function(e){var t=e.y,n=e.m,i=e.d,r=e._,s=e.dayName,o=e.short,a=void 0!==o&&o,h=new Date,c=new Date;c.setDate(c[r+"Date"]()-1);var d=new Date;return d.setDate(d[r+"Date"]()+1),h[r+"FullYear"]()===t&&h[r+"Month"]()===n&&h[r+"Date"]()===i?a?"Tdy":"Today":c[r+"FullYear"]()===t&&c[r+"Month"]()===n&&c[r+"Date"]()===i?a?"Ysd":"Yesterday":d[r+"FullYear"]()===t&&d[r+"Month"]()===n&&d[r+"Date"]()===i?a?"Tmw":"Tomorrow":s},h=function(e){var t=new Date(e.getFullYear(),e.getMonth(),e.getDate());t.setDate(t.getDate()-(t.getDay()+6)%7+3);var n=new Date(t.getFullYear(),0,4);n.setDate(n.getDate()-(n.getDay()+6)%7+3);var i=t.getTimezoneOffset()-n.getTimezoneOffset();t.setHours(t.getHours()-i);var r=(t-n)/6048e5;return 1+Math.floor(r)},c=function(e){var t=e.getDay();return 0===t&&(t=7),t},d=function(e){return(String(e).match(t)||[""]).pop().replace(i,"").replace(/GMT\+0000/g,"UTC")};function l(t){const n=new Date;console.log("("+function(t,n,i,l){if(1!==arguments.length||"string"!=typeof t||/\d/.test(t)||(n=t,t=void 0),(t=t||0===t?t:new Date)instanceof Date||(t=new Date(t)),isNaN(t))throw TypeError("Invalid date");var u=(n=String(r[n]||n||r.default)).slice(0,4);"UTC:"!==u&&"GMT:"!==u||(n=n.slice(4),i=!0,"GMT:"===u&&(l=!0));var p=function(){return i?"getUTC":"get"},m=function(){return t[p()+"Date"]()},v=function(){return t[p()+"Day"]()},w=function(){return t[p()+"Month"]()},f=function(){return t[p()+"FullYear"]()},y=function(){return t[p()+"Hours"]()},E=function(){return t[p()+"Minutes"]()},g=function(){return t[p()+"Seconds"]()},D=function(){return t[p()+"Milliseconds"]()},M=function(){return i?0:t.getTimezoneOffset()},x=function(){return h(t)},b=function(){return c(t)},T={d:function(){return m()},dd:function(){return o(m())},ddd:function(){return s.dayNames[v()]},DDD:function(){return a({y:f(),m:w(),d:m(),_:p(),dayName:s.dayNames[v()],short:!0})},dddd:function(){return s.dayNames[v()+7]},DDDD:function(){return a({y:f(),m:w(),d:m(),_:p(),dayName:s.dayNames[v()+7]})},m:function(){return w()+1},mm:function(){return o(w()+1)},mmm:function(){return s.monthNames[w()]},mmmm:function(){return s.monthNames[w()+12]},yy:function(){return String(f()).slice(2)},yyyy:function(){return o(f(),4)},h:function(){return y()%12||12},hh:function(){return o(y()%12||12)},H:function(){return y()},HH:function(){return o(y())},M:function(){return E()},MM:function(){return o(E())},s:function(){return g()},ss:function(){return o(g())},l:function(){return o(D(),3)},L:function(){return o(Math.floor(D()/10))},t:function(){return y()<12?s.timeNames[0]:s.timeNames[1]},tt:function(){return y()<12?s.timeNames[2]:s.timeNames[3]},T:function(){return y()<12?s.timeNames[4]:s.timeNames[5]},TT:function(){return y()<12?s.timeNames[6]:s.timeNames[7]},Z:function(){return l?"GMT":i?"UTC":d(t)},o:function(){return(M()>0?"-":"+")+o(100*Math.floor(Math.abs(M())/60)+Math.abs(M())%60,4)},p:function(){return(M()>0?"-":"+")+o(Math.floor(Math.abs(M())/60),2)+":"+o(Math.floor(Math.abs(M())%60),2)},S:function(){return["th","st","nd","rd"][m()%10>3?0:(m()%100-m()%10!=10)*m()%10]},W:function(){return x()},WW:function(){return o(x())},N:function(){return b()}};return n.replace(e,(function(e){return e in T?T[e]():e.slice(1,e.length-1)}))}(n,"yyyy/mm/dd HH:MM:ss.l")+") JS: "+t)}const u=new Map;function p(e,t){return()=>{const n=u.get(e);n&&clearTimeout(n),u.set(e,setTimeout(e,t))}}const m=10,v={TILES:{EMPTY:{x:0,y:0,w:m,h:m},1:{x:10,y:0,w:m,h:m},2:{x:20,y:0,w:m,h:m},3:{x:30,y:0,w:m,h:m},4:{x:40,y:0,w:m,h:m},5:{x:50,y:0,w:m,h:m},6:{x:60,y:0,w:m,h:m},7:{x:70,y:0,w:m,h:m},8:{x:80,y:0,w:m,h:m},MINE:{x:90,y:0,w:m,h:m},HIDDEN:{x:100,y:0,w:m,h:m},FLAG:{x:110,y:0,w:m,h:m},CLOSE:{x:120,y:0,w:m,h:m}},MODAL:{BACK:{x:0,y:90,w:24,h:m},BACK_HOVERED:{x:24,y:90,w:24,h:m}},MAIN_MENU:{TITLE:{x:0,y:10,w:95,h:m},EASY:{x:0,y:20,w:26,h:m},EASY_HOVERED:{x:26,y:20,w:26,h:m},MEDIUM:{x:0,y:30,w:35,h:m},MEDIUM_HOVERED:{x:35,y:30,w:30,h:m},HARD:{x:0,y:40,w:25,h:m},HARD_HOVERED:{x:25,y:40,w:26,h:m},CUSTOM:{x:0,y:50,w:38,h:m},CUSTOM_HOVERED:{x:38,y:50,w:26,h:m},INFINITE:{x:0,y:60,w:43,h:m},INFINITE_HOVERED:{x:43,y:60,w:43,h:m}},RETRY_MODAL:{TITLE:{x:0,y:70,w:45,h:m},RETRY:{x:0,y:80,w:30,h:m},RETRY_HOVERED:{x:30,y:80,w:30,h:m}},SUCCESS_MODAL:{TITLE:{x:0,y:100,w:52,h:m},RESET:{x:0,y:110,w:53,h:m},RESET_HOVERED:{x:53,y:110,w:53,h:m}}},w=document.getElementById("canvas"),f=w.getContext("2d"),y=new Image,E=new Promise((e=>{y.addEventListener("load",(()=>{l("Finished loading spritesheet"),e()}))}));function g(e,t){f.drawImage(y,e.x,e.y,e.w,e.h,t.x,t.y,t.w,t.h)}y.src=new URL(n(882),n.b).toString();class D{constructor(){this.eventListeners=new Map}addEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,[...i,t])}removeEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,i.filter((e=>e===t)))}callEventListeners(e,t){var n;(null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[]).forEach((e=>e(t)))}}function M(e){l("(camera) "+e)}const x=30;class b extends D{constructor(e){super(),this.fieldSize=e,this.reset(),this.pointerDownEvent={touches:[],moveOrScale:!1,moveDistance:0,pinchDistance:null,longPressTimeout:null},this.lastPressTimestamp=0,this.handleWheel=e=>{const t=e.deltaY>0?.8:1.25;this.zoom(t,e.clientX,e.clientY)},this.handlePointerDown=e=>{e.preventDefault(),0==this.pointerDownEvent.touches.length?(M("first pointerdown"),this.pointerDownEvent.longPressTimeout=setTimeout((()=>{0===this.pointerDownEvent.touches.length||this.pointerDownEvent.moveOrScale||(M("longpress timeout"),this.callEventListeners("longpress",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button}))}),200),this.pointerDownEvent.moveOrScale=!1,this.pointerDownEvent.moveDistance=0,this.pointerDownEvent.pinchDistance=null):M("another pointerdown"),this.pointerDownEvent.touches.push(e)},this.handlePointerMove=e=>{if(e.preventDefault(),0===this.pointerDownEvent.touches.length)return;const t=this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId)),n=this.pointerDownEvent.touches[t];if(this.pointerDownEvent.touches[t]=e,1===this.pointerDownEvent.touches.length){const t={x:e.clientX-n.clientX,y:e.clientY-n.clientY},i=Math.hypot(t.x,t.y);if(this.pointerDownEvent.moveDistance+=i,!this.pointerDownEvent.moveOrScale&&this.pointerDownEvent.moveDistance<5)return;if(this.translation.x+=t.x,this.translation.y+=t.y,void 0!==this.fieldSize){const e={x:this.fieldSize.w*x*this.scale,y:this.fieldSize.h*x*this.scale},t={x:0-e.x/2,y:0-e.y/2},n={x:w.width-e.x/2,y:w.height-e.y/2};this.translation.x=Math.min(this.translation.x,n.x),this.translation.x=Math.max(this.translation.x,t.x),this.translation.y=Math.min(this.translation.y,n.y),this.translation.y=Math.max(this.translation.y,t.y)}}else{const e=this.pointerDownEvent.touches[0],t=this.pointerDownEvent.touches[1],n=Math.hypot(e.clientX-t.clientX,e.clientY-t.clientY);if(null!=this.pointerDownEvent.pinchDistance){const i=n/this.pointerDownEvent.pinchDistance,r={x:(e.clientX+t.clientX)/2,y:(e.clientY+t.clientY)/2};this.zoom(i,r.x,r.y)}this.pointerDownEvent.pinchDistance=n}this.pointerDownEvent.moveOrScale||(M("pointer moved, not press event"),this.pointerDownEvent.moveOrScale=!0,clearTimeout(this.pointerDownEvent.longPressTimeout)),this.callEventListeners("move",{})},this.handlePointerCancel=e=>{M("pointercancel")},this.handlePointerOut=e=>{e.preventDefault(),0!=this.pointerDownEvent.touches.length&&(this.pointerDownEvent.touches.length>1?(M("pointerout: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),this.pointerDownEvent.pinchDistance=null):(M("pointerout: no press event"),clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]))},this.handlePointerUp=e=>{if(e.preventDefault(),0!==this.pointerDownEvent.touches.length){if(this.pointerDownEvent.touches.length>1)return M("pointerup: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),void(this.pointerDownEvent.pinchDistance=null);if(this.pointerDownEvent.moveOrScale)M("pointerup");else{M("pointerup: no movement or scaling, press event");const t=Date.now();t-this.lastPressTimestamp>50?(this.lastPressTimestamp=t,this.callEventListeners("press",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button})):M(`last press was ${t-this.lastPressTimestamp}ms ago, no event (min50ms)`)}clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]}},this.registerEvents()}middleTranslation(){return void 0===this.fieldSize?{x:0,y:0}:{x:w.width/2-this.scale*(this.fieldSize.w*x/2),y:w.height/2-this.scale*(this.fieldSize.h*x/2)}}toCanvasPos(e,t){return{x:this.translation.x+e*x*this.scale,y:this.translation.y+t*x*this.scale}}toWorldPos(e,t){return{x:Math.floor((e-this.translation.x)/this.scale/x),y:Math.floor((t-this.translation.y)/this.scale/x)}}zoom(e,t,n){const i=this.scale*e;i>1&&i<4&&(this.translation.x-=(t-this.translation.x)*(e-1),this.translation.y-=(n-this.translation.y)*(e-1),this.scale=i,this.callEventListeners("move",{}))}draw(e){return t=this,n=void 0,r=function*(){const t=w.width,n=w.height;f.clearRect(0,0,t,n);const i=this.visibleTiles;for(let t=i.y;t<i.y+i.h;t++)for(let n=i.x;n<i.x+i.w;n++)if(e[t]&&e[t][n]){const i=v.TILES[e[t][n]],r=this.toCanvasPos(n,t);g(i,{x:r.x,y:r.y,w:x*this.scale,h:x*this.scale})}},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}get visibleTiles(){const e=w.getBoundingClientRect(),t=x*this.scale,n=this.toWorldPos(e.left-t,e.top-t),i=this.toWorldPos(e.right+t,e.bottom+t);return{x:n.x,y:n.y,w:i.x-n.x,h:i.y-n.y}}reset(){void 0!==this.fieldSize?(this.scale=Math.min(w.width/(this.fieldSize.w*x*1.1),w.height/(this.fieldSize.h*x*1.1)),this.scale=Math.max(this.scale,1),this.scale=Math.min(this.scale,4)):this.scale=2,this.translation=this.middleTranslation()}registerEvents(){w.addEventListener("wheel",this.handleWheel),w.addEventListener("pointerdown",this.handlePointerDown),w.addEventListener("pointermove",this.handlePointerMove),w.addEventListener("pointercancel",this.handlePointerCancel),w.addEventListener("pointerout",this.handlePointerOut),w.addEventListener("pointerup",this.handlePointerUp)}deregisterEvents(){w.removeEventListener("wheel",this.handleWheel),w.removeEventListener("pointerdown",this.handlePointerDown),w.removeEventListener("pointermove",this.handlePointerMove),w.removeEventListener("pointercancel",this.handlePointerCancel),w.removeEventListener("pointerout",this.handlePointerOut),w.removeEventListener("pointerup",this.handlePointerUp)}}var T=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};l("Creating WASM worker");const S=new Worker(new URL(n.p+n.u(303),n.b)),L=new Map;l("Registering WebIO event listener for Go"),S.addEventListener("message",(e=>{if(e.data){const t=e.data,[n,i]=L.get(t.id);t.success?n(t.data):(l("Error response for '"+t.cmd+"': "+t.data),i(t.data))}}));let A=!1;const I=[];function P(e,t,n){return new Promise(((i,r)=>{const s=function(e,t){return{cmd:e,id:e+Date.now(),data:t}}(e,t);L.set(s.id,[i,r]),n||A?S.postMessage(s):(l(e+" message received, but worker hasn't connected yet. Adding to queue"),I.push(s))}))}function N(e){return T(this,void 0,void 0,(function*(){const t=P("ping",null,!0),n=new Promise(((t,n)=>setTimeout(n,e)));try{return yield Promise.race([t,n]),A=!0,I.forEach((e=>{S.postMessage(e)})),I.length=0,!0}catch(e){return!1}}))}function O(e){return P("init",e)}function C(e){return P("flag",e)}(function(){return T(this,void 0,void 0,(function*(){let e=0,t=100;for(;!A&&e<5;)l("Sending ping with timeout "+t+"ms"),e++,(yield N(t))||(t*=2,l("Ping timeout reached"));if(e>=5)throw new Error("Max pings 5 reached, assuming WASM module is not functional")}))})().then((()=>{l("Response to ping received, worker connected")}));const R=(e,t)=>e.reduce(((e,n)=>e.sprite[t]*e.scale>n.sprite[t]*n.scale?e:n));function H(e,t){const n=w.getBoundingClientRect();return[Math.round(e-n.left),Math.round(t-n.top)]}function _(e,t,n){return e>n.x&&t>n.y&&e<n.x+n.w&&t<n.y+n.h}class U extends D{constructor(e){super(),this.elements=e,this.tallestElement=R(e,"h"),this.longestElement=R(e,"w"),this.elementHitboxes=new Map,this.hoveredElement=null,this.handlePointerMove=e=>{const[t,n]=H(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())if(_(t,n,i))return void(this.hoveredElement!==e&&(this.hoveredElement=e,this.callEventListeners("hover",{hoveredElement:e})));null!==this.hoveredElement&&(this.hoveredElement=null,this.callEventListeners("hover",{hoveredElement:null}))},this.handlePointerDown=e=>{const[t,n]=H(e.clientX,e.clientY);for(const[e,i]of this.elementHitboxes.entries())_(t,n,i)&&this.callEventListeners("press",{pressedElement:e});return null},this.registerEvents()}draw(e){return t=this,n=void 0,r=function*(){e||(e={x:0,y:0,w:w.width,h:w.height});let t=e.h*(.5/this.elements.length)/(this.tallestElement.sprite.h*this.tallestElement.scale);return t*this.longestElement.sprite.w*this.longestElement.scale>=.9*e.w&&(t=.9*e.w/(this.longestElement.sprite.w*this.longestElement.scale)),new Promise((n=>{let i=e.y+this.tallestElement.sprite.h*t*.5;this.elements.forEach((n=>{const r=n.sprite.w*n.scale*t,s=n.sprite.h*n.scale*t,o={x:e.x+(e.w/2-r/2),y:i,w:r,h:s};n.interactable&&this.elementHitboxes.set(n.id,o);const a=(h=n.sprite,JSON.parse(JSON.stringify(h)));var h;n.id===this.hoveredElement&&"hoveredSprite"in n&&(a.x=n.hoveredSprite.x,a.y=n.hoveredSprite.y),g(a,o),i+=1.5*s})),n()}))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){window.addEventListener("pointermove",this.handlePointerMove),window.addEventListener("pointerdown",this.handlePointerDown)}deregisterEvents(){window.removeEventListener("pointermove",this.handlePointerMove),window.removeEventListener("pointerdown",this.handlePointerDown)}}const Y=e=>({x:e.x,y:e.y});const W={id:"modal.close_button",sprite:v.TILES.CLOSE,scale:1},z={id:"modal.back_button",sprite:v.MODAL.BACK,hoveredSprite:Y(v.MODAL.BACK_HOVERED),scale:1.25,interactable:!0};class k extends U{constructor(e){super(e)}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){yield new Promise((e=>{const t=w.width,n=w.height;f.fillStyle="rgba(0, 0, 0, 0.4)",f.fillRect(0,0,t,n);const i=t>n?.8*n:.8*t,r=t/2-i/2,s=n/2-i/2,o=i/10;for(let e=0;e<10;e++)for(let t=0;t<10;t++){const n={x:r+t*o,y:s+e*o,w:o,h:o};let i={x:v.TILES.EMPTY.w/2,y:v.TILES.EMPTY.h/2,w:1,h:1};0!==t&&9!==t&&0!==e&&9!==e||(9===t&&0===e?(i=W.sprite,this.elementHitboxes.set(W.id,n)):i=v.TILES.HIDDEN),g(i,n)}e({x:r+o,y:s+o,w:i-2*o,h:i-2*o})})).then((t=>e.draw.call(this,t)))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}}const B={id:"modal.retry.title",sprite:v.RETRY_MODAL.TITLE,scale:1},F={id:"modal.retry.retry_button",sprite:v.RETRY_MODAL.RETRY,hoveredSprite:Y(v.RETRY_MODAL.RETRY_HOVERED),scale:1.25,interactable:!0},j=[B,F,z],V=k.bind(k,j),Z={id:"modal.success.title",sprite:v.SUCCESS_MODAL.TITLE,scale:1},J={id:"modal.success.reset_button",sprite:v.SUCCESS_MODAL.RESET,hoveredSprite:Y(v.SUCCESS_MODAL.RESET_HOVERED),scale:1.25,interactable:!0},X=[Z,J,z],G=k.bind(k,X);var $,q=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{h(i.next(e))}catch(e){s(e)}}function a(e){try{h(i.throw(e))}catch(e){s(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))},K=function(e,t,n,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,n):r?r.value=n:t.set(e,n),n},Q=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class ee{constructor(){$.set(this,void 0),this.modal=null,K(this,$,!0,"f")}open(e){this.modal=e,K(this,$,!1,"f")}close(){if(!this.modal)throw new Error("No modal to close");this.hide(),this.modal=null}get hidden(){return Q(this,$,"f")}hide(){if(!this.modal)throw new Error("No modal to hide");this.modal.deregisterEvents(),K(this,$,!0,"f")}reveal(){if(!this.modal)throw new Error("No modal to reveal");this.modal.registerEvents(),K(this,$,!1,"f")}draw(){return q(this,void 0,void 0,(function*(){Q(this,$,"f")||(yield this.modal.draw())}))}deregisterEvents(){var e;null===(e=this.modal)||void 0===e||e.deregisterEvents()}}function te(e){e.preventDefault()}$=new WeakMap;class ne{constructor(e){this.props=e,"w"in this.props&&"h"in this.props?this.camera=new b({w:this.props.w,h:this.props.h}):this.camera=new b,this.camera.addEventListener("press",this.handlePress.bind(this)),this.camera.addEventListener("longpress",this.handleLongPress.bind(this)),this.camera.addEventListener("move",this.draw.bind(this,!1)),this.modal=new ee,this.drawWithLimit=p(this.draw.bind(this,!1),100),this.appearance=null,this.lastAppearanceRequestTimestamp=0,this.reset(),this.registerEvents()}reset(){let e;if(this.camera.reset(),this.gameOver=!1,"w"in this.props&&"h"in this.props&&"numMines"in this.props)e=O({width:this.props.w,height:this.props.h,mines:this.props.numMines});else{if(!("mineDensity"in this.props))throw new Error("unknown game props type");e=O({mineDensity:this.props.mineDensity})}e.then(this.draw.bind(this,!0))}shouldUpdateAppearance(){if(null==this.appearance)return!0;if(Date.now()-this.lastAppearanceRequestTimestamp<100)return!1;const e=this.camera.visibleTiles;return e.x<this.appearance.rect.x+this.appearance.rect.w/6||e.y<this.appearance.rect.y+this.appearance.rect.h/6||e.x+e.w>this.appearance.rect.x+this.appearance.rect.w-this.appearance.rect.w/6||e.y+e.h>this.appearance.rect.y+this.appearance.rect.h-this.appearance.rect.h/6}draw(e){return q(this,void 0,void 0,(function*(){if(e||this.shouldUpdateAppearance()){const e=this.camera.visibleTiles;e.x-=e.w/2,e.y-=e.h/2,e.w*=2,e.h*=2,l(`redrawing, rect x${e.x} y ${e.y} w ${e.w} h ${e.h}`),this.lastAppearanceRequestTimestamp=Date.now(),this.appearance={data:yield(t=e,P("appearance",t)),rect:e}}var t;yield this.camera.draw(this.appearance.data).then(this.modal.draw.bind(this.modal))}))}registerEvents(){window.addEventListener("resize",this.drawWithLimit),w.addEventListener("contextmenu",te),this.modal.hidden&&this.camera.registerEvents()}deregisterEvents(){window.removeEventListener("resize",this.drawWithLimit),w.removeEventListener("contextmenu",te),this.camera.deregisterEvents(),this.modal.deregisterEvents()}handleState(e){switch(e.state){case"win":this.gameOver=!0,l("Win detected, displaying success modal"),this.handleEndGameModal(G,J.id);break;case"loss":this.gameOver=!0,l("Loss detected, displaying retry modal"),setTimeout(this.handleEndGameModal.bind(this,V,F.id),1e3)}}handleEndGameModal(e,t){return q(this,void 0,void 0,(function*(){const n=new e;this.modal.open(n),n.addEventListener("hover",this.draw.bind(this,!1)),n.addEventListener("press",(e=>{switch(e.pressedElement){case W.id:this.modal.hide(),this.camera.registerEvents(),this.draw();break;case t:this.modal.close(),this.camera.registerEvents(),this.reset(),this.draw();break;case z.id:this.deregisterEvents(),this.props.handleBack()}})),this.camera.deregisterEvents(),yield this.draw()}))}handlePress(e){var t;this.gameOver?this.modal.hidden&&(this.modal.reveal(),this.camera.deregisterEvents(),this.draw()):0===e.button?(t=e.pos,P("uncover",t)).then((e=>q(this,void 0,void 0,(function*(){yield this.draw(!0),this.handleState(e)})))):2===e.button&&C(e.pos).then(this.draw.bind(this,!0))}handleLongPress(e){this.gameOver||0!==e.button||C(e.pos).then(this.draw.bind(this,!0))}}const ie={id:"menu.main.title",sprite:v.MAIN_MENU.TITLE,scale:1},re={id:"menu.main.easy_button",sprite:v.MAIN_MENU.EASY,hoveredSprite:Y(v.MAIN_MENU.EASY_HOVERED),scale:1.25,interactable:!0},se={id:"menu.main.medium_button",sprite:v.MAIN_MENU.MEDIUM,hoveredSprite:Y(v.MAIN_MENU.MEDIUM_HOVERED),scale:1.25,interactable:!0},oe={id:"menu.main.hard_button",sprite:v.MAIN_MENU.HARD,hoveredSprite:Y(v.MAIN_MENU.HARD_HOVERED),scale:1.25,interactable:!0},ae={id:"menu.main.infinite_button",sprite:v.MAIN_MENU.INFINITE,hoveredSprite:Y(v.MAIN_MENU.INFINITE_HOVERED),scale:1.25,interactable:!0},he=[ie,re,se,oe,ae];var ce=n(379),de=n.n(ce),le=n(795),ue=n.n(le),pe=n(569),me=n.n(pe),ve=n(565),we=n.n(ve),fe=n(216),ye=n.n(fe),Ee=n(589),ge=n.n(Ee),De=n(250),Me={};function xe(){w.width=window.innerWidth,w.height=window.innerHeight,f.imageSmoothingEnabled=!1,f.webkitImageSmoothingEnabled=!1,f.mozImageSmoothingEnabled=!1}Me.styleTagTransform=ge(),Me.setAttributes=we(),Me.insert=me().bind(null,"head"),Me.domAPI=ue(),Me.insertStyleElement=ye(),de()(De.Z,Me),De.Z&&De.Z.locals&&De.Z.locals,window.addEventListener("resize",xe),xe();const be=new class extends U{constructor(){super(he),super.addEventListener("press",this.draw.bind(this)),super.addEventListener("hover",this.draw.bind(this)),this.drawWithLimit=p(this.draw.bind(this),100),this.registerEvents()}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,r=function*(){return function(e){return t=this,n=void 0,r=function*(){e||(e={x:0,y:0,w:w.width,h:w.height}),f.clearRect(e.x,e.y,e.w,e.h)},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}().then(e.draw.bind(this))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{h(r.next(e))}catch(e){s(e)}}function a(e){try{h(r.throw(e))}catch(e){s(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((r=r.apply(t,n||[])).next())}));var t,n,i,r}registerEvents(){super.registerEvents(),window.addEventListener("resize",this.drawWithLimit)}deregisterEvents(){super.deregisterEvents(),window.removeEventListener("resize",this.drawWithLimit)}};be.addEventListener("press",(e=>{let t;switch(be.deregisterEvents(),e.pressedElement){case re.id:t={w:9,h:9,numMines:10};break;case se.id:t={w:16,h:16,numMines:40};break;case oe.id:t={w:30,h:16,numMines:99};break;case ae.id:t={mineDensity:40}}new ne(Object.assign(Object.assign({},t),{handleBack:()=>{be.registerEvents(),be.draw()}}))})),E.then(be.draw.bind(be))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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USwrUkFHeENzVyxpQkFDSXpDLE1BQU15QyxpQkFDTmxTLE9BQU9vTyxpQkFBaUIsU0FBVXhTLEtBQUtpYyxlQUczQzNFLG1CQUNJekQsTUFBTXlELG1CQUNObFQsT0FBT2dQLG9CQUFvQixTQUFVcFQsS0FBS2ljLGlCRWhEbEQyQixHQUFTcEwsaUJBQWlCLFNBQVVnQixJQUloQyxJQUFJc0ssRUFDSixPQUpBRixHQUFTdEcsbUJBSUQ5RCxFQUFNd0csZ0JBQ2QsS0FBS2tELEdBQVl2ZCxHQUNibWUsRUFBWSxDQUNSek4sRUFBRyxFQUNIakMsRUFBRyxFQUNIbU8sU0FBVSxJQUVkLE1BQ0osS0FBS1ksR0FBY3hkLEdBQ2ZtZSxFQUFZLENBQ1J6TixFQUFHLEdBQ0hqQyxFQUFHLEdBQ0htTyxTQUFVLElBRWQsTUFDSixLQUFLYSxHQUFZemQsR0FDYm1lLEVBQVksQ0FDUnpOLEVBQUcsR0FDSGpDLEVBQUcsR0FDSG1PLFNBQVUsSUFFZCxNQUNKLEtBQUtjLEdBQWdCMWQsR0FDakJtZSxFQUFZLENBRVJ0QixZQUFhLElBS3JCLElBQUlaLEdBQUssT0FBRCx3QkFDRGtDLEdBQVMsQ0FDWmIsV0FBWSxLQUNSVyxHQUFTdEgsaUJBQ1RzSCxHQUFTbEgsY0FNckJyRSxFQUFrQnlHLEtBQUs4RSxHQUFTbEgsS0FBS3lFLEtBQUt5QyxNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9hc3NldHMvc3R5bGVzLmNzcyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL21pbmVzd2VlcGVyL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vbm9kZV9tb2R1bGVzL2RhdGVmb3JtYXQvbGliL2RhdGVmb3JtYXQuanMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvdXRpbC50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9kcmF3LnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2V2ZW50LW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvZ2FtZS9jYW1lcmEudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvZ29pby93b3JrZXItaGVscGVyLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL2dvaW8vZ29pby50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9tZW51L21lbnUudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvY29tbW9uLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL21lbnUvbW9kYWwudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvbWVudS9yZXRyeS1tb2RhbC50cyIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9tZW51L3N1Y2Nlc3MtbW9kYWwudHMiLCJ3ZWJwYWNrOi8vbWluZXN3ZWVwZXIvLi9zcmMvZ2FtZS9nYW1lLnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vc3JjL21lbnUvbWFpbi1tZW51LnRzIiwid2VicGFjazovL21pbmVzd2VlcGVyLy4vYXNzZXRzL3N0eWxlcy5jc3M/Zjc2NCIsIndlYnBhY2s6Ly9taW5lc3dlZXBlci8uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIG1hcmdpbjogMDtcXG59XFxuY2FudmFzIHtcXG4gICAgaW1hZ2UtcmVuZGVyaW5nOiAtbW96LWNyaXNwLWVkZ2VzO1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IC13ZWJraXQtY3Jpc3AtZWRnZXM7XFxuICAgIGltYWdlLXJlbmRlcmluZzogcGl4ZWxhdGVkO1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IGNyaXNwLWVkZ2VzO1xcbiAgICB0b3VjaC1hY3Rpb246IG5vbmU7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL2Fzc2V0cy9zdHlsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksZ0JBQWdCO0lBQ2hCLFNBQVM7QUFDYjtBQUNBO0lBQ0ksaUNBQWlDO0lBQ2pDLG9DQUFvQztJQUNwQywwQkFBMEI7SUFDMUIsNEJBQTRCO0lBQzVCLGtCQUFrQjtBQUN0QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5IHtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG5jYW52YXMge1xcbiAgICBpbWFnZS1yZW5kZXJpbmc6IC1tb3otY3Jpc3AtZWRnZXM7XFxuICAgIGltYWdlLXJlbmRlcmluZzogLXdlYmtpdC1jcmlzcC1lZGdlcztcXG4gICAgaW1hZ2UtcmVuZGVyaW5nOiBwaXhlbGF0ZWQ7XFxuICAgIGltYWdlLXJlbmRlcmluZzogY3Jpc3AtZWRnZXM7XFxuICAgIHRvdWNoLWFjdGlvbjogbm9uZTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuYnVuZGxlLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwidmFyIHRva2VuPS9kezEsNH18RHszLDR9fG17MSw0fXx5eSg/Onl5KT98KFtIaE1zVHRdKVxcMT98V3sxLDJ9fFtMbG9wU1pOXXxcIlteXCJdKlwifCdbXiddKicvZzt2YXIgdGltZXpvbmU9L1xcYig/OltBLVpdezEsM31bQS1aXVtUQ10pKD86Wy0rXVxcZHs0fSk/fCgoPzpBdXN0cmFsaWFuICk/KD86UGFjaWZpY3xNb3VudGFpbnxDZW50cmFsfEVhc3Rlcm58QXRsYW50aWMpICg/OlN0YW5kYXJkfERheWxpZ2h0fFByZXZhaWxpbmcpIFRpbWUpXFxiL2c7dmFyIHRpbWV6b25lQ2xpcD0vW14tK1xcZEEtWl0vZztleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkYXRlRm9ybWF0KGRhdGUsbWFzayx1dGMsZ210KXtpZihhcmd1bWVudHMubGVuZ3RoPT09MSYmdHlwZW9mIGRhdGU9PT1cInN0cmluZ1wiJiYhL1xcZC8udGVzdChkYXRlKSl7bWFzaz1kYXRlO2RhdGU9dW5kZWZpbmVkfWRhdGU9ZGF0ZXx8ZGF0ZT09PTA/ZGF0ZTpuZXcgRGF0ZTtpZighKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSl7ZGF0ZT1uZXcgRGF0ZShkYXRlKX1pZihpc05hTihkYXRlKSl7dGhyb3cgVHlwZUVycm9yKFwiSW52YWxpZCBkYXRlXCIpfW1hc2s9U3RyaW5nKG1hc2tzW21hc2tdfHxtYXNrfHxtYXNrc1tcImRlZmF1bHRcIl0pO3ZhciBtYXNrU2xpY2U9bWFzay5zbGljZSgwLDQpO2lmKG1hc2tTbGljZT09PVwiVVRDOlwifHxtYXNrU2xpY2U9PT1cIkdNVDpcIil7bWFzaz1tYXNrLnNsaWNlKDQpO3V0Yz10cnVlO2lmKG1hc2tTbGljZT09PVwiR01UOlwiKXtnbXQ9dHJ1ZX19dmFyIF89ZnVuY3Rpb24gXygpe3JldHVybiB1dGM/XCJnZXRVVENcIjpcImdldFwifTt2YXIgX2Q9ZnVuY3Rpb24gZCgpe3JldHVybiBkYXRlW18oKStcIkRhdGVcIl0oKX07dmFyIEQ9ZnVuY3Rpb24gRCgpe3JldHVybiBkYXRlW18oKStcIkRheVwiXSgpfTt2YXIgX209ZnVuY3Rpb24gbSgpe3JldHVybiBkYXRlW18oKStcIk1vbnRoXCJdKCl9O3ZhciB5PWZ1bmN0aW9uIHkoKXtyZXR1cm4gZGF0ZVtfKCkrXCJGdWxsWWVhclwiXSgpfTt2YXIgX0g9ZnVuY3Rpb24gSCgpe3JldHVybiBkYXRlW18oKStcIkhvdXJzXCJdKCl9O3ZhciBfTT1mdW5jdGlvbiBNKCl7cmV0dXJuIGRhdGVbXygpK1wiTWludXRlc1wiXSgpfTt2YXIgX3M9ZnVuY3Rpb24gcygpe3JldHVybiBkYXRlW18oKStcIlNlY29uZHNcIl0oKX07dmFyIF9MPWZ1bmN0aW9uIEwoKXtyZXR1cm4gZGF0ZVtfKCkrXCJNaWxsaXNlY29uZHNcIl0oKX07dmFyIF9vPWZ1bmN0aW9uIG8oKXtyZXR1cm4gdXRjPzA6ZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpfTt2YXIgX1c9ZnVuY3Rpb24gVygpe3JldHVybiBnZXRXZWVrKGRhdGUpfTt2YXIgX049ZnVuY3Rpb24gTigpe3JldHVybiBnZXREYXlPZldlZWsoZGF0ZSl9O3ZhciBmbGFncz17ZDpmdW5jdGlvbiBkKCl7cmV0dXJuIF9kKCl9LGRkOmZ1bmN0aW9uIGRkKCl7cmV0dXJuIHBhZChfZCgpKX0sZGRkOmZ1bmN0aW9uIGRkZCgpe3JldHVybiBpMThuLmRheU5hbWVzW0QoKV19LERERDpmdW5jdGlvbiBEREQoKXtyZXR1cm4gZ2V0RGF5TmFtZSh7eTp5KCksbTpfbSgpLGQ6X2QoKSxfOl8oKSxkYXlOYW1lOmkxOG4uZGF5TmFtZXNbRCgpXSxzaG9ydDp0cnVlfSl9LGRkZGQ6ZnVuY3Rpb24gZGRkZCgpe3JldHVybiBpMThuLmRheU5hbWVzW0QoKSs3XX0sRERERDpmdW5jdGlvbiBEREREKCl7cmV0dXJuIGdldERheU5hbWUoe3k6eSgpLG06X20oKSxkOl9kKCksXzpfKCksZGF5TmFtZTppMThuLmRheU5hbWVzW0QoKSs3XX0pfSxtOmZ1bmN0aW9uIG0oKXtyZXR1cm4gX20oKSsxfSxtbTpmdW5jdGlvbiBtbSgpe3JldHVybiBwYWQoX20oKSsxKX0sbW1tOmZ1bmN0aW9uIG1tbSgpe3JldHVybiBpMThuLm1vbnRoTmFtZXNbX20oKV19LG1tbW06ZnVuY3Rpb24gbW1tbSgpe3JldHVybiBpMThuLm1vbnRoTmFtZXNbX20oKSsxMl19LHl5OmZ1bmN0aW9uIHl5KCl7cmV0dXJuIFN0cmluZyh5KCkpLnNsaWNlKDIpfSx5eXl5OmZ1bmN0aW9uIHl5eXkoKXtyZXR1cm4gcGFkKHkoKSw0KX0saDpmdW5jdGlvbiBoKCl7cmV0dXJuIF9IKCklMTJ8fDEyfSxoaDpmdW5jdGlvbiBoaCgpe3JldHVybiBwYWQoX0goKSUxMnx8MTIpfSxIOmZ1bmN0aW9uIEgoKXtyZXR1cm4gX0goKX0sSEg6ZnVuY3Rpb24gSEgoKXtyZXR1cm4gcGFkKF9IKCkpfSxNOmZ1bmN0aW9uIE0oKXtyZXR1cm4gX00oKX0sTU06ZnVuY3Rpb24gTU0oKXtyZXR1cm4gcGFkKF9NKCkpfSxzOmZ1bmN0aW9uIHMoKXtyZXR1cm4gX3MoKX0sc3M6ZnVuY3Rpb24gc3MoKXtyZXR1cm4gcGFkKF9zKCkpfSxsOmZ1bmN0aW9uIGwoKXtyZXR1cm4gcGFkKF9MKCksMyl9LEw6ZnVuY3Rpb24gTCgpe3JldHVybiBwYWQoTWF0aC5mbG9vcihfTCgpLzEwKSl9LHQ6ZnVuY3Rpb24gdCgpe3JldHVybiBfSCgpPDEyP2kxOG4udGltZU5hbWVzWzBdOmkxOG4udGltZU5hbWVzWzFdfSx0dDpmdW5jdGlvbiB0dCgpe3JldHVybiBfSCgpPDEyP2kxOG4udGltZU5hbWVzWzJdOmkxOG4udGltZU5hbWVzWzNdfSxUOmZ1bmN0aW9uIFQoKXtyZXR1cm4gX0goKTwxMj9pMThuLnRpbWVOYW1lc1s0XTppMThuLnRpbWVOYW1lc1s1XX0sVFQ6ZnVuY3Rpb24gVFQoKXtyZXR1cm4gX0goKTwxMj9pMThuLnRpbWVOYW1lc1s2XTppMThuLnRpbWVOYW1lc1s3XX0sWjpmdW5jdGlvbiBaKCl7cmV0dXJuIGdtdD9cIkdNVFwiOnV0Yz9cIlVUQ1wiOmZvcm1hdFRpbWV6b25lKGRhdGUpfSxvOmZ1bmN0aW9uIG8oKXtyZXR1cm4oX28oKT4wP1wiLVwiOlwiK1wiKStwYWQoTWF0aC5mbG9vcihNYXRoLmFicyhfbygpKS82MCkqMTAwK01hdGguYWJzKF9vKCkpJTYwLDQpfSxwOmZ1bmN0aW9uIHAoKXtyZXR1cm4oX28oKT4wP1wiLVwiOlwiK1wiKStwYWQoTWF0aC5mbG9vcihNYXRoLmFicyhfbygpKS82MCksMikrXCI6XCIrcGFkKE1hdGguZmxvb3IoTWF0aC5hYnMoX28oKSklNjApLDIpfSxTOmZ1bmN0aW9uIFMoKXtyZXR1cm5bXCJ0aFwiLFwic3RcIixcIm5kXCIsXCJyZFwiXVtfZCgpJTEwPjM/MDooX2QoKSUxMDAtX2QoKSUxMCE9MTApKl9kKCklMTBdfSxXOmZ1bmN0aW9uIFcoKXtyZXR1cm4gX1coKX0sV1c6ZnVuY3Rpb24gV1coKXtyZXR1cm4gcGFkKF9XKCkpfSxOOmZ1bmN0aW9uIE4oKXtyZXR1cm4gX04oKX19O3JldHVybiBtYXNrLnJlcGxhY2UodG9rZW4sZnVuY3Rpb24obWF0Y2gpe2lmKG1hdGNoIGluIGZsYWdzKXtyZXR1cm4gZmxhZ3NbbWF0Y2hdKCl9cmV0dXJuIG1hdGNoLnNsaWNlKDEsbWF0Y2gubGVuZ3RoLTEpfSl9ZXhwb3J0IHZhciBtYXNrcz17ZGVmYXVsdDpcImRkZCBtbW0gZGQgeXl5eSBISDpNTTpzc1wiLHNob3J0RGF0ZTpcIm0vZC95eVwiLHBhZGRlZFNob3J0RGF0ZTpcIm1tL2RkL3l5eXlcIixtZWRpdW1EYXRlOlwibW1tIGQsIHl5eXlcIixsb25nRGF0ZTpcIm1tbW0gZCwgeXl5eVwiLGZ1bGxEYXRlOlwiZGRkZCwgbW1tbSBkLCB5eXl5XCIsc2hvcnRUaW1lOlwiaDpNTSBUVFwiLG1lZGl1bVRpbWU6XCJoOk1NOnNzIFRUXCIsbG9uZ1RpbWU6XCJoOk1NOnNzIFRUIFpcIixpc29EYXRlOlwieXl5eS1tbS1kZFwiLGlzb1RpbWU6XCJISDpNTTpzc1wiLGlzb0RhdGVUaW1lOlwieXl5eS1tbS1kZCdUJ0hIOk1NOnNzb1wiLGlzb1V0Y0RhdGVUaW1lOlwiVVRDOnl5eXktbW0tZGQnVCdISDpNTTpzcydaJ1wiLGV4cGlyZXNIZWFkZXJGb3JtYXQ6XCJkZGQsIGRkIG1tbSB5eXl5IEhIOk1NOnNzIFpcIn07ZXhwb3J0IHZhciBpMThuPXtkYXlOYW1lczpbXCJTdW5cIixcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIixcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdLG1vbnRoTmFtZXM6W1wiSmFuXCIsXCJGZWJcIixcIk1hclwiLFwiQXByXCIsXCJNYXlcIixcIkp1blwiLFwiSnVsXCIsXCJBdWdcIixcIlNlcFwiLFwiT2N0XCIsXCJOb3ZcIixcIkRlY1wiLFwiSmFudWFyeVwiLFwiRmVicnVhcnlcIixcIk1hcmNoXCIsXCJBcHJpbFwiLFwiTWF5XCIsXCJKdW5lXCIsXCJKdWx5XCIsXCJBdWd1c3RcIixcIlNlcHRlbWJlclwiLFwiT2N0b2JlclwiLFwiTm92ZW1iZXJcIixcIkRlY2VtYmVyXCJdLHRpbWVOYW1lczpbXCJhXCIsXCJwXCIsXCJhbVwiLFwicG1cIixcIkFcIixcIlBcIixcIkFNXCIsXCJQTVwiXX07dmFyIHBhZD1mdW5jdGlvbiBwYWQodmFsKXt2YXIgbGVuPWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1sxXToyO3JldHVybiBTdHJpbmcodmFsKS5wYWRTdGFydChsZW4sXCIwXCIpfTt2YXIgZ2V0RGF5TmFtZT1mdW5jdGlvbiBnZXREYXlOYW1lKF9yZWYpe3ZhciB5PV9yZWYueSxtPV9yZWYubSxkPV9yZWYuZCxfPV9yZWYuXyxkYXlOYW1lPV9yZWYuZGF5TmFtZSxfcmVmJHNob3J0PV9yZWZbXCJzaG9ydFwiXSxfc2hvcnQ9X3JlZiRzaG9ydD09PXZvaWQgMD9mYWxzZTpfcmVmJHNob3J0O3ZhciB0b2RheT1uZXcgRGF0ZTt2YXIgeWVzdGVyZGF5PW5ldyBEYXRlO3llc3RlcmRheS5zZXREYXRlKHllc3RlcmRheVtfK1wiRGF0ZVwiXSgpLTEpO3ZhciB0b21vcnJvdz1uZXcgRGF0ZTt0b21vcnJvdy5zZXREYXRlKHRvbW9ycm93W18rXCJEYXRlXCJdKCkrMSk7dmFyIHRvZGF5X2Q9ZnVuY3Rpb24gdG9kYXlfZCgpe3JldHVybiB0b2RheVtfK1wiRGF0ZVwiXSgpfTt2YXIgdG9kYXlfbT1mdW5jdGlvbiB0b2RheV9tKCl7cmV0dXJuIHRvZGF5W18rXCJNb250aFwiXSgpfTt2YXIgdG9kYXlfeT1mdW5jdGlvbiB0b2RheV95KCl7cmV0dXJuIHRvZGF5W18rXCJGdWxsWWVhclwiXSgpfTt2YXIgeWVzdGVyZGF5X2Q9ZnVuY3Rpb24geWVzdGVyZGF5X2QoKXtyZXR1cm4geWVzdGVyZGF5W18rXCJEYXRlXCJdKCl9O3ZhciB5ZXN0ZXJkYXlfbT1mdW5jdGlvbiB5ZXN0ZXJkYXlfbSgpe3JldHVybiB5ZXN0ZXJkYXlbXytcIk1vbnRoXCJdKCl9O3ZhciB5ZXN0ZXJkYXlfeT1mdW5jdGlvbiB5ZXN0ZXJkYXlfeSgpe3JldHVybiB5ZXN0ZXJkYXlbXytcIkZ1bGxZZWFyXCJdKCl9O3ZhciB0b21vcnJvd19kPWZ1bmN0aW9uIHRvbW9ycm93X2QoKXtyZXR1cm4gdG9tb3Jyb3dbXytcIkRhdGVcIl0oKX07dmFyIHRvbW9ycm93X209ZnVuY3Rpb24gdG9tb3Jyb3dfbSgpe3JldHVybiB0b21vcnJvd1tfK1wiTW9udGhcIl0oKX07dmFyIHRvbW9ycm93X3k9ZnVuY3Rpb24gdG9tb3Jyb3dfeSgpe3JldHVybiB0b21vcnJvd1tfK1wiRnVsbFllYXJcIl0oKX07aWYodG9kYXlfeSgpPT09eSYmdG9kYXlfbSgpPT09bSYmdG9kYXlfZCgpPT09ZCl7cmV0dXJuIF9zaG9ydD9cIlRkeVwiOlwiVG9kYXlcIn1lbHNlIGlmKHllc3RlcmRheV95KCk9PT15JiZ5ZXN0ZXJkYXlfbSgpPT09bSYmeWVzdGVyZGF5X2QoKT09PWQpe3JldHVybiBfc2hvcnQ/XCJZc2RcIjpcIlllc3RlcmRheVwifWVsc2UgaWYodG9tb3Jyb3dfeSgpPT09eSYmdG9tb3Jyb3dfbSgpPT09bSYmdG9tb3Jyb3dfZCgpPT09ZCl7cmV0dXJuIF9zaG9ydD9cIlRtd1wiOlwiVG9tb3Jyb3dcIn1yZXR1cm4gZGF5TmFtZX07dmFyIGdldFdlZWs9ZnVuY3Rpb24gZ2V0V2VlayhkYXRlKXt2YXIgdGFyZ2V0VGh1cnNkYXk9bmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLGRhdGUuZ2V0TW9udGgoKSxkYXRlLmdldERhdGUoKSk7dGFyZ2V0VGh1cnNkYXkuc2V0RGF0ZSh0YXJnZXRUaHVyc2RheS5nZXREYXRlKCktKHRhcmdldFRodXJzZGF5LmdldERheSgpKzYpJTcrMyk7dmFyIGZpcnN0VGh1cnNkYXk9bmV3IERhdGUodGFyZ2V0VGh1cnNkYXkuZ2V0RnVsbFllYXIoKSwwLDQpO2ZpcnN0VGh1cnNkYXkuc2V0RGF0ZShmaXJzdFRodXJzZGF5LmdldERhdGUoKS0oZmlyc3RUaHVyc2RheS5nZXREYXkoKSs2KSU3KzMpO3ZhciBkcz10YXJnZXRUaHVyc2RheS5nZXRUaW1lem9uZU9mZnNldCgpLWZpcnN0VGh1cnNkYXkuZ2V0VGltZXpvbmVPZmZzZXQoKTt0YXJnZXRUaHVyc2RheS5zZXRIb3Vycyh0YXJnZXRUaHVyc2RheS5nZXRIb3VycygpLWRzKTt2YXIgd2Vla0RpZmY9KHRhcmdldFRodXJzZGF5LWZpcnN0VGh1cnNkYXkpLyg4NjRlNSo3KTtyZXR1cm4gMStNYXRoLmZsb29yKHdlZWtEaWZmKX07dmFyIGdldERheU9mV2Vlaz1mdW5jdGlvbiBnZXREYXlPZldlZWsoZGF0ZSl7dmFyIGRvdz1kYXRlLmdldERheSgpO2lmKGRvdz09PTApe2Rvdz03fXJldHVybiBkb3d9O2V4cG9ydCB2YXIgZm9ybWF0VGltZXpvbmU9ZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUoZGF0ZSl7cmV0dXJuKFN0cmluZyhkYXRlKS5tYXRjaCh0aW1lem9uZSl8fFtcIlwiXSkucG9wKCkucmVwbGFjZSh0aW1lem9uZUNsaXAsXCJcIikucmVwbGFjZSgvR01UXFwrMDAwMC9nLFwiVVRDXCIpfTsiLCJpbXBvcnQgZGF0ZUZvcm1hdCBmcm9tICdkYXRlZm9ybWF0JztcblxuY29uc3QgTE9HX1RJTUVfRk9STUFUID0gJ3l5eXkvbW0vZGQgSEg6TU06c3MubCc7XG5cbi8vIFdyaXRlcyB0aGUgZ2l2ZW4gdGV4dCB0byB0aGUgY29uc29sZSwgd2l0aCAnSlM6ICcgcHJlcGVuZGVkICh0byBkaXN0aW5ndWlzaFxuLy8gZnJvbSBsb2dzIGluIHRoZSBXQVNNIG1vZHVsZSlcbmV4cG9ydCBmdW5jdGlvbiBjb25zb2xlTG9nKHMpIHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnNvbGUubG9nKCcoJyArIGRhdGVGb3JtYXQobm93LCBMT0dfVElNRV9GT1JNQVQpICsgJykgSlM6ICcgKyBzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lT2JqKG8pIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvKSk7XG59XG5cbmNvbnN0IHRpbWVvdXRJZEZvckZ1bmMgPSBuZXcgTWFwPFRpbWVySGFuZGxlciwgbnVtYmVyPigpO1xuXG4vLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBvbmx5IGNhbGxzIGZ1bmMgaWYgdGhlcmUgaGF2ZVxuLy8gYmVlbiBubyBjYWxscyB0byB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gaW4gZGVsYXkgbWlsbGlzZWNvbmRzLlxuLy8gVXNlZnVsIGZvciBwcmV2ZW50aW5nIGV4Y2Vzc2l2ZSBjYWxscyBmcm9tIGV2ZW50IGhhbmRsZXJzIChlLmcuIG5vdCBkcmF3aW5nIG9uIGV2ZXJ5IHJlc2l6ZSBldmVudClcbmV4cG9ydCBmdW5jdGlvbiBsaW1pdGVyKGZ1bmM6IFRpbWVySGFuZGxlciwgZGVsYXk6IG51bWJlcikge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gdGltZW91dElkRm9yRnVuYy5nZXQoZnVuYyk7XG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aW1lb3V0SWRGb3JGdW5jLnNldChmdW5jLCBzZXRUaW1lb3V0KGZ1bmMsIGRlbGF5KSk7XG4gICAgfTtcbn0iLCJpbXBvcnQge1JlY3R9IGZyb20gJy4vY29tbW9uJztcbmltcG9ydCB7Y29uc29sZUxvZ30gZnJvbSAnLi91dGlsJztcblxuLy8gQ29uc3RhbnQgZm9yIHRoZSBzaXplIG9mIGEgdGlsZSBpbiB0aGUgc3ByaXRlc2hlZXRcbmV4cG9ydCBjb25zdCBUSUxFX1NJWkUgPSAxMDtcblxuLy8gQ29uc3RhbnQgZm9yIHRoZSBoZWlnaHQgb2YgYSByb3cgaW4gdGhlIHNwcml0ZXNoZWV0XG5leHBvcnQgY29uc3QgUk9XX0hFSUdIVCA9IFRJTEVfU0laRTtcblxuZXhwb3J0IGNvbnN0IFNQUklURVMgPSB7XG4gICAgVElMRVM6IHtcbiAgICAgICAgRU1QVFk6IHt4OiAwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgMToge3g6IDEwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgMjoge3g6IDIwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgMzoge3g6IDMwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgNDoge3g6IDQwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgNToge3g6IDUwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgNjoge3g6IDYwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgNzoge3g6IDcwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgODoge3g6IDgwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgTUlORToge3g6IDkwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgSElEREVOOiB7eDogMTAwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdCxcbiAgICAgICAgRkxBRzoge3g6IDExMCwgeTogMCwgdzogVElMRV9TSVpFLCBoOiBUSUxFX1NJWkV9IGFzIFJlY3QsXG4gICAgICAgIENMT1NFOiB7eDogMTIwLCB5OiAwLCB3OiBUSUxFX1NJWkUsIGg6IFRJTEVfU0laRX0gYXMgUmVjdFxuICAgIH0sXG5cbiAgICBNT0RBTDoge1xuICAgICAgICBCQUNLOiB7eDogMCwgeTogOTAsIHc6IDI0LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBCQUNLX0hPVkVSRUQ6IHt4OiAyNCwgeTogOTAsIHc6IDI0LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0XG4gICAgfSxcblxuICAgIE1BSU5fTUVOVToge1xuICAgICAgICBUSVRMRToge3g6IDAsIHk6IDEwLCB3OiA5NSwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgRUFTWToge3g6IDAsIHk6IDIwLCB3OiAyNiwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgRUFTWV9IT1ZFUkVEOiB7eDogMjYsIHk6IDIwLCB3OiAyNiwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgTUVESVVNOiB7eDogMCwgeTogMzAsIHc6IDM1LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBNRURJVU1fSE9WRVJFRDoge3g6IDM1LCB5OiAzMCwgdzogMzAsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIEhBUkQ6IHt4OiAwLCB5OiA0MCwgdzogMjUsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIEhBUkRfSE9WRVJFRDoge3g6IDI1LCB5OiA0MCwgdzogMjYsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIENVU1RPTToge3g6IDAsIHk6IDUwLCB3OiAzOCwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgQ1VTVE9NX0hPVkVSRUQ6IHt4OiAzOCwgeTogNTAsIHc6IDI2LCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBJTkZJTklURToge3g6IDAsIHk6IDYwLCB3OiA0MywgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgSU5GSU5JVEVfSE9WRVJFRDoge3g6IDQzLCB5OiA2MCwgdzogNDMsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3RcbiAgICB9LFxuXG4gICAgUkVUUllfTU9EQUw6IHtcbiAgICAgICAgVElUTEU6IHt4OiAwLCB5OiA3MCwgdzogNDUsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIFJFVFJZOiB7eDogMCwgeTogODAsIHc6IDMwLCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgICAgICBSRVRSWV9IT1ZFUkVEOiB7eDogMzAsIHk6IDgwLCB3OiAzMCwgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICB9LFxuXG4gICAgU1VDQ0VTU19NT0RBTDoge1xuICAgICAgICBUSVRMRToge3g6IDAsIHk6IDEwMCwgdzogNTIsIGg6IFJPV19IRUlHSFR9IGFzIFJlY3QsXG4gICAgICAgIFJFU0VUOiB7eDogMCwgeTogMTEwLCB3OiA1MywgaDogUk9XX0hFSUdIVH0gYXMgUmVjdCxcbiAgICAgICAgUkVTRVRfSE9WRVJFRDoge3g6IDUzLCB5OiAxMTAsIHc6IDUzLCBoOiBST1dfSEVJR0hUfSBhcyBSZWN0LFxuICAgIH1cbn07XG5cbi8vIFRoZSBjYW52YXNcbmV4cG9ydCBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG5cbi8vIFRoZSBncmFwaGljYWwgY29udGV4dCB0byBkcmF3IHRvXG5leHBvcnQgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbmNvbnN0IHNwcml0ZXNoZWV0ID0gbmV3IEltYWdlKCk7XG5cbmV4cG9ydCBjb25zdCBzcHJpdGVzaGVldExvYWRlZCA9IG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgIHNwcml0ZXNoZWV0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGVMb2coJ0ZpbmlzaGVkIGxvYWRpbmcgc3ByaXRlc2hlZXQnKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xufSk7XG5cbnNwcml0ZXNoZWV0LnNyYyA9IG5ldyBVUkwoJy4uL2Fzc2V0cy9zcHJpdGVzaGVldC5wbmcnLCBpbXBvcnQubWV0YS51cmwpLnRvU3RyaW5nKCk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhcihyZWN0PzogUmVjdCkge1xuICAgIGlmICghcmVjdCkge1xuICAgICAgICByZWN0ID0ge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICB3OiBjYW52YXMud2lkdGgsXG4gICAgICAgICAgICBoOiBjYW52YXMuaGVpZ2h0XG4gICAgICAgIH07XG4gICAgfVxuICAgIGN0eC5jbGVhclJlY3QocmVjdC54LCByZWN0LnksIHJlY3QudywgcmVjdC5oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdTcHJpdGUoc3ByaXRlOiBSZWN0LCBkcmF3UmVjdDogUmVjdCkge1xuICAgIGN0eC5kcmF3SW1hZ2Uoc3ByaXRlc2hlZXQsXG4gICAgICAgIHNwcml0ZS54LCBzcHJpdGUueSwgc3ByaXRlLncsIHNwcml0ZS5oLFxuICAgICAgICBkcmF3UmVjdC54LCBkcmF3UmVjdC55LCBkcmF3UmVjdC53LCBkcmF3UmVjdC5oKTtcbn1cbiIsImV4cG9ydCB0eXBlIEV2ZW50TGlzdGVuZXI8RXZlbnRNYXBUPiA9IChldmVudDogRXZlbnRNYXBUW2tleW9mIEV2ZW50TWFwVF0pID0+IHZvaWRcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRNYW5hZ2VyPEV2ZW50TWFwVD4ge1xuICAgIHByaXZhdGUgZXZlbnRMaXN0ZW5lcnM6IE1hcDxrZXlvZiBFdmVudE1hcFQsIEFycmF5PEV2ZW50TGlzdGVuZXI8RXZlbnRNYXBUPj4+O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEV2ZW50TGlzdGVuZXI8SyBleHRlbmRzIGtleW9mIEV2ZW50TWFwVD4odHlwZTogSywgbGlzdGVuZXI6IChldmVudDogRXZlbnRNYXBUW0tdKSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyc0ZvckV2ZW50ID0gdGhpcy5ldmVudExpc3RlbmVycy5nZXQodHlwZSkgPz8gW107XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMuc2V0KHR5cGUsIFsuLi5saXN0ZW5lcnNGb3JFdmVudCwgbGlzdGVuZXJdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgRXZlbnRNYXBUPih0eXBlOiBLLCBsaXN0ZW5lcjogKGV2ZW50OiBFdmVudE1hcFRbS10pID0+IHZvaWQpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzRm9yRXZlbnQgPSB0aGlzLmV2ZW50TGlzdGVuZXJzLmdldCh0eXBlKSA/PyBbXTtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5zZXQodHlwZSxcbiAgICAgICAgICAgIGxpc3RlbmVyc0ZvckV2ZW50LmZpbHRlcihsaXN0ZW5lckZvckV2ZW50ID0+IGxpc3RlbmVyRm9yRXZlbnQgPT09IGxpc3RlbmVyKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNhbGxFdmVudExpc3RlbmVyczxLIGV4dGVuZHMga2V5b2YgRXZlbnRNYXBUPih0eXBlOiBLLCBldmVudDogRXZlbnRNYXBUW0tdKSB7XG4gICAgICAgICh0aGlzLmV2ZW50TGlzdGVuZXJzLmdldCh0eXBlKSA/PyBbXSkuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcihldmVudCkpO1xuICAgIH1cbn0iLCJpbXBvcnQge1NQUklURVMsIGNhbnZhcywgY3R4LCBkcmF3U3ByaXRlfSBmcm9tICcuLi9kcmF3JztcblxuaW1wb3J0IEV2ZW50TWFuYWdlciBmcm9tICcuLi9ldmVudC1tYW5hZ2VyJztcblxuaW1wb3J0ICogYXMgVXRpbCBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7UG9zLCBSZWN0LCBTaXplfSBmcm9tICcuLi9jb21tb24nO1xuXG5mdW5jdGlvbiBjb25zb2xlTG9nKHMpIHtcbiAgICBVdGlsLmNvbnNvbGVMb2coJyhjYW1lcmEpICcgKyBzKTtcbn1cblxuLy8gdG9kbyB0cmFuc2xhdGUvc2NhbGUgb24gd2luZG93IHJlc2l6ZVxuLy8gdG9kbyBoYW5kbGUgY2FudmFzIHRoYXQgaXNuJ3QgZnVsbHNjcmVlbiBwcm9wZXJseSAodGhvdWdoIHRoaXMgaXNuJ3QgcGFydGljdWxhcmx5IHVzZWZ1bClcblxuLy8gQ29uc3RhbnQgZm9yIHRoZSBkcmF3IHNpemUgb2YgYSB0aWxlXG5jb25zdCBUSUxFX0RSQVdfU0laRSA9IDMwO1xuXG4vLyB0b2RvIG1pZ2h0IGJlIGJldHRlciBpZiBzY2FsaW5nIHdlcmUgYmFzZWQgb24gY2FudmFzIHNpemVcbi8vIENvbnN0YW50IGZvciB0aGUgbWluaW11bSBzY2FsZVxuY29uc3QgTUlOX1NDQUxFID0gMS4wO1xuLy8gQ29uc3RhbnQgZm9yIHRoZSBtYXhpbXVtIHNjYWxlXG5jb25zdCBNQVhfU0NBTEUgPSA0LjA7XG5cbi8vIENvbnN0YW50IGZvciB0aGUgZGVmYXVsdCBzY2FsZSAoZS5nLiBmb3IgaW5maW5pdGUgbW9kZSlcbmNvbnN0IERFRkFVTFRfU0NBTEUgPSAyLjA7XG5cbmNvbnN0IE1PVVNFX1dIRUVMX1NDQUxFX0ZBQ1RPUiA9IDAuODtcblxuLy8gQ29uc3RhbnQgZm9yIGhvdyBsb25nIGEgcG9pbnRlciBuZWVkcyB0byBiZSBwcmVzc2VkIHRvIGJlIGEgXCJsb25nIHByZXNzXCIsIGluXG4vLyBtaWxsaXNlY29uZHNcbmNvbnN0IExPTkdfUFJFU1NfREVMQVlfTVMgPSAyMDA7XG5cbi8vIENvbnN0YW50IGZvciB0aGUgbWluaW11bSBhbW91bnQgdGhlIG1vdXNlIGhhcyB0byBtb3ZlIHRvIGJlIGNvbnNpZGVyZWQgYSBtb3ZlIGV2ZW50XG5jb25zdCBNSU5fTU9VU0VfTU9WRV9ESVNUQU5DRSA9IDU7XG5cbi8vIENvbnN0YW50IGZvciBob3cgbG9uZyBhZnRlciBhIHByZXNzIGV2ZW50IGFub3RoZXJcbi8vIHByZXNzIGV2ZW50IGNhbiBiZSB0cmlnZ2VyZWQgKHRvIHByZXZlbnQgc3BhbW1pbmcpXG5jb25zdCBQUkVTU19MSU1JVF9NUyA9IDUwO1xuXG4vLyB0b2RvIHBhc3MgdXNlZnVsIGluZm9ybWF0aW9uIGhlcmUsIGUuZy4gZGVsdGEgc2NhbGUvdHJhbnNsYXRpb25cbmV4cG9ydCB0eXBlIE1vdmVFdmVudCA9IFJlY29yZDxzdHJpbmcsIG5ldmVyPlxuXG5leHBvcnQgdHlwZSBQcmVzc0V2ZW50ID0ge1xuICAgIHBvczogUG9zXG4gICAgYnV0dG9uOiBudW1iZXJcbn1cblxuaW50ZXJmYWNlIENhbWVyYUV2ZW50TWFwIHtcbiAgICAvLyBBIG1vdmUgZXZlbnQgaW5jbHVkZXMgem9vbWluZyBpbiBvciBvdXRcbiAgICAnbW92ZSc6IE1vdmVFdmVudFxuICAgICdwcmVzcyc6IFByZXNzRXZlbnRcbiAgICAnbG9uZ3ByZXNzJzogUHJlc3NFdmVudFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW1lcmEgZXh0ZW5kcyBFdmVudE1hbmFnZXI8Q2FtZXJhRXZlbnRNYXA+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZpZWxkU2l6ZTogU2l6ZSB8IHVuZGVmaW5lZDtcblxuICAgIHByaXZhdGUgdHJhbnNsYXRpb246IFBvcztcbiAgICBwcml2YXRlIHNjYWxlOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIHBvaW50ZXJEb3duRXZlbnQgOiB7XG4gICAgICAgIHRvdWNoZXM6IEFycmF5PFBvaW50ZXJFdmVudD5cbiAgICAgICAgbW92ZU9yU2NhbGU6IGJvb2xlYW4sXG4gICAgICAgIG1vdmVEaXN0YW5jZTogbnVtYmVyLFxuICAgICAgICBwaW5jaERpc3RhbmNlOiBudW1iZXIgfCBudWxsLFxuICAgICAgICBsb25nUHJlc3NUaW1lb3V0OiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiB8IG51bGxcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBsYXN0UHJlc3NUaW1lc3RhbXA7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVdoZWVsO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlUG9pbnRlckRvd247XG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVQb2ludGVyTW92ZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVBvaW50ZXJDYW5jZWw7XG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVQb2ludGVyT3V0O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlUG9pbnRlclVwO1xuXG4gICAgY29uc3RydWN0b3IoZmllbGRTaXplPzogU2l6ZSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuZmllbGRTaXplID0gZmllbGRTaXplO1xuXG4gICAgICAgIC8vIFJlc2V0IHRoZSBjYW1lcmFcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudCA9IHtcbiAgICAgICAgICAgIHRvdWNoZXM6IFtdLFxuICAgICAgICAgICAgbW92ZU9yU2NhbGU6IGZhbHNlLFxuICAgICAgICAgICAgbW92ZURpc3RhbmNlOiAwLFxuICAgICAgICAgICAgcGluY2hEaXN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgIGxvbmdQcmVzc1RpbWVvdXQ6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmxhc3RQcmVzc1RpbWVzdGFtcCA9IDA7XG5cbiAgICAgICAgdGhpcy5oYW5kbGVXaGVlbCA9IChldmVudCA6IFdoZWVsRXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgc2NhbGUgZmFjdG9yXG4gICAgICAgICAgICBjb25zdCBmYWN0b3IgPSBldmVudC5kZWx0YVkgPiAwID8gTU9VU0VfV0hFRUxfU0NBTEVfRkFDVE9SIDogMSAvIE1PVVNFX1dIRUVMX1NDQUxFX0ZBQ1RPUjtcblxuICAgICAgICAgICAgLy8gWm9vbSB0aGUgY2FtZXJhXG4gICAgICAgICAgICB0aGlzLnpvb20oZmFjdG9yLCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZVBvaW50ZXJEb3duID0gKGV2ZW50OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHBvaW50ZXIgZXZlbnRcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coJ2ZpcnN0IHBvaW50ZXJkb3duJyk7XG4gICAgICAgICAgICAgICAgLy8gU2V0IHRoZSB0aW1lb3V0IGZvciBsb25nIHByZXNzZXNcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQubG9uZ1ByZXNzVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlcmUgd2FzIGEgcG9pbnRlciBkb3duIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5tb3ZlT3JTY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coJ2xvbmdwcmVzcyB0aW1lb3V0Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbEV2ZW50TGlzdGVuZXJzKCdsb25ncHJlc3MnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHRoaXMudG9Xb3JsZFBvcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1swXS5jbGllbnRYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzWzBdLmNsaWVudFkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uOiBldmVudC5idXR0b25cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgTE9OR19QUkVTU19ERUxBWV9NUyk7XG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgdGhlIG90aGVyIGZpZWxkc1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5tb3ZlT3JTY2FsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5tb3ZlRGlzdGFuY2UgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5waW5jaERpc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygnYW5vdGhlciBwb2ludGVyZG93bicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgdGhlIHBvaW50ZXIgZXZlbnRcbiAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLnB1c2goZXZlbnQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUgPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIHByZXZpb3VzIHRvdWNoIGV2ZW50XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91c1RvdWNoSW5kZXggPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5maW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgZSA9PiBlLnBvaW50ZXJJZCA9PT0gZXZlbnQucG9pbnRlcklkKTtcbiAgICAgICAgICAgIC8vIFNhdmUgdGhlIHByZXZpb3VzIHRvdWNoXG4gICAgICAgICAgICBjb25zdCBwcmV2aW91c1RvdWNoID0gdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXNbcHJldmlvdXNUb3VjaEluZGV4XTtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgdG91Y2ggZXZlbnRcbiAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzW3ByZXZpb3VzVG91Y2hJbmRleF0gPSBldmVudDtcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBvbmx5IG9uZSB0b3VjaCBldmVudFxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYW1vdW50IHRoZSBwb2ludGVyIG1vdmVkXG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGV2ZW50LmNsaWVudFggLSBwcmV2aW91c1RvdWNoLmNsaWVudFgsXG4gICAgICAgICAgICAgICAgICAgIHk6IGV2ZW50LmNsaWVudFkgLSBwcmV2aW91c1RvdWNoLmNsaWVudFlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5oeXBvdChkZWx0YS54LCBkZWx0YS55KTtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCBpdCB0byB0aGUgbW92ZSBkaXN0YW5jZVxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5tb3ZlRGlzdGFuY2UgKz0gZGlzdGFuY2U7XG5cbiAgICAgICAgICAgICAgICAvLyBEb24ndCByZWdpc3RlciBhcyBhIG1vdmVPclNjYWxlIGV2ZW50IGlmIHRoZSBwb2ludGVyIGRpZG4ndCBtb3ZlIG11Y2hcbiAgICAgICAgICAgICAgICAvLyB0b2RvIG1heWJlIHJlc2V0IGxvbmcgcHJlc3MgdGltZW91dCBpZiB0aGUgZGVsdGEgaXMgPiAwXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50Lm1vdmVEaXN0YW5jZSA8IE1JTl9NT1VTRV9NT1ZFX0RJU1RBTkNFKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUcmFuc2xhdGUgdGhlIGNhbWVyYVxuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueCArPSBkZWx0YS54O1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueSArPSBkZWx0YS55O1xuXG4gICAgICAgICAgICAgICAgLy8gUmVzdHJpY3QgdGhlIGNhbWVyYSBpZiB0aGUgZmllbGQgaXMgZml4ZWQgc2l6ZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkUmVhbFNpemUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB0aGlzLmZpZWxkU2l6ZS53ICogVElMRV9EUkFXX1NJWkUgKiB0aGlzLnNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5maWVsZFNpemUuaCAqIFRJTEVfRFJBV19TSVpFICogdGhpcy5zY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBdCBsZWFzdCBoYWxmIHRoZSBmaWVsZCBtdXN0IGJlIHZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogMCAtIChmaWVsZFJlYWxTaXplLnggLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IDAgLSAoZmllbGRSZWFsU2l6ZS55IC8gMilcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogY2FudmFzLndpZHRoIC0gKGZpZWxkUmVhbFNpemUueCAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogY2FudmFzLmhlaWdodCAtIChmaWVsZFJlYWxTaXplLnkgLyAyKVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIExpbWl0IHRoZSB0cmFuc2xhdGlvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uLnggPSBNYXRoLm1pbih0aGlzLnRyYW5zbGF0aW9uLngsIG1heC54KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGlvbi54ID0gTWF0aC5tYXgodGhpcy50cmFuc2xhdGlvbi54LCBtaW4ueCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueSA9IE1hdGgubWluKHRoaXMudHJhbnNsYXRpb24ueSwgbWF4LnkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uLnkgPSBNYXRoLm1heCh0aGlzLnRyYW5zbGF0aW9uLnksIG1pbi55KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG11bHRpcGxlLCB0aGlzIGlzIGEgcGluY2ggZXZlbnRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0d28gdG91Y2ggZXZlbnRzICh3ZSBvbmx5IGNhcmUgYWJvdXQgdGhlIGZpcnN0IHR3bywgZXZlbiBpZlxuICAgICAgICAgICAgICAgIC8vIHRoZSB1c2VyIGhhcyBtb3JlIHRoYW4gMiBmaW5nZXJzIHByZXNzZWQgb24gdGhlIHNjcmVlbilcbiAgICAgICAgICAgICAgICBjb25zdCB0b3VjaDAgPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3VjaDEgPSB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1sxXTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIHRvdWNoIGV2ZW50c1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5oeXBvdChcbiAgICAgICAgICAgICAgICAgICAgdG91Y2gwLmNsaWVudFggLSB0b3VjaDEuY2xpZW50WCxcbiAgICAgICAgICAgICAgICAgICAgdG91Y2gwLmNsaWVudFkgLSB0b3VjaDEuY2xpZW50WSk7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiBhIHByZXZpb3VzIHBpbmNoIGRpc3RhbmNlIGhhcyBiZWVuIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wb2ludGVyRG93bkV2ZW50LnBpbmNoRGlzdGFuY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHNjYWxlIGZhY3RvclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmYWN0b3IgPSBkaXN0YW5jZSAvIHRoaXMucG9pbnRlckRvd25FdmVudC5waW5jaERpc3RhbmNlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgY2VudGVyIG9mIHRoZSB6b29tXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6ICh0b3VjaDAuY2xpZW50WCArIHRvdWNoMS5jbGllbnRYKSAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiAodG91Y2gwLmNsaWVudFkgKyB0b3VjaDEuY2xpZW50WSkgLyAyXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gWm9vbSB0aGUgY2FtZXJhIGFyb3VuZCB0aGUgY2VudGVyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuem9vbShmYWN0b3IsIGNlbnRlci54LCBjZW50ZXIueSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBkaXN0YW5jZVxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlckRvd25FdmVudC5waW5jaERpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgcG9pbnRlciBhcyBoYXZpbmcgbW92ZWQgKHNvIHRoZSB1c2VyIGRvZXNuJ3QgZmxhZyBzb21ldGhpbmcgYnlcbiAgICAgICAgICAgIC8vIGRyYWdnaW5nKVxuICAgICAgICAgICAgaWYgKCF0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlTG9nKCdwb2ludGVyIG1vdmVkLCBub3QgcHJlc3MgZXZlbnQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQubW92ZU9yU2NhbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBvaW50ZXJEb3duRXZlbnQubG9uZ1ByZXNzVGltZW91dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhbGwgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ21vdmUnLCB7fSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyQ2FuY2VsID0gKGV2ZW50OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIHRvZG9cbiAgICAgICAgICAgIGNvbnNvbGVMb2coJ3BvaW50ZXJjYW5jZWwnKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlck91dCA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZXJlIHdhcyBhIHBvaW50ZXIgZG93biBldmVudFxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgcG9pbnRlcnNcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZUxvZygncG9pbnRlcm91dDogb25lIG9mIG11bHRpcGxlJyk7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBwb2ludGVyJ3MgdG91Y2hcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcyA9IHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgZSA9PiBlLnBvaW50ZXJJZCAhPT0gZXZlbnQucG9pbnRlcklkKTtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHBpbmNoIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnBpbmNoRGlzdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlTG9nKCdwb2ludGVyb3V0OiBubyBwcmVzcyBldmVudCcpO1xuICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoZSBldmVudFxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBvaW50ZXJEb3duRXZlbnQubG9uZ1ByZXNzVGltZW91dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhhbmRsZVBvaW50ZXJVcCA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZXJlIHdhcyBhIHBvaW50ZXIgZG93biBldmVudFxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIHBvaW50ZXJzXG4gICAgICAgICAgICBpZiAodGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coJ3BvaW50ZXJ1cDogb25lIG9mIG11bHRpcGxlJyk7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBwb2ludGVyJ3MgdG91Y2hcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcyA9IHRoaXMucG9pbnRlckRvd25FdmVudC50b3VjaGVzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgZSA9PiBlLnBvaW50ZXJJZCAhPT0gZXZlbnQucG9pbnRlcklkKTtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnBpbmNoRGlzdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIHBvaW50ZXIgZGlkbid0IG1vdmVPclNjYWxlXG4gICAgICAgICAgICBpZiAoIXRoaXMucG9pbnRlckRvd25FdmVudC5tb3ZlT3JTY2FsZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coJ3BvaW50ZXJ1cDogbm8gbW92ZW1lbnQgb3Igc2NhbGluZywgcHJlc3MgZXZlbnQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIGlmIChub3cgLSB0aGlzLmxhc3RQcmVzc1RpbWVzdGFtcCA+IFBSRVNTX0xJTUlUX01TKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdFByZXNzVGltZXN0YW1wID0gbm93O1xuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ3ByZXNzJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiB0aGlzLnRvV29ybGRQb3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlc1swXS5jbGllbnRZKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbjogZXZlbnQuYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coYGxhc3QgcHJlc3Mgd2FzICR7bm93IC0gdGhpcy5sYXN0UHJlc3NUaW1lc3RhbXB9bXMgYWdvLCBubyBldmVudCAobWluJHtQUkVTU19MSU1JVF9NU31tcylgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coJ3BvaW50ZXJ1cCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbGVhciB0aGUgZXZlbnRcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBvaW50ZXJEb3duRXZlbnQubG9uZ1ByZXNzVGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duRXZlbnQudG91Y2hlcyA9IFtdO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudHMoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiBzbyB0aGUgZ2FtZSBmaWVsZCBpcyBpbiB0aGUgbWlkZGxlIG9mIHRoZSBjYW52YXNcbiAgICBwcml2YXRlIG1pZGRsZVRyYW5zbGF0aW9uKCk6IFBvcyB7XG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gZmllbGQgc2l6ZSwgdGhlIG1pZGRsZSBpcyBqdXN0IDAsIDBcbiAgICAgICAgaWYgKHRoaXMuZmllbGRTaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7eDogMCwgeTogMH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IChjYW52YXMud2lkdGggLyAyKSAtICh0aGlzLnNjYWxlICogKCh0aGlzLmZpZWxkU2l6ZS53ICogVElMRV9EUkFXX1NJWkUpIC8gMikpLFxuICAgICAgICAgICAgeTogKGNhbnZhcy5oZWlnaHQgLyAyKSAtICh0aGlzLnNjYWxlICogKCh0aGlzLmZpZWxkU2l6ZS5oICogVElMRV9EUkFXX1NJWkUpIC8gMikpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHRvQ2FudmFzUG9zKHgsIHk6IG51bWJlcik6IFBvcyB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB0aGlzLnRyYW5zbGF0aW9uLnggKyAoeCAqIFRJTEVfRFJBV19TSVpFICogdGhpcy5zY2FsZSksXG4gICAgICAgICAgICB5OiB0aGlzLnRyYW5zbGF0aW9uLnkgKyAoeSAqIFRJTEVfRFJBV19TSVpFICogdGhpcy5zY2FsZSksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHRvV29ybGRQb3MoeCwgeTogbnVtYmVyKTogUG9zIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IE1hdGguZmxvb3IoKCh4IC0gdGhpcy50cmFuc2xhdGlvbi54KSAvIHRoaXMuc2NhbGUpIC8gVElMRV9EUkFXX1NJWkUpLFxuICAgICAgICAgICAgeTogTWF0aC5mbG9vcigoKHkgLSB0aGlzLnRyYW5zbGF0aW9uLnkpIC8gdGhpcy5zY2FsZSkgLyBUSUxFX0RSQVdfU0laRSksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gWm9vbXMgdGhlIGNhbWVyYSBieSB0aGUgZ2l2ZW4gZmFjdG9yIGFyb3VuZCB0aGUgZ2l2ZW4gcG9pbnRcbiAgICBwcml2YXRlIHpvb20oZmFjdG9yOiBudW1iZXIsIHgsIHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGNhbWVyYSdzIG5ldyBzY2FsZVxuICAgICAgICBjb25zdCBuZXdTY2FsZSA9IHRoaXMuc2NhbGUgKiBmYWN0b3I7XG5cbiAgICAgICAgLy8gT25seSBjaGFuZ2UgdGhlIHNjYWxlIGlmIGl0J3MgdmFsaWRcbiAgICAgICAgaWYgKG5ld1NjYWxlID4gTUlOX1NDQUxFICYmIG5ld1NjYWxlIDwgTUFYX1NDQUxFKSB7XG4gICAgICAgICAgICAvLyBUcmFuc2xhdGUgdGhlIGZpZWxkIHNvIHRoZSBtb3VzZSBpcyBzdGlsbCBvdmVyIHRoZSBzYW1lIHRpbGVcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb24ueCAtPSAoeCAtIHRoaXMudHJhbnNsYXRpb24ueCkgKiAoZmFjdG9yIC0gMSk7XG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uLnkgLT0gKHkgLSB0aGlzLnRyYW5zbGF0aW9uLnkpICogKGZhY3RvciAtIDEpO1xuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIG5ldyBzY2FsZVxuICAgICAgICAgICAgdGhpcy5zY2FsZSA9IG5ld1NjYWxlO1xuXG4gICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgIHRoaXMuY2FsbEV2ZW50TGlzdGVuZXJzKCdtb3ZlJywge30pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGRyYXcodGlsZURhdGE6IEFycmF5PEFycmF5PHN0cmluZz4+KSB7XG4gICAgICAgIC8vIFRoZSBjYW52YXMgd2lkdGggYW5kIGhlaWdodFxuICAgICAgICBjb25zdCB3ID0gY2FudmFzLndpZHRoLCBoID0gY2FudmFzLmhlaWdodDtcblxuICAgICAgICAvLyBDbGVhciB0aGUgY2FudmFzIChmb3Igbm93KVxuICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHcsIGgpO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdmlzaWJsZSB0aWxlc1xuICAgICAgICBjb25zdCB2aXNpYmxlUmVjdCA9IHRoaXMudmlzaWJsZVRpbGVzO1xuICAgICAgICBmb3IgKGxldCB5ID0gdmlzaWJsZVJlY3QueTsgeSA8IHZpc2libGVSZWN0LnkgKyB2aXNpYmxlUmVjdC5oOyB5KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHggPSB2aXNpYmxlUmVjdC54OyB4IDwgdmlzaWJsZVJlY3QueCArIHZpc2libGVSZWN0Lnc7IHgrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aWxlRGF0YVt5XSAmJiB0aWxlRGF0YVt5XVt4XSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHNwcml0ZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcHJpdGUgPSBTUFJJVEVTLlRJTEVTW3RpbGVEYXRhW3ldW3hdXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgdGlsZSBvbiB0aGUgY2FudmFzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IHRoaXMudG9DYW52YXNQb3MoeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdTcHJpdGUoc3ByaXRlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcG9zaXRpb24gb2YgdGhlIHRpbGUgdG8gZHJhdyB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogcG9zLngsIHk6IHBvcy55LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHNpemUgb2YgdGhlIHRpbGUgdG8gZHJhdyB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgdzogVElMRV9EUkFXX1NJWkUgKiB0aGlzLnNjYWxlLCBoOiBUSUxFX0RSQVdfU0laRSAqIHRoaXMuc2NhbGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCB2aXNpYmxlVGlsZXMoKTogUmVjdCB7XG4gICAgICAgIGNvbnN0IGNhbnZhc1JlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgY29uc3QgdGlsZVNpemUgPSBUSUxFX0RSQVdfU0laRSAqIHRoaXMuc2NhbGU7XG5cbiAgICAgICAgY29uc3QgbWluID0gdGhpcy50b1dvcmxkUG9zKGNhbnZhc1JlY3QubGVmdCAtIHRpbGVTaXplLCBjYW52YXNSZWN0LnRvcCAtIHRpbGVTaXplKTtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy50b1dvcmxkUG9zKGNhbnZhc1JlY3QucmlnaHQgKyB0aWxlU2l6ZSwgY2FudmFzUmVjdC5ib3R0b20gKyB0aWxlU2l6ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBtaW4ueCxcbiAgICAgICAgICAgIHk6IG1pbi55LFxuICAgICAgICAgICAgdzogbWF4LnggLSBtaW4ueCxcbiAgICAgICAgICAgIGg6IG1heC55IC0gbWluLnksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gUmVzZXQgdGhlIGNhbWVyYSB0byB0aGUgbWlkZGxlIG9mIHRoZSBmaWVsZFxuICAgIHB1YmxpYyByZXNldCgpIHtcbiAgICAgICAgLy8gSWYgdGhlIGZpZWxkIHNpemUgaXMgc2V0XG4gICAgICAgIGlmICh0aGlzLmZpZWxkU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBGaXQgdGhlIGdhbWUgaW4gdGhlIGNhbnZhc1xuICAgICAgICAgICAgdGhpcy5zY2FsZSA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvICh0aGlzLmZpZWxkU2l6ZS53ICogVElMRV9EUkFXX1NJWkUgKiAxLjEpLFxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAodGhpcy5maWVsZFNpemUuaCAqIFRJTEVfRFJBV19TSVpFICogMS4xKSk7XG4gICAgICAgICAgICAvLyBSZXN0cmljdCB0aGUgc2NhbGVcbiAgICAgICAgICAgIHRoaXMuc2NhbGUgPSBNYXRoLm1heCh0aGlzLnNjYWxlLCBNSU5fU0NBTEUpO1xuICAgICAgICAgICAgdGhpcy5zY2FsZSA9IE1hdGgubWluKHRoaXMuc2NhbGUsIE1BWF9TQ0FMRSk7XG5cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSBzZXQgdGhlIHNjYWxlIHRvIHRoZSBkZWZhdWx0XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gREVGQVVMVF9TQ0FMRTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYW5zbGF0ZSB0byB0aGUgbWlkZGxlXG4gICAgICAgIHRoaXMudHJhbnNsYXRpb24gPSB0aGlzLm1pZGRsZVRyYW5zbGF0aW9uKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLmhhbmRsZVdoZWVsKTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUpO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmNhbmNlbCcsIHRoaXMuaGFuZGxlUG9pbnRlckNhbmNlbCk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyb3V0JywgdGhpcy5oYW5kbGVQb2ludGVyT3V0KTtcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHRoaXMuaGFuZGxlUG9pbnRlclVwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVyZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5oYW5kbGVXaGVlbCk7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlKTtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJjYW5jZWwnLCB0aGlzLmhhbmRsZVBvaW50ZXJDYW5jZWwpO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm91dCcsIHRoaXMuaGFuZGxlUG9pbnRlck91dCk7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCk7XG4gICAgfVxuXG59IiwiaW1wb3J0ICogYXMgVXRpbCBmcm9tICcuLi91dGlsJztcblxuLy8gQ3JlYXRlIHRoZSBXQVNNIHdlYiB3b3JrZXJcblV0aWwuY29uc29sZUxvZygnQ3JlYXRpbmcgV0FTTSB3b3JrZXInKTtcbmNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIobmV3IFVSTCgnLi93b3JrZXIudHMnLCBpbXBvcnQubWV0YS51cmwpKTtcblxudHlwZSBNZXNzYWdlPFQ+ID0ge1xuICAgIGNtZDogc3RyaW5nLFxuICAgIGlkOiBzdHJpbmcsXG4gICAgZGF0YTogVFxufVxuXG50eXBlIFJlc3BvbnNlTWVzc2FnZTxUPiA9IE1lc3NhZ2U8VD4gJiB7XG4gICAgc3VjY2VzczogYm9vbGVhblxufVxuXG5mdW5jdGlvbiBuZXdNZXNzYWdlPFQ+KGNtZDogc3RyaW5nLCBkYXRhOiBUKTogTWVzc2FnZTxUPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY21kLFxuICAgICAgICAvLyBXZSdyZSBhc3N1bWluZyB0aGUgY21kIG5hbWUgKyBjdXJyZW50IHRpbWUgaW4gbWlsbGlzZWNvbmRzIGlzIGEgZ29vZCBlbm91Z2ggSURcbiAgICAgICAgaWQ6IGNtZCArIERhdGUubm93KCksXG4gICAgICAgIGRhdGFcbiAgICB9O1xufVxuXG4vLyBBIG1hcCBvZiBwcm9taXNlcywgaW5kZXhlZCBieSBtZXNzYWdlIElEXG5jb25zdCBwcm9taXNlcyA9IG5ldyBNYXA8c3RyaW5nLCBbKGRhdGE6IHVua25vd24pID0+IHZvaWQsIChlcnI6IHVua25vd24pID0+IHZvaWRdPigpO1xuXG5VdGlsLmNvbnNvbGVMb2coJ1JlZ2lzdGVyaW5nIFdlYklPIGV2ZW50IGxpc3RlbmVyIGZvciBHbycpO1xud29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBlID0+IHtcbiAgICBpZiAoZS5kYXRhKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlOiBSZXNwb25zZU1lc3NhZ2U8dW5rbm93bj4gPSBlLmRhdGE7XG4gICAgICAgIGNvbnN0IFtyZXNvbHZlLCByZWplY3RdID0gcHJvbWlzZXMuZ2V0KHJlc3BvbnNlLmlkKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBVdGlsLmNvbnNvbGVMb2coJ0Vycm9yIHJlc3BvbnNlIGZvciBcXCcnICsgcmVzcG9uc2UuY21kICsgJ1xcJzogJyArIHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8vIFdoZXRoZXIgdGhlIHdvcmtlciBoYXMgYmVlbiBjb25uZWN0ZWRcbmV4cG9ydCBsZXQgd29ya2VyQ29ubmVjdGVkID0gZmFsc2U7XG5cbi8vIE1lc3NhZ2VzIHRoYXQgaGF2ZSBiZWVuIHBvc3RlZCB3aGlsZSB0aGUgd29ya2VyIGlzIGJlaW5nIGNyZWF0ZWRcbmNvbnN0IHF1ZXVlZE1lc3NhZ2VzOiBBcnJheTxNZXNzYWdlPHVua25vd24+PiA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gcG9zdE1lc3NhZ2U8VCwgUj4oY21kOiBzdHJpbmcsIGRhdGE/OiBULCBub1F1ZXVlPzogYm9vbGVhbik6IFByb21pc2U8Uj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IG1zZyA9IG5ld01lc3NhZ2UoY21kLCBkYXRhKTtcbiAgICAgICAgLy8gQWRkIHRoZSBwcm9taXNlXG4gICAgICAgIHByb21pc2VzLnNldChtc2cuaWQsIFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgICAgaWYgKCFub1F1ZXVlICYmICF3b3JrZXJDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIFV0aWwuY29uc29sZUxvZyhjbWQgKyAnIG1lc3NhZ2UgcmVjZWl2ZWQsIGJ1dCB3b3JrZXIgaGFzblxcJ3QgY29ubmVjdGVkIHlldC4gQWRkaW5nIHRvIHF1ZXVlJyk7XG4gICAgICAgICAgICBxdWV1ZWRNZXNzYWdlcy5wdXNoKG1zZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZW5kUGluZyh0aW1lb3V0OiBudW1iZXIpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBwaW5nUHJvbWlzZSA9IHBvc3RNZXNzYWdlKCdwaW5nJywgbnVsbCwgdHJ1ZSk7XG4gICAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gc2V0VGltZW91dChyLCB0aW1lb3V0KSk7XG5cbiAgICB0cnkge1xuICAgICAgICAvLyBBd2FpdCB0aGUgcGluZywgYW5kIGlmIGl0IHN1Y2NlZWRzXG4gICAgICAgIGF3YWl0IFByb21pc2UucmFjZShbcGluZ1Byb21pc2UsIHRpbWVvdXRQcm9taXNlXSk7XG4gICAgICAgIC8vIFNldCB0aGUgd29ya2VyIGFzIGNvbm5lY3RlZFxuICAgICAgICB3b3JrZXJDb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAvLyBQb3N0IHRoZSBxdWV1ZWQgbWVzc2FnZXMgdG8gdGhlIHdvcmtlclxuICAgICAgICBxdWV1ZWRNZXNzYWdlcy5mb3JFYWNoKChtc2cpID0+IHtcbiAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gQ2xlYXIgdGhlIHF1ZXVlXG4gICAgICAgIHF1ZXVlZE1lc3NhZ2VzLmxlbmd0aCA9IDA7XG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIC8vIElmIHRoZSB0aW1lb3V0IHByb21pc2UgcmVzb2x2ZWQgZmlyc3RcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmNvbnN0IE1BWF9QSU5HUyA9IDU7XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbmRQaW5nVW50aWxDb25uZWN0KCkge1xuICAgIGxldCBwaW5ncyA9IDA7XG4gICAgbGV0IHRpbWVvdXQgPSAxMDA7XG4gICAgd2hpbGUgKCF3b3JrZXJDb25uZWN0ZWQgJiYgcGluZ3MgPCBNQVhfUElOR1MpIHtcbiAgICAgICAgVXRpbC5jb25zb2xlTG9nKCdTZW5kaW5nIHBpbmcgd2l0aCB0aW1lb3V0ICcgKyB0aW1lb3V0ICsgJ21zJyk7XG4gICAgICAgIHBpbmdzKys7XG4gICAgICAgIGlmICghYXdhaXQgc2VuZFBpbmcodGltZW91dCkpIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSB0aW1lb3V0ICogMjtcbiAgICAgICAgICAgIFV0aWwuY29uc29sZUxvZygnUGluZyB0aW1lb3V0IHJlYWNoZWQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwaW5ncyA+PSBNQVhfUElOR1MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXggcGluZ3MgJyArIE1BWF9QSU5HUyArICcgcmVhY2hlZCwgYXNzdW1pbmcgV0FTTSBtb2R1bGUgaXMgbm90IGZ1bmN0aW9uYWwnKTtcbiAgICB9XG59XG5zZW5kUGluZ1VudGlsQ29ubmVjdCgpLnRoZW4oKCkgPT4ge1xuICAgIFV0aWwuY29uc29sZUxvZygnUmVzcG9uc2UgdG8gcGluZyByZWNlaXZlZCwgd29ya2VyIGNvbm5lY3RlZCcpO1xufSk7IiwiaW1wb3J0IHtwb3N0TWVzc2FnZX0gZnJvbSAnLi93b3JrZXItaGVscGVyJztcblxuaW1wb3J0IHtQb3MsIFJlY3R9IGZyb20gJy4uL2NvbW1vbic7XG5cbmV4cG9ydCB0eXBlIEluaXRSZXF1ZXN0RGF0YSA9IHtcbiAgICB3aWR0aDogbnVtYmVyLFxuICAgIGhlaWdodDogbnVtYmVyLFxuICAgIG1pbmVzOiBudW1iZXJcbn0gfCB7XG4gICAgbWluZURlbnNpdHk6IG51bWJlclxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChkYXRhOiBJbml0UmVxdWVzdERhdGEpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gcG9zdE1lc3NhZ2UoJ2luaXQnLCBkYXRhKTtcbn1cblxuZXhwb3J0IHR5cGUgQXBwZWFyYW5jZVJlcXVlc3REYXRhID0gUmVjdFxuXG5leHBvcnQgdHlwZSBBcHBlYXJhbmNlUmVzcG9uc2VEYXRhID0gQXJyYXk8QXJyYXk8c3RyaW5nPj5cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVhcmFuY2UoZGF0YTogQXBwZWFyYW5jZVJlcXVlc3REYXRhKTogUHJvbWlzZTxBcHBlYXJhbmNlUmVzcG9uc2VEYXRhPiB7XG4gICAgcmV0dXJuIHBvc3RNZXNzYWdlKCdhcHBlYXJhbmNlJywgZGF0YSk7XG59XG5cbmV4cG9ydCB0eXBlIFVuY292ZXJSZXF1ZXN0RGF0YSA9IFBvc1xuXG5leHBvcnQgdHlwZSBVbmNvdmVyUmVzcG9uc2VEYXRhID0ge1xuICAgIHN0YXRlOiBzdHJpbmcsXG4gICAgdGltZXI6IG51bWJlclxufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5jb3ZlcihkYXRhOiBVbmNvdmVyUmVxdWVzdERhdGEpOiBQcm9taXNlPFVuY292ZXJSZXNwb25zZURhdGE+IHtcbiAgICByZXR1cm4gcG9zdE1lc3NhZ2UoJ3VuY292ZXInLCBkYXRhKTtcbn1cblxuZXhwb3J0IHR5cGUgRmxhZ1JlcXVlc3REYXRhID0gUG9zXG5cbmV4cG9ydCBmdW5jdGlvbiBmbGFnKGRhdGE6IEZsYWdSZXF1ZXN0RGF0YSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBwb3N0TWVzc2FnZSgnZmxhZycsIGRhdGEpO1xufVxuIiwiaW1wb3J0IHtjYW52YXMsIGRyYXdTcHJpdGV9IGZyb20gJy4uL2RyYXcnO1xuaW1wb3J0IEV2ZW50TWFuYWdlciBmcm9tICcuLi9ldmVudC1tYW5hZ2VyJztcblxuaW1wb3J0IHtQb3MsIFJlY3R9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQge2Nsb25lT2JqfSBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0IHR5cGUgSGl0Ym94ID0gUmVjdFxuXG5leHBvcnQgdHlwZSBFbGVtZW50ID0ge1xuICAgIGlkOiBzdHJpbmdcbiAgICBzcHJpdGU6IFJlY3QsXG4gICAgaG92ZXJlZFNwcml0ZT86IFBvcyxcbiAgICBzY2FsZTogbnVtYmVyLFxuICAgIGludGVyYWN0YWJsZT86IGJvb2xlYW5cbn1cblxuY29uc3QgYmlnZ2VzdEVsZW1lbnRCeUZpZWxkID0gKGVsZW1lbnRzOiBBcnJheTxFbGVtZW50PiwgZmllbGQ6IHN0cmluZykgPT5cbiAgICBlbGVtZW50cy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+XG4gICAgICAgIHByZXYuc3ByaXRlW2ZpZWxkXSAqIHByZXYuc2NhbGUgPiBjdXJyLnNwcml0ZVtmaWVsZF0gKiBjdXJyLnNjYWxlID8gcHJldiA6IGN1cnIpO1xuXG5mdW5jdGlvbiBnZXRBYnNQb3MoeCwgeTogbnVtYmVyKSB7XG4gICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gW01hdGgucm91bmQoeCAtIHJlY3QubGVmdCksIE1hdGgucm91bmQoeSAtIHJlY3QudG9wKV07XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdCh4LCB5OiBudW1iZXIsIGhpdGJveDogSGl0Ym94KSB7XG4gICAgcmV0dXJuIHggPiBoaXRib3gueCAmJiB5ID4gaGl0Ym94LnkgJiZcbiAgICAgICAgeCA8IGhpdGJveC54ICsgaGl0Ym94LncgJiYgeSA8IGhpdGJveC55ICsgaGl0Ym94Lmg7XG59XG5cbmV4cG9ydCB0eXBlIEVsZW1lbnRQcmVzc0V2ZW50ID0ge1xuICAgIHByZXNzZWRFbGVtZW50OiBzdHJpbmdcbn1cblxuZXhwb3J0IHR5cGUgRWxlbWVudEhvdmVyZWRFdmVudCA9IHtcbiAgICBob3ZlcmVkRWxlbWVudDogc3RyaW5nIHwgbnVsbFxufVxuXG5pbnRlcmZhY2UgTWVudUV2ZW50TWFwIHtcbiAgICAncHJlc3MnOiBFbGVtZW50UHJlc3NFdmVudFxuICAgICdob3Zlcic6IEVsZW1lbnRIb3ZlcmVkRXZlbnRcbn1cblxuLy8gQ2xhc3MgZm9yIGEgdmVyeSBzaW1wbGUgbWVudSwgd2hlcmUgZWFjaCBcImVsZW1lbnRcIiBpcyBkcmF3biB0b3AgZG93biwgZXF1YWxseSBzcGFjZWRcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbnUgZXh0ZW5kcyBFdmVudE1hbmFnZXI8TWVudUV2ZW50TWFwPiB7XG4gICAgcHJpdmF0ZSBlbGVtZW50czogQXJyYXk8RWxlbWVudD47XG4gICAgcHJpdmF0ZSB0YWxsZXN0RWxlbWVudDogRWxlbWVudDtcbiAgICBwcml2YXRlIGxvbmdlc3RFbGVtZW50OiBFbGVtZW50O1xuXG4gICAgcHJvdGVjdGVkIGVsZW1lbnRIaXRib3hlczogTWFwPHN0cmluZywgSGl0Ym94PjtcbiAgICBwcm90ZWN0ZWQgaG92ZXJlZEVsZW1lbnQ6IHN0cmluZyB8IG51bGw7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZVBvaW50ZXJNb3ZlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlUG9pbnRlckRvd247XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50czogQXJyYXk8RWxlbWVudD4pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgICAgICB0aGlzLnRhbGxlc3RFbGVtZW50ID0gYmlnZ2VzdEVsZW1lbnRCeUZpZWxkKGVsZW1lbnRzLCAnaCcpO1xuICAgICAgICB0aGlzLmxvbmdlc3RFbGVtZW50ID0gYmlnZ2VzdEVsZW1lbnRCeUZpZWxkKGVsZW1lbnRzLCAndycpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudEhpdGJveGVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmhvdmVyZWRFbGVtZW50ID0gbnVsbDtcblxuICAgICAgICB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlID0gKGV2ZW50OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYWJzb2x1dGUgWCBhbmQgWSBvZiB0aGUgYnV0dG9uIHByZXNzXG4gICAgICAgICAgICBjb25zdCBbeCwgeV0gPSBnZXRBYnNQb3MoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIG1lbnUgZWxlbWVudHNcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2VsZW1lbnQsIGhpdGJveF0gb2YgdGhpcy5lbGVtZW50SGl0Ym94ZXMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHBvaW50ZXIgaW50ZXJzZWN0ZWQgdGhlIG1lbnUgaXRlbVxuICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3QoeCwgeSwgaGl0Ym94KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG5ld2x5IGhvdmVyZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaG92ZXJlZEVsZW1lbnQgIT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3ZlcmVkRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxFdmVudExpc3RlbmVycygnaG92ZXInLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJlZEVsZW1lbnQ6IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiBhbiBlbGVtZW50IGlzIGJlaW5nIGhvdmVyZWQgb3ZlciAoYnV0IG5vdCBhbnltb3JlKVxuICAgICAgICAgICAgaWYgKHRoaXMuaG92ZXJlZEVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgaG92ZXJlZCBlbGVtZW50XG4gICAgICAgICAgICAgICAgdGhpcy5ob3ZlcmVkRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsRXZlbnRMaXN0ZW5lcnMoJ2hvdmVyJywge1xuICAgICAgICAgICAgICAgICAgICBob3ZlcmVkRWxlbWVudDogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlckRvd24gPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBhYnNvbHV0ZSBYIGFuZCBZIG9mIHRoZSBidXR0b24gcHJlc3NcbiAgICAgICAgICAgIGNvbnN0IFt4LCB5XSA9IGdldEFic1BvcyhldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgbWVudSBlbGVtZW50c1xuICAgICAgICAgICAgZm9yIChjb25zdCBbZWxlbWVudCwgaGl0Ym94XSBvZiB0aGlzLmVsZW1lbnRIaXRib3hlcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcG9pbnRlciBpbnRlcnNlY3RlZCB0aGUgbWVudSBpdGVtXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdCh4LCB5LCBoaXRib3gpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbEV2ZW50TGlzdGVuZXJzKCdwcmVzcycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNzZWRFbGVtZW50OiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudHMoKTtcbiAgICB9XG5cbiAgICBhc3luYyBkcmF3KGJvdW5kcz86IFJlY3QpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gSWYgdGhlIGJvdW5kcyB3ZXJlbid0IGdpdmVuXG4gICAgICAgIGlmICghYm91bmRzKSB7XG4gICAgICAgICAgICAvLyBXZSBhc3N1bWUgdGhlIGJvdW5kcyBhcmUgdGhlIHdob2xlIGNhbnZhc1xuICAgICAgICAgICAgYm91bmRzID0ge1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICB3OiBjYW52YXMud2lkdGgsXG4gICAgICAgICAgICAgICAgaDogY2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJzdCwgc2NhbGUgc28gdGhlIGVsZW1lbnRzIGFyZSBldmVubHkgc3BhY2VkIGJ5IGhlaWdodFxuICAgICAgICBsZXQgc2NhbGUgPSAoYm91bmRzLmggKiAoMC41IC8gdGhpcy5lbGVtZW50cy5sZW5ndGgpKSAvXG4gICAgICAgICAgICAodGhpcy50YWxsZXN0RWxlbWVudC5zcHJpdGUuaCAqIHRoaXMudGFsbGVzdEVsZW1lbnQuc2NhbGUpO1xuXG4gICAgICAgIC8vIElmIHRoZSBsb25nZXN0IGVsZW1lbnQgd291bGQgYmUgdG9vIGxvbmdcbiAgICAgICAgaWYgKHNjYWxlICogdGhpcy5sb25nZXN0RWxlbWVudC5zcHJpdGUudyAqIHRoaXMubG9uZ2VzdEVsZW1lbnQuc2NhbGUgPj0gYm91bmRzLncgKiAwLjkpIHtcbiAgICAgICAgICAgIC8vIFNjYWxlIHNvIHRoZSBsb25nZXN0IGVsZW1lbnQgaXMgOTAlIHRoZSB3aWR0aCBvZiB0aGUgY2FudmFzXG4gICAgICAgICAgICBzY2FsZSA9IChib3VuZHMudyAqIDAuOSkgLyAodGhpcy5sb25nZXN0RWxlbWVudC5zcHJpdGUudyAqIHRoaXMubG9uZ2VzdEVsZW1lbnQuc2NhbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgbGV0IHkgPSBib3VuZHMueSArICh0aGlzLnRhbGxlc3RFbGVtZW50LnNwcml0ZS5oICogc2NhbGUgKiAwLjUpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbFdpZHRoID0gZWxlbWVudC5zcHJpdGUudyAqIGVsZW1lbnQuc2NhbGUgKiBzY2FsZTtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWxIZWlnaHQgPSBlbGVtZW50LnNwcml0ZS5oICogZWxlbWVudC5zY2FsZSAqIHNjYWxlO1xuXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBlbGVtZW50J3MgaGl0Ym94XG4gICAgICAgICAgICAgICAgY29uc3QgaGl0Ym94OiBIaXRib3ggPSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50J3MgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgeDogYm91bmRzLnggKyAoKGJvdW5kcy53IC8gMikgLSAoYWN0dWFsV2lkdGggLyAyKSksIHk6IHksXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50J3Mgc2l6ZVxuICAgICAgICAgICAgICAgICAgICB3OiBhY3R1YWxXaWR0aCwgaDogYWN0dWFsSGVpZ2h0LFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pbnRlcmFjdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBlbGVtZW50J3MgaGl0Ym94IHRvIHRoZSBtYXBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50SGl0Ym94ZXMuc2V0KGVsZW1lbnQuaWQsIGhpdGJveCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ByaXRlID0gY2xvbmVPYmooZWxlbWVudC5zcHJpdGUpO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgZWxlbWVudCBpcyBiZWluZyBob3ZlcmVkIG92ZXIgKGFuZCBoYXMgYSBzcHJpdGUpXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaWQgPT09IHRoaXMuaG92ZXJlZEVsZW1lbnQgJiYgJ2hvdmVyZWRTcHJpdGUnIGluIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UncmUgYXNzdW1pbmcgdGhlIGhvdmVyZWQgc3ByaXRlIGlzIHRoZSBzYW1lIHNpemUgaGVyZVxuICAgICAgICAgICAgICAgICAgICBzcHJpdGUueCA9IGVsZW1lbnQuaG92ZXJlZFNwcml0ZS54O1xuICAgICAgICAgICAgICAgICAgICBzcHJpdGUueSA9IGVsZW1lbnQuaG92ZXJlZFNwcml0ZS55O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERyYXcgdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBkcmF3U3ByaXRlKHNwcml0ZSwgaGl0Ym94KTtcblxuICAgICAgICAgICAgICAgIC8vIE1vdmUgdGhlIHkgZG93blxuICAgICAgICAgICAgICAgIHkgKz0gYWN0dWFsSGVpZ2h0ICogMS41O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgfVxuXG4gICAgcHVibGljIGRlcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMuaGFuZGxlUG9pbnRlck1vdmUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLmhhbmRsZVBvaW50ZXJEb3duKTtcbiAgICB9XG59IiwiZXhwb3J0IHR5cGUgUG9zID0ge1xuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXJcbn1cblxuZXhwb3J0IHR5cGUgU2l6ZSA9IHtcbiAgICB3OiBudW1iZXIsXG4gICAgaDogbnVtYmVyXG59XG5cbmV4cG9ydCB0eXBlIFJlY3QgPSBQb3MgJiBTaXplXG5cbmV4cG9ydCBjb25zdCBwb3MgPSAocjogUmVjdCk6IFBvcyA9PiAoe3g6IHIueCwgeTogci55fSk7XG5cbmV4cG9ydCBjb25zdCByZWN0ID0gKHA6IFBvcywgczogU2l6ZSk6IFJlY3QgPT4gKHt4OiBwLngsIHk6IHAueSwgdzogcy53LCBoOiBzLmh9KTsiLCJpbXBvcnQgTWVudSwge0VsZW1lbnR9IGZyb20gJy4vbWVudSc7XG5pbXBvcnQge1NQUklURVMsIGNhbnZhcywgY3R4LCBkcmF3U3ByaXRlfSBmcm9tICcuLi9kcmF3JztcblxuaW1wb3J0IHtSZWN0LCBwb3N9IGZyb20gJy4uL2NvbW1vbic7XG5cbi8vIFRIZSBiYWNrZ3JvdW5kIG9mIHRoZSBtb2RhbCBpcyBtYWRlIHVwIG9mIGEgZ3JpZCBvZiAxMngxMiB0aWxlc1xuY29uc3QgTU9EQUxfR1JJRF9TSVpFID0gMTA7XG5cbmV4cG9ydCBjb25zdCBDTE9TRV9CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtb2RhbC5jbG9zZV9idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5USUxFUy5DTE9TRSxcbiAgICBzY2FsZTogMVxufTtcblxuZXhwb3J0IGNvbnN0IEJBQ0tfQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbW9kYWwuYmFja19idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5NT0RBTC5CQUNLLFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLk1PREFMLkJBQ0tfSE9WRVJFRCksXG4gICAgc2NhbGU6IDEuMjUsXG4gICAgaW50ZXJhY3RhYmxlOiB0cnVlXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCBleHRlbmRzIE1lbnUge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRzOiBBcnJheTxFbGVtZW50Pikge1xuICAgICAgICBzdXBlcihlbGVtZW50cyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZHJhdygpIHtcbiAgICAgICAgLy8gRHJhdyB0aGUgYmFja2dyb3VuZCBpbiBhIHByb21pc2VcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8UmVjdD4ocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAvLyBUaGUgY2FudmFzIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgICAgICAgIGNvbnN0IHcgPSBjYW52YXMud2lkdGgsIGggPSBjYW52YXMuaGVpZ2h0O1xuXG4gICAgICAgICAgICAvLyBEYXJrZW4gdGhlIGZpZWxkXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMCwgMCwgMCwgMC40KSc7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgdywgaCk7XG5cbiAgICAgICAgICAgIC8vIFRoZSBtb2RhbCBpcyA4MCUgdGhlIGhlaWdodCBvZiB0aGUgY2FudmFzIGlmIGxhbmRzY2FwZSwgb3IgODAlIHRoZSB3aWR0aCBpZiBwb3J0cmFpdFxuICAgICAgICAgICAgY29uc3QgbW9kYWxTaXplID0gdyA+IGggPyBoICogMC44IDogdyAqIDAuODtcblxuICAgICAgICAgICAgY29uc3QgbW9kYWxYID0gKHcgLyAyKSAtIChtb2RhbFNpemUgLyAyKTtcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsWSA9IChoIC8gMikgLSAobW9kYWxTaXplIC8gMik7XG5cbiAgICAgICAgICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGlzIG1hZGUgdXAgb2YgYSBncmlkIG9mIDEyeDEyIHRpbGVzXG4gICAgICAgICAgICBjb25zdCB0aWxlU2l6ZSA9IG1vZGFsU2l6ZSAvIE1PREFMX0dSSURfU0laRTtcblxuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBNT0RBTF9HUklEX1NJWkU7IHkrKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgTU9EQUxfR1JJRF9TSVpFOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSB0aWxlJ3MgaGl0Ym94XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhpdGJveDogUmVjdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IG1vZGFsWCArICh4ICogdGlsZVNpemUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogbW9kYWxZICsgKHkgKiB0aWxlU2l6ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB3OiB0aWxlU2l6ZSwgaDogdGlsZVNpemUsXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdG9kbyBkcmF3IHRoZSBiYWNrZ3JvdW5kIHByb3Blcmx5XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcHJpdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQaWNrIHRoZSBjZW50ZXIgcGl4ZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IFNQUklURVMuVElMRVMuRU1QVFkudyAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBTUFJJVEVTLlRJTEVTLkVNUFRZLmggLyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdzogMSwgaDogMVxuICAgICAgICAgICAgICAgICAgICB9IGFzIFJlY3Q7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0aWxlIHNob3VsZCBiZSBhIGNvcm5lclxuICAgICAgICAgICAgICAgICAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSBNT0RBTF9HUklEX1NJWkUgLSAxIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID09PSAwIHx8IHkgPT09IE1PREFMX0dSSURfU0laRSAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0aWxlIGlzIGluIHRoZSB1cHBlciByaWdodCBjb3JuZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4ID09PSBNT0RBTF9HUklEX1NJWkUgLSAxICYmIHkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudCBpcyB0aGUgY2xvc2UgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlID0gQ0xPU0VfQlVUVE9OLnNwcml0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGhpdGJveCB0byB0aGUgbWVudVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudEhpdGJveGVzLnNldChDTE9TRV9CVVRUT04uaWQsIGhpdGJveCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlID0gU1BSSVRFUy5USUxFUy5ISURERU47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkcmF3U3ByaXRlKHNwcml0ZSwgaGl0Ym94KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlc29sdmUgdGhlIHByb21pc2Ugd2l0aCB0aGUgbW9kYWwncyBpbm5lciBib3VuZHMsIGZvciBkcmF3aW5nIHRoZSBtZW51XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICB4OiBtb2RhbFggKyB0aWxlU2l6ZSxcbiAgICAgICAgICAgICAgICB5OiBtb2RhbFkgKyB0aWxlU2l6ZSxcbiAgICAgICAgICAgICAgICB3OiBtb2RhbFNpemUgLSAodGlsZVNpemUgKiAyKSxcbiAgICAgICAgICAgICAgICBoOiBtb2RhbFNpemUgLSAodGlsZVNpemUgKiAyKSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBUaGVuLCBkcmF3IHRoZSBtZW51IG92ZXIgaXRcbiAgICAgICAgfSkudGhlbihpbm5lck1vZGFsQm91bmRzID0+IHN1cGVyLmRyYXcoaW5uZXJNb2RhbEJvdW5kcykpO1xuICAgIH1cbn0iLCJpbXBvcnQgTW9kYWwsIHtCQUNLX0JVVFRPTn0gZnJvbSAnLi9tb2RhbCc7XG5pbXBvcnQge0VsZW1lbnR9IGZyb20gJy4vbWVudSc7XG5pbXBvcnQge1NQUklURVN9IGZyb20gJy4uL2RyYXcnO1xuXG5pbXBvcnQge3Bvc30gZnJvbSAnLi4vY29tbW9uJztcblxuZXhwb3J0IGNvbnN0IFRJVExFOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbW9kYWwucmV0cnkudGl0bGUnLFxuICAgIHNwcml0ZTogU1BSSVRFUy5SRVRSWV9NT0RBTC5USVRMRSxcbiAgICBzY2FsZTogMSxcbn07XG5cbmV4cG9ydCBjb25zdCBSRVRSWV9CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtb2RhbC5yZXRyeS5yZXRyeV9idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5SRVRSWV9NT0RBTC5SRVRSWSxcbiAgICBob3ZlcmVkU3ByaXRlOiBwb3MoU1BSSVRFUy5SRVRSWV9NT0RBTC5SRVRSWV9IT1ZFUkVEKSxcbiAgICBzY2FsZTogMS4yNSxcbiAgICBpbnRlcmFjdGFibGU6IHRydWVcbn07XG5cbi8vIFRoZSBlbGVtZW50cywgaW4gb3JkZXIgb2YgaG93IHRoZXkncmUgZGlzcGxheWVkIG9uIHNjcmVlbiAodG9wIGRvd24pXG5jb25zdCBFTEVNRU5UUzogQXJyYXk8RWxlbWVudD4gPSBbVElUTEUsIFJFVFJZX0JVVFRPTiwgQkFDS19CVVRUT05dO1xuXG5leHBvcnQgZGVmYXVsdCBNb2RhbC5iaW5kKE1vZGFsLCBFTEVNRU5UUyk7IiwiaW1wb3J0IE1vZGFsLCB7QkFDS19CVVRUT059IGZyb20gJy4vbW9kYWwnO1xuaW1wb3J0IHtFbGVtZW50fSBmcm9tICcuL21lbnUnO1xuaW1wb3J0IHtTUFJJVEVTfSBmcm9tICcuLi9kcmF3JztcblxuaW1wb3J0IHtwb3N9IGZyb20gJy4uL2NvbW1vbic7XG5cbmV4cG9ydCBjb25zdCBUSVRMRTogRWxlbWVudCA9IHtcbiAgICBpZDogJ21vZGFsLnN1Y2Nlc3MudGl0bGUnLFxuICAgIHNwcml0ZTogU1BSSVRFUy5TVUNDRVNTX01PREFMLlRJVExFLFxuICAgIHNjYWxlOiAxLFxufTtcblxuZXhwb3J0IGNvbnN0IFJFU0VUX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21vZGFsLnN1Y2Nlc3MucmVzZXRfYnV0dG9uJyxcbiAgICBzcHJpdGU6IFNQUklURVMuU1VDQ0VTU19NT0RBTC5SRVNFVCxcbiAgICBob3ZlcmVkU3ByaXRlOiBwb3MoU1BSSVRFUy5TVUNDRVNTX01PREFMLlJFU0VUX0hPVkVSRUQpLFxuICAgIHNjYWxlOiAxLjI1LFxuICAgIGludGVyYWN0YWJsZTogdHJ1ZVxufTtcblxuLy8gVGhlIGVsZW1lbnRzLCBpbiBvcmRlciBvZiBob3cgdGhleSdyZSBkaXNwbGF5ZWQgb24gc2NyZWVuICh0b3AgZG93bilcbmNvbnN0IEVMRU1FTlRTOiBBcnJheTxFbGVtZW50PiA9IFtUSVRMRSwgUkVTRVRfQlVUVE9OLCBCQUNLX0JVVFRPTl07XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGFsLmJpbmQoTW9kYWwsIEVMRU1FTlRTKTsiLCJpbXBvcnQgQ2FtZXJhLCB7UHJlc3NFdmVudH0gZnJvbSAnLi9jYW1lcmEnO1xuaW1wb3J0IHtjYW52YXN9IGZyb20gJy4uL2RyYXcnO1xuXG5pbXBvcnQgKiBhcyBnb2lvIGZyb20gJy4uL2dvaW8vZ29pbyc7XG5cbmltcG9ydCBNb2RhbCwge0JBQ0tfQlVUVE9OLCBDTE9TRV9CVVRUT059IGZyb20gJy4uL21lbnUvbW9kYWwnO1xuaW1wb3J0IFJldHJ5TW9kYWwsIHtSRVRSWV9CVVRUT059IGZyb20gJy4uL21lbnUvcmV0cnktbW9kYWwnO1xuaW1wb3J0IFN1Y2Nlc3NNb2RhbCwge1JFU0VUX0JVVFRPTn0gZnJvbSAnLi4vbWVudS9zdWNjZXNzLW1vZGFsJztcbmltcG9ydCB7RWxlbWVudFByZXNzRXZlbnR9IGZyb20gJy4uL21lbnUvbWVudSc7XG5cbmltcG9ydCB7UmVjdCwgU2l6ZX0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7Y29uc29sZUxvZywgbGltaXRlcn0gZnJvbSAnLi4vdXRpbCc7XG5cbi8vIENvbnN0YW50cyBmb3IgdGhlIGdhbWUgc3RhdGVzXG5jb25zdCBHQU1FX1NUQVRFUyA9IHtcbiAgICBTVEFSVDogJ3N0YXJ0JyxcbiAgICBQTEFZSU5HOiAncGxheWluZycsXG4gICAgV0lOOiAnd2luJyxcbiAgICBMT1NTOiAnbG9zcydcbn07XG5cbmNsYXNzIE1vZGFsQ29udGFpbmVyIHtcbiAgICBwcml2YXRlIG1vZGFsOiBNb2RhbCB8IG51bGw7XG4gICAgI2hpZGRlbjogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1vZGFsID0gbnVsbDtcbiAgICAgICAgdGhpcy4jaGlkZGVuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb3Blbihtb2RhbDogTW9kYWwpIHtcbiAgICAgICAgdGhpcy5tb2RhbCA9IG1vZGFsO1xuICAgICAgICB0aGlzLiNoaWRkZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xvc2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5tb2RhbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtb2RhbCB0byBjbG9zZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB0aGlzLm1vZGFsID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGhpZGRlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2hpZGRlbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGlkZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vZGFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1vZGFsIHRvIGhpZGUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGFsLmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgdGhpcy4jaGlkZGVuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmV2ZWFsKCkge1xuICAgICAgICBpZiAoIXRoaXMubW9kYWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbW9kYWwgdG8gcmV2ZWFsJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RhbC5yZWdpc3RlckV2ZW50cygpO1xuICAgICAgICB0aGlzLiNoaWRkZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZHJhdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNoaWRkZW4pIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubW9kYWwuZHJhdygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGRlcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIHRoaXMubW9kYWw/LmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGU6IEV2ZW50KSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5leHBvcnQgdHlwZSBGaW5pdGVHYW1lUHJvcHMgPSBTaXplICYge1xuICAgIG51bU1pbmVzOiBudW1iZXJcbn1cblxuZXhwb3J0IHR5cGUgSW5maW5pdGVHYW1lUHJvcHMgPSB7XG4gICAgbWluZURlbnNpdHk6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBHYW1lUHJvcHMgPSAoRmluaXRlR2FtZVByb3BzIHwgSW5maW5pdGVHYW1lUHJvcHMpICYge1xuICAgIGhhbmRsZUJhY2s6ICgpID0+IHZvaWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogR2FtZVByb3BzO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBjYW1lcmE6IENhbWVyYTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1vZGFsOiBNb2RhbENvbnRhaW5lcjtcblxuICAgIC8vIFRoZSBkcmF3IGZ1bmN0aW9uIHdpdGggYSBsaW1pdGVyLCB0byBwcmV2ZW50IGZsaWNrZXJpbmcgd2hlbiByZXNpemluZ1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZHJhd1dpdGhMaW1pdDogKCkgPT4gdm9pZDtcbiAgICAvLyBUaGUgY3VycmVudCBhcHBlYXJhbmNlIG9mIHRoZSBmaWVsZCwgbm90IG5lY2Vzc2FyaWx5IG9mIHRoZSB3aG9sZSBmaWVsZFxuICAgIHByaXZhdGUgYXBwZWFyYW5jZToge1xuICAgICAgICBkYXRhOiBBcnJheTxBcnJheTxzdHJpbmc+PixcbiAgICAgICAgcmVjdDogUmVjdFxuICAgIH0gfCBudWxsO1xuICAgIHByaXZhdGUgbGFzdEFwcGVhcmFuY2VSZXF1ZXN0VGltZXN0YW1wOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIGdhbWVPdmVyOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IEdhbWVQcm9wcykge1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG5cbiAgICAgICAgaWYgKCd3JyBpbiB0aGlzLnByb3BzICYmICdoJyBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYSA9IG5ldyBDYW1lcmEoe3c6IHRoaXMucHJvcHMudywgaDogdGhpcy5wcm9wcy5ofSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYSA9IG5ldyBDYW1lcmEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FtZXJhLmFkZEV2ZW50TGlzdGVuZXIoJ3ByZXNzJywgdGhpcy5oYW5kbGVQcmVzcy5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5jYW1lcmEuYWRkRXZlbnRMaXN0ZW5lcignbG9uZ3ByZXNzJywgdGhpcy5oYW5kbGVMb25nUHJlc3MuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuY2FtZXJhLmFkZEV2ZW50TGlzdGVuZXIoJ21vdmUnLCB0aGlzLmRyYXcuYmluZCh0aGlzLCBmYWxzZSkpO1xuXG4gICAgICAgIHRoaXMubW9kYWwgPSBuZXcgTW9kYWxDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5kcmF3V2l0aExpbWl0ID0gbGltaXRlcih0aGlzLmRyYXcuYmluZCh0aGlzLCBmYWxzZSksIDEwMCk7XG4gICAgICAgIHRoaXMuYXBwZWFyYW5jZSA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdEFwcGVhcmFuY2VSZXF1ZXN0VGltZXN0YW1wID0gMDtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50cygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuY2FtZXJhLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZ2FtZU92ZXIgPSBmYWxzZTtcblxuICAgICAgICBsZXQgaW5pdGlhbGlzZVByb21pc2U7XG4gICAgICAgIC8vIEZpbml0ZSB0eXBlXG4gICAgICAgIGlmICgndycgaW4gdGhpcy5wcm9wcyAmJiAnaCcgaW4gdGhpcy5wcm9wcyAmJiAnbnVtTWluZXMnIGluIHRoaXMucHJvcHMpIHtcbiAgICAgICAgICAgIGluaXRpYWxpc2VQcm9taXNlID0gZ29pby5pbml0KHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5wcm9wcy53LFxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5wcm9wcy5oLFxuICAgICAgICAgICAgICAgIG1pbmVzOiB0aGlzLnByb3BzLm51bU1pbmVzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gSW5maW5pdGUgdHlwZVxuICAgICAgICB9IGVsc2UgaWYgKCdtaW5lRGVuc2l0eScgaW4gdGhpcy5wcm9wcykge1xuICAgICAgICAgICAgaW5pdGlhbGlzZVByb21pc2UgPSBnb2lvLmluaXQoe1xuICAgICAgICAgICAgICAgIG1pbmVEZW5zaXR5OiB0aGlzLnByb3BzLm1pbmVEZW5zaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBnYW1lIHByb3BzIHR5cGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9uY2UgaW5pdGlhbGlzZWQsIGRyYXcgaXRcbiAgICAgICAgaW5pdGlhbGlzZVByb21pc2UudGhlbih0aGlzLmRyYXcuYmluZCh0aGlzLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG91bGRVcGRhdGVBcHBlYXJhbmNlKCk6IGJvb2xlYW4ge1xuICAgICAgICAvLyBBbHdheXMgcmVxdWVzdCBpZiB0aGVyZSdzIG5vIGFwcGVhcmFuY2VcbiAgICAgICAgaWYgKHRoaXMuYXBwZWFyYW5jZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvbid0IHJlcXVlc3QgdG9vIG9mdGVuXG4gICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIGlmIChub3cgLSB0aGlzLmxhc3RBcHBlYXJhbmNlUmVxdWVzdFRpbWVzdGFtcCA8IDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSB2aXNpYmxlIHRpbGVzXG4gICAgICAgIGNvbnN0IHZpc2libGVUaWxlcyA9IHRoaXMuY2FtZXJhLnZpc2libGVUaWxlcztcblxuICAgICAgICAvLyBJZiBhbnkgZWRnZSBvZiB0aGUgdmlzaWJsZSByZWN0IGlzIGNsb3NlKGlzaCkgdG8gdGhlIGVkZ2Ugb2YgdGhlIGFwcGVhcmFuY2UsIHJlZHJhd1xuICAgICAgICByZXR1cm4gdmlzaWJsZVRpbGVzLnggPCB0aGlzLmFwcGVhcmFuY2UucmVjdC54ICsgKHRoaXMuYXBwZWFyYW5jZS5yZWN0LncgLyA2KVxuICAgICAgICAgICAgfHwgdmlzaWJsZVRpbGVzLnkgPCB0aGlzLmFwcGVhcmFuY2UucmVjdC55ICsgKHRoaXMuYXBwZWFyYW5jZS5yZWN0LmggLyA2KVxuICAgICAgICAgICAgfHwgdmlzaWJsZVRpbGVzLnggKyB2aXNpYmxlVGlsZXMudyA+ICh0aGlzLmFwcGVhcmFuY2UucmVjdC54ICsgdGhpcy5hcHBlYXJhbmNlLnJlY3QudykgLSAodGhpcy5hcHBlYXJhbmNlLnJlY3QudyAvIDYpXG4gICAgICAgICAgICB8fCB2aXNpYmxlVGlsZXMueSArIHZpc2libGVUaWxlcy5oID4gKHRoaXMuYXBwZWFyYW5jZS5yZWN0LnkgKyB0aGlzLmFwcGVhcmFuY2UucmVjdC5oKSAtICh0aGlzLmFwcGVhcmFuY2UucmVjdC5oIC8gNik7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGRyYXcoc3RhdGVDaGFuZ2VkPzogYm9vbGVhbikge1xuICAgICAgICAvLyBJZiBhIG5ldyBhcHBlYXJhbmNlIGlzIHJlcXVpcmVkXG4gICAgICAgIGlmIChzdGF0ZUNoYW5nZWQgfHwgdGhpcy5zaG91bGRVcGRhdGVBcHBlYXJhbmNlKCkpIHtcbiAgICAgICAgICAgIC8vIFRoZSBhcHBlYXJhbmNlIHRvIHJlcXVlc3QgaXMgbW9yZSB0aGFuIHdoYXQgaXMgdmlzaWJsZVxuICAgICAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuY2FtZXJhLnZpc2libGVUaWxlcztcbiAgICAgICAgICAgIHJlY3QueCAtPSByZWN0LncgLyAyO1xuICAgICAgICAgICAgcmVjdC55IC09IHJlY3QuaCAvIDI7XG4gICAgICAgICAgICByZWN0LncgKj0gMjtcbiAgICAgICAgICAgIHJlY3QuaCAqPSAyO1xuICAgICAgICAgICAgY29uc29sZUxvZyhgcmVkcmF3aW5nLCByZWN0IHgke3JlY3QueH0geSAke3JlY3QueX0gdyAke3JlY3Qud30gaCAke3JlY3QuaH1gKTtcblxuICAgICAgICAgICAgLy8gUmVxdWVzdCB0aGUgYXBwZWFyYW5jZVxuICAgICAgICAgICAgdGhpcy5sYXN0QXBwZWFyYW5jZVJlcXVlc3RUaW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgdGhpcy5hcHBlYXJhbmNlID0ge1xuICAgICAgICAgICAgICAgIGRhdGE6IGF3YWl0IGdvaW8uYXBwZWFyYW5jZShyZWN0KSxcbiAgICAgICAgICAgICAgICByZWN0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRHJhdyB0aGUgYXBwZWFyYW5jZVxuICAgICAgICBhd2FpdCB0aGlzLmNhbWVyYS5kcmF3KHRoaXMuYXBwZWFyYW5jZS5kYXRhKVxuICAgICAgICAgICAgLy8gVGhlbiBkcmF3IHRoZSBtb2RhbCBvdmVyIHRvcCAoaWYgYWN0aXZlKVxuICAgICAgICAgICAgLnRoZW4odGhpcy5tb2RhbC5kcmF3LmJpbmQodGhpcy5tb2RhbCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuZHJhd1dpdGhMaW1pdCk7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgaWYgKHRoaXMubW9kYWwuaGlkZGVuKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5yZWdpc3RlckV2ZW50cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGRlcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmRyYXdXaXRoTGltaXQpO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgIHRoaXMuY2FtZXJhLmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgdGhpcy5tb2RhbC5kZXJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVTdGF0ZShzdGF0ZURhdGE6IGdvaW8uVW5jb3ZlclJlc3BvbnNlRGF0YSkge1xuICAgICAgICBzd2l0Y2ggKHN0YXRlRGF0YS5zdGF0ZSkge1xuICAgICAgICBjYXNlIEdBTUVfU1RBVEVTLldJTjpcbiAgICAgICAgICAgIHRoaXMuZ2FtZU92ZXIgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZUxvZygnV2luIGRldGVjdGVkLCBkaXNwbGF5aW5nIHN1Y2Nlc3MgbW9kYWwnKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRW5kR2FtZU1vZGFsKFN1Y2Nlc3NNb2RhbCwgUkVTRVRfQlVUVE9OLmlkKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEdBTUVfU1RBVEVTLkxPU1M6XG4gICAgICAgICAgICB0aGlzLmdhbWVPdmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnNvbGVMb2coJ0xvc3MgZGV0ZWN0ZWQsIGRpc3BsYXlpbmcgcmV0cnkgbW9kYWwnKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5oYW5kbGVFbmRHYW1lTW9kYWwuYmluZCh0aGlzLCBSZXRyeU1vZGFsLCBSRVRSWV9CVVRUT04uaWQpLFxuICAgICAgICAgICAgICAgIC8vIERpc3BsYXkgYWZ0ZXIgMXMgc28gdGhlIHVzZXIgY2FuIHNlZSB0aGUgZmllbGQgZm9yIGEgYml0XG4gICAgICAgICAgICAgICAgMTAwMCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlRW5kR2FtZU1vZGFsKG1vZGFsQ29uc3RydWN0b3I6ICgpID0+IHZvaWQsIHJlc2V0RWxlbWVudElkOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gRGlzcGxheSB0aGUgbW9kYWxcbiAgICAgICAgY29uc3QgbW9kYWw6IE1vZGFsID0gbmV3IG1vZGFsQ29uc3RydWN0b3IoKTtcbiAgICAgICAgdGhpcy5tb2RhbC5vcGVuKG1vZGFsKTtcbiAgICAgICAgLy8gQWRkIHNvbWUgY29tbW9uIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIG1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2hvdmVyJywgdGhpcy5kcmF3LmJpbmQodGhpcywgZmFsc2UpKTtcbiAgICAgICAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcigncHJlc3MnLCAoZXZlbnQ6IEVsZW1lbnRQcmVzc0V2ZW50KSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnByZXNzZWRFbGVtZW50KSB7XG4gICAgICAgICAgICBjYXNlIENMT1NFX0JVVFRPTi5pZDpcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS5yZWdpc3RlckV2ZW50cygpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSByZXNldEVsZW1lbnRJZDpcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmEucmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEJBQ0tfQlVUVE9OLmlkOlxuICAgICAgICAgICAgICAgIHRoaXMuZGVyZWdpc3RlckV2ZW50cygpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlQmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhlIG1vZGFsIGlzIG9wZW4gc28gZG9uJ3QgYWxsb3cgdGhlIGNhbWVyYSB0byBtb3ZlXG4gICAgICAgIHRoaXMuY2FtZXJhLmRlcmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgLy8gRHJhdyB0aGUgbW9kYWxcbiAgICAgICAgYXdhaXQgdGhpcy5kcmF3KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVQcmVzcyhldmVudDogUHJlc3NFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuZ2FtZU92ZXIpIHtcbiAgICAgICAgICAgIC8vIExlZnQgbW91c2UgYnV0dG9uXG4gICAgICAgICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZ29pby51bmNvdmVyKGV2ZW50LnBvcylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgc3RhdGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kcmF3KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTdGF0ZShzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gUmlnaHQgbW91c2UgYnV0dG9uXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMikge1xuICAgICAgICAgICAgICAgIGdvaW8uZmxhZyhldmVudC5wb3MpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHRoaXMuZHJhdy5iaW5kKHRoaXMsIHRydWUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIGdhbWUgaXMgb3ZlciBidXQgdGhlIG1vZGFsIGlzIGhpZGRlblxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW9kYWwuaGlkZGVuKSB7XG4gICAgICAgICAgICAvLyBSZW9wZW4gdGhlIG1vZGFsXG4gICAgICAgICAgICB0aGlzLm1vZGFsLnJldmVhbCgpO1xuICAgICAgICAgICAgdGhpcy5jYW1lcmEuZGVyZWdpc3RlckV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUxvbmdQcmVzcyhldmVudDogUHJlc3NFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuZ2FtZU92ZXIgJiYgZXZlbnQuYnV0dG9uID09PSAwKSB7XG4gICAgICAgICAgICBnb2lvLmZsYWcoZXZlbnQucG9zKS50aGVuKHRoaXMuZHJhdy5iaW5kKHRoaXMsIHRydWUpKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgTWVudSwge0VsZW1lbnR9IGZyb20gJy4vbWVudSc7XG5pbXBvcnQge1NQUklURVMsIGNsZWFyfSBmcm9tICcuLi9kcmF3JztcblxuaW1wb3J0IHtsaW1pdGVyfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7cG9zfSBmcm9tICcuLi9jb21tb24nO1xuXG5jb25zdCBUSVRMRTogRWxlbWVudCA9IHtcbiAgICBpZDogJ21lbnUubWFpbi50aXRsZScsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1BSU5fTUVOVS5USVRMRSxcbiAgICBzY2FsZTogMSxcbn07XG5cbmV4cG9ydCBjb25zdCBFQVNZX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21lbnUubWFpbi5lYXN5X2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1BSU5fTUVOVS5FQVNZLFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLk1BSU5fTUVOVS5FQVNZX0hPVkVSRUQpLFxuICAgIHNjYWxlOiAxLjI1LFxuICAgIGludGVyYWN0YWJsZTogdHJ1ZVxufTtcblxuZXhwb3J0IGNvbnN0IE1FRElVTV9CVVRUT046IEVsZW1lbnQgPSB7XG4gICAgaWQ6ICdtZW51Lm1haW4ubWVkaXVtX2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1BSU5fTUVOVS5NRURJVU0sXG4gICAgaG92ZXJlZFNwcml0ZTogcG9zKFNQUklURVMuTUFJTl9NRU5VLk1FRElVTV9IT1ZFUkVEKSxcbiAgICBzY2FsZTogMS4yNSxcbiAgICBpbnRlcmFjdGFibGU6IHRydWVcbn07XG5cbmV4cG9ydCBjb25zdCBIQVJEX0JVVFRPTjogRWxlbWVudCA9IHtcbiAgICBpZDogJ21lbnUubWFpbi5oYXJkX2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1BSU5fTUVOVS5IQVJELFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLk1BSU5fTUVOVS5IQVJEX0hPVkVSRUQpLFxuICAgIHNjYWxlOiAxLjI1LFxuICAgIGludGVyYWN0YWJsZTogdHJ1ZVxufTtcblxuLyogdG9kbyBpbXBsZW1lbnQgY3VzdG9tIGRpZmZpY3VsdHlcbmV4cG9ydCBjb25zdCBDVVNUT01fQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbWVudS5tYWluLmN1c3RvbV9idXR0b24nLFxuICAgIHNwcml0ZTogU1BSSVRFUy5NQUlOX01FTlUuQ1VTVE9NLFxuICAgIGhvdmVyZWRTcHJpdGU6IHBvcyhTUFJJVEVTLk1BSU5fTUVOVS5DVVNUT01fSE9WRVJFRCksXG4gICAgc2NhbGU6IDEuMjUsXG4gICAgaW50ZXJhY3RhYmxlOiBmYWxzZVxufTsqL1xuXG5leHBvcnQgY29uc3QgSU5GSU5JVEVfQlVUVE9OOiBFbGVtZW50ID0ge1xuICAgIGlkOiAnbWVudS5tYWluLmluZmluaXRlX2J1dHRvbicsXG4gICAgc3ByaXRlOiBTUFJJVEVTLk1BSU5fTUVOVS5JTkZJTklURSxcbiAgICBob3ZlcmVkU3ByaXRlOiBwb3MoU1BSSVRFUy5NQUlOX01FTlUuSU5GSU5JVEVfSE9WRVJFRCksXG4gICAgc2NhbGU6IDEuMjUsXG4gICAgaW50ZXJhY3RhYmxlOiB0cnVlXG59O1xuXG4vLyBUaGUgZWxlbWVudHMsIGluIG9yZGVyIG9mIGhvdyB0aGV5J3JlIGRpc3BsYXllZCBvbiBzY3JlZW4gKHRvcCBkb3duKVxuY29uc3QgRUxFTUVOVFM6IEFycmF5PEVsZW1lbnQ+ID0gW1RJVExFLCBFQVNZX0JVVFRPTiwgTUVESVVNX0JVVFRPTiwgSEFSRF9CVVRUT04vKiwgQ1VTVE9NX0JVVFRPTiovLCBJTkZJTklURV9CVVRUT05dO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWluTWVudSBleHRlbmRzIE1lbnUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZHJhd1dpdGhMaW1pdDogKCkgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihFTEVNRU5UUyk7XG4gICAgICAgIHN1cGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3ByZXNzJywgdGhpcy5kcmF3LmJpbmQodGhpcykpO1xuICAgICAgICBzdXBlci5hZGRFdmVudExpc3RlbmVyKCdob3ZlcicsIHRoaXMuZHJhdy5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBUaGUgZHJhdyBmdW5jdGlvbiB3aXRoIGEgbGltaXRlciwgdG8gcHJldmVudCBmbGlja2VyaW5nIHdoZW4gcmVzaXppbmdcbiAgICAgICAgdGhpcy5kcmF3V2l0aExpbWl0ID0gbGltaXRlcih0aGlzLmRyYXcuYmluZCh0aGlzKSwgMTAwKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZHJhdygpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFyKCkudGhlbihzdXBlci5kcmF3LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICBzdXBlci5yZWdpc3RlckV2ZW50cygpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5kcmF3V2l0aExpbWl0KTtcbiAgICB9XG5cbiAgICBkZXJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICBzdXBlci5kZXJlZ2lzdGVyRXZlbnRzKCk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmRyYXdXaXRoTGltaXQpO1xuICAgIH1cbn0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBHYW1lLCB7RmluaXRlR2FtZVByb3BzLCBJbmZpbml0ZUdhbWVQcm9wc30gZnJvbSAnLi9nYW1lL2dhbWUnO1xuaW1wb3J0IE1haW5NZW51LCB7RUFTWV9CVVRUT04sIEhBUkRfQlVUVE9OLCBJTkZJTklURV9CVVRUT04sIE1FRElVTV9CVVRUT059IGZyb20gJy4vbWVudS9tYWluLW1lbnUnO1xuXG5pbXBvcnQge2NhbnZhcywgY3R4LCBzcHJpdGVzaGVldExvYWRlZH0gZnJvbSAnLi9kcmF3JztcbmltcG9ydCB7RWxlbWVudFByZXNzRXZlbnR9IGZyb20gJy4vbWVudS9tZW51JztcblxuaW1wb3J0ICcuLi9hc3NldHMvc3R5bGVzLmNzcyc7XG5cbi8vIE1ha2UgdGhlIGNhbnZhcyBmdWxsc2NyZWVuXG5mdW5jdGlvbiBmdWxsc2NyZWVuQ2FudmFzKCkge1xuICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnQgKi9cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY3R4LndlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjdHgubW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnQgKi9cbn1cblxuLy8gQWRkIGFuIGV2ZW50IGhhbmRsZXIgdG8gcmVzaXplIHRoZSBjYW52YXNcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdWxsc2NyZWVuQ2FudmFzKTtcblxuLy8gTWFrZSB0aGUgY2FudmFzIGZ1bGxzY3JlZW5cbmZ1bGxzY3JlZW5DYW52YXMoKTtcblxuLy8gQ3JlYXRlIHRoZSBtYWluIG1lbnVcbmNvbnN0IG1haW5NZW51ID0gbmV3IE1haW5NZW51KCk7XG5cbi8vIEFkZCBhbiBldmVudCBsaXN0ZW5lciBmb3IgcHJlc3NpbmcgdGhlIG1lbnUgYnV0dG9uc1xubWFpbk1lbnUuYWRkRXZlbnRMaXN0ZW5lcigncHJlc3MnLCAoZXZlbnQgOiBFbGVtZW50UHJlc3NFdmVudCkgPT4ge1xuICAgIG1haW5NZW51LmRlcmVnaXN0ZXJFdmVudHMoKTtcblxuICAgIC8vIERldGVybWluZSB0aGUgZ2FtZSBwcm9wZXJ0aWVzXG4gICAgbGV0IGdhbWVQcm9wczogRmluaXRlR2FtZVByb3BzIHwgSW5maW5pdGVHYW1lUHJvcHMgfCB1bmRlZmluZWQ7XG4gICAgc3dpdGNoIChldmVudC5wcmVzc2VkRWxlbWVudCkge1xuICAgIGNhc2UgRUFTWV9CVVRUT04uaWQ6XG4gICAgICAgIGdhbWVQcm9wcyA9IHtcbiAgICAgICAgICAgIHc6IDksXG4gICAgICAgICAgICBoOiA5LFxuICAgICAgICAgICAgbnVtTWluZXM6IDEwXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgTUVESVVNX0JVVFRPTi5pZDpcbiAgICAgICAgZ2FtZVByb3BzID0ge1xuICAgICAgICAgICAgdzogMTYsXG4gICAgICAgICAgICBoOiAxNixcbiAgICAgICAgICAgIG51bU1pbmVzOiA0MFxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIEhBUkRfQlVUVE9OLmlkOlxuICAgICAgICBnYW1lUHJvcHMgPSB7XG4gICAgICAgICAgICB3OiAzMCxcbiAgICAgICAgICAgIGg6IDE2LFxuICAgICAgICAgICAgbnVtTWluZXM6IDk5XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgSU5GSU5JVEVfQlVUVE9OLmlkOlxuICAgICAgICBnYW1lUHJvcHMgPSB7XG4gICAgICAgICAgICAvLyBNZWRpdW0gZGlmZmljdWx0eSBtaW5lIGRlbnNpdHlcbiAgICAgICAgICAgIG1pbmVEZW5zaXR5OiA0MCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdGhlIGdhbWVcbiAgICBuZXcgR2FtZSh7XG4gICAgICAgIC4uLmdhbWVQcm9wcyxcbiAgICAgICAgaGFuZGxlQmFjazogKCkgPT4ge1xuICAgICAgICAgICAgbWFpbk1lbnUucmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgICAgIG1haW5NZW51LmRyYXcoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG5cbi8vIERyYXcgdGhlIG1haW4gbWVudSBvbmNlIHRoZSBzcHJpdGVzaGVldCBoYXMgbG9hZGVkXG5zcHJpdGVzaGVldExvYWRlZC50aGVuKG1haW5NZW51LmRyYXcuYmluZChtYWluTWVudSkpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJ1IiwiY2h1bmtJZCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsInRva2VuIiwidGltZXpvbmUiLCJ0aW1lem9uZUNsaXAiLCJtYXNrcyIsImRlZmF1bHQiLCJzaG9ydERhdGUiLCJwYWRkZWRTaG9ydERhdGUiLCJtZWRpdW1EYXRlIiwibG9uZ0RhdGUiLCJmdWxsRGF0ZSIsInNob3J0VGltZSIsIm1lZGl1bVRpbWUiLCJsb25nVGltZSIsImlzb0RhdGUiLCJpc29UaW1lIiwiaXNvRGF0ZVRpbWUiLCJpc29VdGNEYXRlVGltZSIsImV4cGlyZXNIZWFkZXJGb3JtYXQiLCJpMThuIiwiZGF5TmFtZXMiLCJtb250aE5hbWVzIiwidGltZU5hbWVzIiwicGFkIiwidmFsIiwibGVuIiwiYXJndW1lbnRzIiwiU3RyaW5nIiwicGFkU3RhcnQiLCJnZXREYXlOYW1lIiwiX3JlZiIsInkiLCJfIiwiZGF5TmFtZSIsIl9yZWYkc2hvcnQiLCJfc2hvcnQiLCJ0b2RheSIsIkRhdGUiLCJ5ZXN0ZXJkYXkiLCJzZXREYXRlIiwidG9tb3Jyb3ciLCJnZXRXZWVrIiwiZGF0ZSIsInRhcmdldFRodXJzZGF5IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXREYXkiLCJmaXJzdFRodXJzZGF5IiwiZHMiLCJnZXRUaW1lem9uZU9mZnNldCIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJ3ZWVrRGlmZiIsIk1hdGgiLCJmbG9vciIsImdldERheU9mV2VlayIsImRvdyIsImZvcm1hdFRpbWV6b25lIiwibWF0Y2giLCJwb3AiLCJjb25zb2xlTG9nIiwicyIsIm5vdyIsImNvbnNvbGUiLCJsb2ciLCJtYXNrIiwidXRjIiwiZ210IiwidGVzdCIsImlzTmFOIiwiVHlwZUVycm9yIiwibWFza1NsaWNlIiwic2xpY2UiLCJfZCIsIkQiLCJfbSIsIl9IIiwiX00iLCJfcyIsIl9MIiwiX28iLCJfVyIsIl9OIiwiZmxhZ3MiLCJkZCIsImRkZCIsIkRERCIsInNob3J0IiwiZGRkZCIsIkREREQiLCJtbSIsIm1tbSIsIm1tbW0iLCJ5eSIsInl5eXkiLCJoIiwiaGgiLCJIIiwiSEgiLCJNIiwiTU0iLCJzcyIsImwiLCJMIiwidCIsInR0IiwiVCIsIlRUIiwiWiIsImFicyIsIlMiLCJXIiwiV1ciLCJOIiwiZGF0ZUZvcm1hdCIsInRpbWVvdXRJZEZvckZ1bmMiLCJNYXAiLCJsaW1pdGVyIiwiZnVuYyIsImRlbGF5IiwiY2xlYXJUaW1lb3V0Iiwic2V0Iiwic2V0VGltZW91dCIsIlRJTEVfU0laRSIsIlNQUklURVMiLCJUSUxFUyIsIkVNUFRZIiwieCIsInciLCJNSU5FIiwiSElEREVOIiwiRkxBRyIsIkNMT1NFIiwiTU9EQUwiLCJCQUNLIiwiQkFDS19IT1ZFUkVEIiwiTUFJTl9NRU5VIiwiVElUTEUiLCJFQVNZIiwiRUFTWV9IT1ZFUkVEIiwiTUVESVVNIiwiTUVESVVNX0hPVkVSRUQiLCJIQVJEIiwiSEFSRF9IT1ZFUkVEIiwiQ1VTVE9NIiwiQ1VTVE9NX0hPVkVSRUQiLCJJTkZJTklURSIsIklORklOSVRFX0hPVkVSRUQiLCJSRVRSWV9NT0RBTCIsIlJFVFJZIiwiUkVUUllfSE9WRVJFRCIsIlNVQ0NFU1NfTU9EQUwiLCJSRVNFVCIsIlJFU0VUX0hPVkVSRUQiLCJjYW52YXMiLCJnZXRFbGVtZW50QnlJZCIsImN0eCIsImdldENvbnRleHQiLCJzcHJpdGVzaGVldCIsIkltYWdlIiwic3ByaXRlc2hlZXRMb2FkZWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkcmF3U3ByaXRlIiwic3ByaXRlIiwiZHJhd1JlY3QiLCJkcmF3SW1hZ2UiLCJVUkwiLCJFdmVudE1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsImV2ZW50TGlzdGVuZXJzIiwidHlwZSIsImxpc3RlbmVyIiwibGlzdGVuZXJzRm9yRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZmlsdGVyIiwibGlzdGVuZXJGb3JFdmVudCIsImNhbGxFdmVudExpc3RlbmVycyIsImV2ZW50IiwiZm9yRWFjaCIsIlRJTEVfRFJBV19TSVpFIiwiQ2FtZXJhIiwiZmllbGRTaXplIiwic3VwZXIiLCJyZXNldCIsInBvaW50ZXJEb3duRXZlbnQiLCJ0b3VjaGVzIiwibW92ZU9yU2NhbGUiLCJtb3ZlRGlzdGFuY2UiLCJwaW5jaERpc3RhbmNlIiwibG9uZ1ByZXNzVGltZW91dCIsImxhc3RQcmVzc1RpbWVzdGFtcCIsImhhbmRsZVdoZWVsIiwiZmFjdG9yIiwiZGVsdGFZIiwiem9vbSIsImNsaWVudFgiLCJjbGllbnRZIiwiaGFuZGxlUG9pbnRlckRvd24iLCJwcmV2ZW50RGVmYXVsdCIsInBvcyIsInRvV29ybGRQb3MiLCJidXR0b24iLCJoYW5kbGVQb2ludGVyTW92ZSIsInByZXZpb3VzVG91Y2hJbmRleCIsImZpbmRJbmRleCIsInBvaW50ZXJJZCIsInByZXZpb3VzVG91Y2giLCJkZWx0YSIsImRpc3RhbmNlIiwiaHlwb3QiLCJ0cmFuc2xhdGlvbiIsImZpZWxkUmVhbFNpemUiLCJzY2FsZSIsIm1pbiIsIm1heCIsIndpZHRoIiwiaGVpZ2h0IiwidG91Y2gwIiwidG91Y2gxIiwiY2VudGVyIiwiaGFuZGxlUG9pbnRlckNhbmNlbCIsImhhbmRsZVBvaW50ZXJPdXQiLCJoYW5kbGVQb2ludGVyVXAiLCJyZWdpc3RlckV2ZW50cyIsIm1pZGRsZVRyYW5zbGF0aW9uIiwidG9DYW52YXNQb3MiLCJuZXdTY2FsZSIsImRyYXciLCJ0aWxlRGF0YSIsImNsZWFyUmVjdCIsInZpc2libGVSZWN0IiwidmlzaWJsZVRpbGVzIiwiY2FudmFzUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRpbGVTaXplIiwibGVmdCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwiZGVyZWdpc3RlckV2ZW50cyIsIndvcmtlciIsIldvcmtlciIsInByb21pc2VzIiwicmVzcG9uc2UiLCJyZWplY3QiLCJzdWNjZXNzIiwiY21kIiwid29ya2VyQ29ubmVjdGVkIiwicXVldWVkTWVzc2FnZXMiLCJwb3N0TWVzc2FnZSIsIm5vUXVldWUiLCJtc2ciLCJuZXdNZXNzYWdlIiwic2VuZFBpbmciLCJ0aW1lb3V0IiwicGluZ1Byb21pc2UiLCJ0aW1lb3V0UHJvbWlzZSIsInIiLCJyYWNlIiwiaW5pdCIsImZsYWciLCJwaW5ncyIsInNlbmRQaW5nVW50aWxDb25uZWN0IiwidGhlbiIsImJpZ2dlc3RFbGVtZW50QnlGaWVsZCIsImVsZW1lbnRzIiwiZmllbGQiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyciIsImdldEFic1BvcyIsInJlY3QiLCJyb3VuZCIsImludGVyc2VjdCIsImhpdGJveCIsIk1lbnUiLCJ0YWxsZXN0RWxlbWVudCIsImxvbmdlc3RFbGVtZW50IiwiZWxlbWVudEhpdGJveGVzIiwiaG92ZXJlZEVsZW1lbnQiLCJlbnRyaWVzIiwicHJlc3NlZEVsZW1lbnQiLCJib3VuZHMiLCJhY3R1YWxXaWR0aCIsImFjdHVhbEhlaWdodCIsImludGVyYWN0YWJsZSIsInBhcnNlIiwiaG92ZXJlZFNwcml0ZSIsIkNMT1NFX0JVVFRPTiIsIkJBQ0tfQlVUVE9OIiwiTW9kYWwiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsIm1vZGFsU2l6ZSIsIm1vZGFsWCIsIm1vZGFsWSIsIk1PREFMX0dSSURfU0laRSIsImlubmVyTW9kYWxCb3VuZHMiLCJSRVRSWV9CVVRUT04iLCJFTEVNRU5UUyIsImJpbmQiLCJSRVNFVF9CVVRUT04iLCJNb2RhbENvbnRhaW5lciIsIm1vZGFsIiwib3BlbiIsImNsb3NlIiwiaGlkZSIsImhpZGRlbiIsInJldmVhbCIsIkdhbWUiLCJwcm9wcyIsImNhbWVyYSIsImhhbmRsZVByZXNzIiwiaGFuZGxlTG9uZ1ByZXNzIiwiZHJhd1dpdGhMaW1pdCIsImFwcGVhcmFuY2UiLCJsYXN0QXBwZWFyYW5jZVJlcXVlc3RUaW1lc3RhbXAiLCJpbml0aWFsaXNlUHJvbWlzZSIsImdhbWVPdmVyIiwibWluZXMiLCJudW1NaW5lcyIsIm1pbmVEZW5zaXR5Iiwic2hvdWxkVXBkYXRlQXBwZWFyYW5jZSIsInN0YXRlQ2hhbmdlZCIsImhhbmRsZVN0YXRlIiwic3RhdGVEYXRhIiwic3RhdGUiLCJoYW5kbGVFbmRHYW1lTW9kYWwiLCJtb2RhbENvbnN0cnVjdG9yIiwicmVzZXRFbGVtZW50SWQiLCJoYW5kbGVCYWNrIiwiRUFTWV9CVVRUT04iLCJNRURJVU1fQlVUVE9OIiwiSEFSRF9CVVRUT04iLCJJTkZJTklURV9CVVRUT04iLCJmdWxsc2NyZWVuQ2FudmFzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwid2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibWFpbk1lbnUiLCJjbGVhciIsImdhbWVQcm9wcyJdLCJzb3VyY2VSb290IjoiIn0=