(()=>{"use strict";var e={250:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(537),s=n.n(i),r=n(645),o=n.n(r)()(s());o.push([e.id,"body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}","",{version:3,sources:["webpack://./assets/styles.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,SAAS;AACb;AACA;IACI,iCAAiC;IACjC,oCAAoC;IACpC,0BAA0B;IAC1B,4BAA4B;IAC5B,kBAAkB;AACtB",sourcesContent:["body {\n    overflow: hidden;\n    margin: 0;\n}\ncanvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    touch-action: none;\n}"],sourceRoot:""}]);const a=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,s,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);i&&o[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),s&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=s):l[4]="".concat(s)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(s," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var r={},o=[],a=0;a<e.length;a++){var h=e[a],c=i.base?h[0]+i.base:h[0],l=r[c]||0,u="".concat(c," ").concat(l);r[c]=l+1;var d=n(u),p={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var m=s(p,i);i.byIndex=a,t.splice(a,0,{identifier:u,updater:m,references:1})}o.push(u)}return o}function s(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,s){var r=i(e=e||[],s=s||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var a=n(r[o]);t[a].references--}for(var h=i(e,s),c=0;c<r.length;c++){var l=n(r[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}r=h}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,s&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},882:(e,t,n)=>{e.exports=n.p+"8777ac99e8bfc6c31260.png"}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var r=t[i]={id:i,exports:{}};return e[i](r,r.exports,n),r.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.u=e=>e+".bundle.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{class e{constructor(e){this.stack=e,this.parent=e.top()}pop(){for(;this.stack.top()&&this.stack.pop()!=this;);}onPop(){}}var t=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g,i=/\b(?:[A-Z]{1,3}[A-Z][TC])(?:[-+]\d{4})?|((?:Australian )?(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time)\b/g,s=/[^-+\dA-Z]/g,r={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"},o={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]},a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return String(e).padStart(t,"0")},h=function(e){var t=e.y,n=e.m,i=e.d,s=e._,r=e.dayName,o=e.short,a=void 0!==o&&o,h=new Date,c=new Date;c.setDate(c[s+"Date"]()-1);var l=new Date;return l.setDate(l[s+"Date"]()+1),h[s+"FullYear"]()===t&&h[s+"Month"]()===n&&h[s+"Date"]()===i?a?"Tdy":"Today":c[s+"FullYear"]()===t&&c[s+"Month"]()===n&&c[s+"Date"]()===i?a?"Ysd":"Yesterday":l[s+"FullYear"]()===t&&l[s+"Month"]()===n&&l[s+"Date"]()===i?a?"Tmw":"Tomorrow":r},c=function(e){var t=new Date(e.getFullYear(),e.getMonth(),e.getDate());t.setDate(t.getDate()-(t.getDay()+6)%7+3);var n=new Date(t.getFullYear(),0,4);n.setDate(n.getDate()-(n.getDay()+6)%7+3);var i=t.getTimezoneOffset()-n.getTimezoneOffset();t.setHours(t.getHours()-i);var s=(t-n)/6048e5;return 1+Math.floor(s)},l=function(e){var t=e.getDay();return 0===t&&(t=7),t},u=function(e){return(String(e).match(i)||[""]).pop().replace(s,"").replace(/GMT\+0000/g,"UTC")};function d(e){const n=new Date;console.log("("+function(e,n,i,s){if(1!==arguments.length||"string"!=typeof e||/\d/.test(e)||(n=e,e=void 0),(e=e||0===e?e:new Date)instanceof Date||(e=new Date(e)),isNaN(e))throw TypeError("Invalid date");var d=(n=String(r[n]||n||r.default)).slice(0,4);"UTC:"!==d&&"GMT:"!==d||(n=n.slice(4),i=!0,"GMT:"===d&&(s=!0));var p=function(){return i?"getUTC":"get"},m=function(){return e[p()+"Date"]()},v=function(){return e[p()+"Day"]()},w=function(){return e[p()+"Month"]()},f=function(){return e[p()+"FullYear"]()},y=function(){return e[p()+"Hours"]()},E=function(){return e[p()+"Minutes"]()},g=function(){return e[p()+"Seconds"]()},x=function(){return e[p()+"Milliseconds"]()},D=function(){return i?0:e.getTimezoneOffset()},M=function(){return c(e)},b=function(){return l(e)},S={d:function(){return m()},dd:function(){return a(m())},ddd:function(){return o.dayNames[v()]},DDD:function(){return h({y:f(),m:w(),d:m(),_:p(),dayName:o.dayNames[v()],short:!0})},dddd:function(){return o.dayNames[v()+7]},DDDD:function(){return h({y:f(),m:w(),d:m(),_:p(),dayName:o.dayNames[v()+7]})},m:function(){return w()+1},mm:function(){return a(w()+1)},mmm:function(){return o.monthNames[w()]},mmmm:function(){return o.monthNames[w()+12]},yy:function(){return String(f()).slice(2)},yyyy:function(){return a(f(),4)},h:function(){return y()%12||12},hh:function(){return a(y()%12||12)},H:function(){return y()},HH:function(){return a(y())},M:function(){return E()},MM:function(){return a(E())},s:function(){return g()},ss:function(){return a(g())},l:function(){return a(x(),3)},L:function(){return a(Math.floor(x()/10))},t:function(){return y()<12?o.timeNames[0]:o.timeNames[1]},tt:function(){return y()<12?o.timeNames[2]:o.timeNames[3]},T:function(){return y()<12?o.timeNames[4]:o.timeNames[5]},TT:function(){return y()<12?o.timeNames[6]:o.timeNames[7]},Z:function(){return s?"GMT":i?"UTC":u(e)},o:function(){return(D()>0?"-":"+")+a(100*Math.floor(Math.abs(D())/60)+Math.abs(D())%60,4)},p:function(){return(D()>0?"-":"+")+a(Math.floor(Math.abs(D())/60),2)+":"+a(Math.floor(Math.abs(D())%60),2)},S:function(){return["th","st","nd","rd"][m()%10>3?0:(m()%100-m()%10!=10)*m()%10]},W:function(){return M()},WW:function(){return a(M())},N:function(){return b()}};return n.replace(t,(function(e){return e in S?S[e]():e.slice(1,e.length-1)}))}(n,"yyyy/mm/dd HH:MM:ss.l")+") JS: "+e)}function p(e,t,n){void 0!==t&&(e=Math.min(e,Math.pow(10,t)-1),e=Math.max(e,-(Math.pow(10,t)-1)));let i=e.toString(10);return n&&e>=0&&(i=[...Array(t-i.length)].map((()=>"0")).join("").concat(i)),i}const m=10,v=m,w={TILES:{EMPTY:{x:0,y:0,w:m,h:m},1:{x:10,y:0,w:m,h:m},2:{x:20,y:0,w:m,h:m},3:{x:30,y:0,w:m,h:m},4:{x:40,y:0,w:m,h:m},5:{x:50,y:0,w:m,h:m},6:{x:60,y:0,w:m,h:m},7:{x:70,y:0,w:m,h:m},8:{x:80,y:0,w:m,h:m},MINE:{x:90,y:0,w:m,h:m},HIDDEN:{x:100,y:0,w:m,h:m},FLAG:{x:110,y:0,w:m,h:m}},MODAL:{BACK:{x:0,y:90,w:24,h:v},BACK_HOVERED:{x:24,y:90,w:24,h:v}},MAIN_MENU:{TITLE:{x:0,y:10,w:95,h:v},EASY:{x:0,y:20,w:26,h:v},EASY_HOVERED:{x:26,y:20,w:26,h:v},MEDIUM:{x:0,y:30,w:35,h:v},MEDIUM_HOVERED:{x:35,y:30,w:30,h:v},HARD:{x:0,y:40,w:25,h:v},HARD_HOVERED:{x:25,y:40,w:26,h:v},CUSTOM:{x:0,y:50,w:38,h:v},CUSTOM_HOVERED:{x:38,y:50,w:26,h:v},INFINITE:{x:0,y:60,w:43,h:v},INFINITE_HOVERED:{x:43,y:60,w:43,h:v}},RETRY_MODAL:{TITLE:{x:0,y:70,w:45,h:v},RETRY:{x:0,y:80,w:30,h:v},RETRY_HOVERED:{x:30,y:80,w:30,h:v}},SUCCESS_MODAL:{TITLE:{x:0,y:100,w:52,h:v},RESET:{x:0,y:110,w:53,h:v},RESET_HOVERED:{x:53,y:110,w:53,h:v}},ICONS:{0:{x:0,y:120,w:7,h:v},1:{x:7,y:120,w:7,h:v},2:{x:14,y:120,w:7,h:v},3:{x:21,y:120,w:7,h:v},4:{x:28,y:120,w:7,h:v},5:{x:35,y:120,w:7,h:v},6:{x:42,y:120,w:7,h:v},7:{x:49,y:120,w:7,h:v},8:{x:56,y:120,w:7,h:v},9:{x:63,y:120,w:7,h:v},":":{x:70,y:120,w:7,h:v},"-":{x:77,y:120,w:7,h:v},INFINITY:{x:84,y:120,w:14,h:v},CLOCK:{x:98,y:120,w:10,h:v},CROSS:{x:108,y:120,w:10,h:v},MINE:{x:0,y:10,w:10,h:v}}},f=document.getElementById("canvas"),y=f.getContext("2d"),E=new Image,g=new Promise((e=>{E.addEventListener("load",(()=>{d("Finished loading spritesheet"),e()}))}));function x(e,t){y.drawImage(E,e.x,e.y,e.w,e.h,t.x,t.y,t.w,t.h)}function D(e,t,n){const i={w:n/v*w.ICONS[0].w,h:n};let s=t.x;for(const n of e){const e=Object.assign({x:s,y:t.y},i);x(w.ICONS[n],e),s+=e.w}}E.src=new URL(n(882),n.b).toString();class M{constructor(){this.eventListeners=new Map}addEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,[...i,t])}removeEventListener(e,t){var n;const i=null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[];this.eventListeners.set(e,i.filter((e=>e===t)))}callEventListeners(e,t){var n;(null!==(n=this.eventListeners.get(e))&&void 0!==n?n:[]).forEach((e=>e(t)))}}const b=e=>({x:e.x,y:e.y}),S=(e,t)=>e.x>t.x&&e.y>t.y&&e.x<t.x+t.w&&e.y<t.y+t.h;const T=(e,t)=>e.reduce(((e,n)=>e.sprite[t]*e.scale>n.sprite[t]*n.scale?e:n));class I extends M{constructor(e){super(),this.elements=e,this.tallestElement=T(e,"h"),this.longestElement=T(e,"w"),this.elementHitboxes=new Map,this.hoveredElement=null,this.handlePointerMove=e=>{for(const[t,n]of this.elementHitboxes.entries())if(S({x:e.clientX,y:e.clientY},n))return void(this.hoveredElement!==t&&(this.hoveredElement=t,this.callEventListeners("hover",{hoveredElement:t})));null!==this.hoveredElement&&(this.hoveredElement=null,this.callEventListeners("hover",{hoveredElement:null}))},this.handlePointerDown=e=>{for(const[t,n]of this.elementHitboxes.entries())S({x:e.clientX,y:e.clientY},n)&&this.callEventListeners("press",{pressedElement:t});return null},this.registerEvents()}draw(e){return t=this,n=void 0,s=function*(){e||(e={x:0,y:0,w:f.width,h:f.height});let t=e.h*(.5/this.elements.length)/(this.tallestElement.sprite.h*this.tallestElement.scale);return t*this.longestElement.sprite.w*this.longestElement.scale>=.9*e.w&&(t=.9*e.w/(this.longestElement.sprite.w*this.longestElement.scale)),new Promise((n=>{let i=e.y+this.tallestElement.sprite.h*t*.5;this.elements.forEach((n=>{const s=n.sprite.w*n.scale*t,r=n.sprite.h*n.scale*t,o={x:e.x+(e.w/2-s/2),y:i,w:s,h:r};n.interactable&&this.elementHitboxes.set(n.id,o);const a=(h=n.sprite,JSON.parse(JSON.stringify(h)));var h;n.id===this.hoveredElement&&"hoveredSprite"in n&&(a.x=n.hoveredSprite.x,a.y=n.hoveredSprite.y),x(a,o),i+=1.5*r})),n()}))},new((i=void 0)||(i=Promise))((function(e,r){function o(e){try{h(s.next(e))}catch(e){r(e)}}function a(e){try{h(s.throw(e))}catch(e){r(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((s=s.apply(t,n||[])).next())}));var t,n,i,s}registerEvents(){f.addEventListener("pointermove",this.handlePointerMove),f.addEventListener("pointerdown",this.handlePointerDown)}deregisterEvents(){f.removeEventListener("pointermove",this.handlePointerMove),f.removeEventListener("pointerdown",this.handlePointerDown)}}const L={id:"menu.main.title",sprite:w.MAIN_MENU.TITLE,scale:1},N={id:"menu.main.easy_button",sprite:w.MAIN_MENU.EASY,hoveredSprite:b(w.MAIN_MENU.EASY_HOVERED),scale:1.25,interactable:!0},A={id:"menu.main.medium_button",sprite:w.MAIN_MENU.MEDIUM,hoveredSprite:b(w.MAIN_MENU.MEDIUM_HOVERED),scale:1.25,interactable:!0},P={id:"menu.main.hard_button",sprite:w.MAIN_MENU.HARD,hoveredSprite:b(w.MAIN_MENU.HARD_HOVERED),scale:1.25,interactable:!0},C={id:"menu.main.infinite_button",sprite:w.MAIN_MENU.INFINITE,hoveredSprite:b(w.MAIN_MENU.INFINITE_HOVERED),scale:1.25,interactable:!0},O=[L,N,A,P,C];class R extends I{constructor(){super(O),super.addEventListener("press",(()=>this.draw())),super.addEventListener("hover",(()=>this.draw())),this.handleResize=()=>this.draw(),this.registerEvents()}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,s=function*(){return function(e){return t=this,n=void 0,s=function*(){e||(e={x:0,y:0,w:f.width,h:f.height}),y.clearRect(e.x,e.y,e.w,e.h)},new((i=void 0)||(i=Promise))((function(e,r){function o(e){try{h(s.next(e))}catch(e){r(e)}}function a(e){try{h(s.throw(e))}catch(e){r(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((s=s.apply(t,n||[])).next())}));var t,n,i,s}().then((()=>e.draw.call(this)))},new((i=void 0)||(i=Promise))((function(e,r){function o(e){try{h(s.next(e))}catch(e){r(e)}}function a(e){try{h(s.throw(e))}catch(e){r(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((s=s.apply(t,n||[])).next())}));var t,n,i,s}registerEvents(){super.registerEvents(),window.addEventListener("resize",this.handleResize)}deregisterEvents(){super.deregisterEvents(),window.removeEventListener("resize",this.handleResize)}}function H(e){d("(camera) "+e)}const _=30;class Y extends M{constructor(e,t){super(),this.bounds=e,this.fieldSize=t,this.reset(),this.pointerDownEvent={touches:[],moveOrScale:!1,moveDistance:0,pinchDistance:null,longPressTimeout:null},this.lastPressTimestamp=0,this.handleWheel=e=>{if(this.intersect(e)){e.preventDefault();const t=e.deltaY>0?.8:1.25;this.zoom(t,e.clientX,e.clientY)}},this.handlePointerDown=e=>{this.intersect(e)&&(e.preventDefault(),0==this.pointerDownEvent.touches.length?(H("first pointerdown"),this.pointerDownEvent.longPressTimeout=setTimeout((()=>{0===this.pointerDownEvent.touches.length||this.pointerDownEvent.moveOrScale||(H("longpress timeout"),this.callEventListeners("longpress",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button}))}),200),this.pointerDownEvent.moveOrScale=!1,this.pointerDownEvent.moveDistance=0,this.pointerDownEvent.pinchDistance=null):H("another pointerdown"),this.pointerDownEvent.touches.push(e))},this.handlePointerMove=e=>{if(0===this.pointerDownEvent.touches.length)return;const t=this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId));if(-1===t)return;e.preventDefault();const n=this.pointerDownEvent.touches[t];if(this.pointerDownEvent.touches[t]=e,1===this.pointerDownEvent.touches.length){const t={x:e.clientX-n.clientX,y:e.clientY-n.clientY},i=Math.hypot(t.x,t.y);if(this.pointerDownEvent.moveDistance+=i,!this.pointerDownEvent.moveOrScale&&this.pointerDownEvent.moveDistance<5)return;if(this.translation.x+=t.x,this.translation.y+=t.y,void 0!==this.fieldSize){const e={x:this.fieldSize.w*_*this.scale,y:this.fieldSize.h*_*this.scale},t={x:this.bounds.w/2-e.x,y:this.bounds.h/2-e.y},n={x:this.bounds.w/2,y:this.bounds.h/2};this.translation.x=Math.min(this.translation.x,n.x),this.translation.x=Math.max(this.translation.x,t.x),this.translation.y=Math.min(this.translation.y,n.y),this.translation.y=Math.max(this.translation.y,t.y)}}else{const e=this.pointerDownEvent.touches[0],t=this.pointerDownEvent.touches[1],n=Math.hypot(e.clientX-t.clientX,e.clientY-t.clientY);if(null!=this.pointerDownEvent.pinchDistance){const i=n/this.pointerDownEvent.pinchDistance,s={x:(e.clientX+t.clientX)/2,y:(e.clientY+t.clientY)/2};this.zoom(i,s.x,s.y)}this.pointerDownEvent.pinchDistance=n}this.pointerDownEvent.moveOrScale||(H("pointer moved, not press event"),this.pointerDownEvent.moveOrScale=!0,clearTimeout(this.pointerDownEvent.longPressTimeout)),this.callEventListeners("move",{})},this.handlePointerCancel=e=>{H("pointercancel")},this.handlePointerOut=e=>{0!=this.pointerDownEvent.touches.length&&-1!==this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId))&&(e.preventDefault(),this.pointerDownEvent.touches.length>1?(H("pointerout: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),this.pointerDownEvent.pinchDistance=null):(H("pointerout: no press event"),clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]))},this.handlePointerUp=e=>{if(0!==this.pointerDownEvent.touches.length&&-1!==this.pointerDownEvent.touches.findIndex((t=>t.pointerId===e.pointerId))){if(e.preventDefault(),this.pointerDownEvent.touches.length>1)return H("pointerup: one of multiple"),this.pointerDownEvent.touches=this.pointerDownEvent.touches.filter((t=>t.pointerId!==e.pointerId)),void(this.pointerDownEvent.pinchDistance=null);if(this.pointerDownEvent.moveOrScale)H("pointerup");else{H("pointerup: no movement or scaling, press event");const t=Date.now();t-this.lastPressTimestamp>50?(this.lastPressTimestamp=t,this.callEventListeners("press",{pos:this.toWorldPos(this.pointerDownEvent.touches[0].clientX,this.pointerDownEvent.touches[0].clientY),button:e.button})):H(`last press was ${t-this.lastPressTimestamp}ms ago, no event (min50ms)`)}clearTimeout(this.pointerDownEvent.longPressTimeout),this.pointerDownEvent.touches=[]}},this.registerEvents()}intersect(e){return S({x:e.clientX,y:e.clientY},this.bounds)}middleTranslation(){return void 0===this.fieldSize?{x:0,y:0}:{x:this.bounds.w/2-this.scale*(this.fieldSize.w*_/2),y:this.bounds.h/2-this.scale*(this.fieldSize.h*_/2)}}toCanvasPos(e,t){return{x:this.bounds.x+this.translation.x+e*_*this.scale,y:this.bounds.y+this.translation.y+t*_*this.scale}}toWorldPos(e,t){return{x:Math.floor((e-this.translation.x-this.bounds.x)/this.scale/_),y:Math.floor((t-this.translation.y-this.bounds.y)/this.scale/_)}}zoom(e,t,n){const i=this.scale*e;i>1&&i<4&&(this.translation.x-=(t-this.translation.x)*(e-1),this.translation.y-=(n-this.translation.y)*(e-1),this.scale=i,this.callEventListeners("move",{}))}draw(e){return t=this,n=void 0,s=function*(){const t=this.visibleTiles;for(let n=t.y;n<t.y+t.h;n++)for(let i=t.x;i<t.x+t.w;i++)if(e[n]&&e[n][i]){const t=w.TILES[e[n][i]],s=this.toCanvasPos(i,n);x(t,{x:s.x,y:s.y,w:_*this.scale,h:_*this.scale})}},new((i=void 0)||(i=Promise))((function(e,r){function o(e){try{h(s.next(e))}catch(e){r(e)}}function a(e){try{h(s.throw(e))}catch(e){r(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((s=s.apply(t,n||[])).next())}));var t,n,i,s}get visibleTiles(){const e=this.toWorldPos(this.bounds.x,this.bounds.y),t=this.toWorldPos(this.bounds.x+this.bounds.w,this.bounds.y+this.bounds.h);return{x:e.x-1,y:e.y-1,w:t.x-e.x+2,h:t.y-e.y+2}}reset(){void 0!==this.fieldSize?(this.scale=Math.min(this.bounds.w/(this.fieldSize.w*_*1.1),this.bounds.h/(this.fieldSize.h*_*1.1)),this.scale=Math.max(this.scale,1),this.scale=Math.min(this.scale,4)):this.scale=2,this.translation=this.middleTranslation()}resize(e){this.translation.x+=(e.w-this.bounds.w)/2,this.translation.y+=(e.h-this.bounds.h)/2,this.bounds=e}registerEvents(){f.addEventListener("wheel",this.handleWheel),f.addEventListener("pointerdown",this.handlePointerDown),f.addEventListener("pointermove",this.handlePointerMove),f.addEventListener("pointercancel",this.handlePointerCancel),f.addEventListener("pointerout",this.handlePointerOut),f.addEventListener("pointerup",this.handlePointerUp)}deregisterEvents(){f.removeEventListener("wheel",this.handleWheel),f.removeEventListener("pointerdown",this.handlePointerDown),f.removeEventListener("pointermove",this.handlePointerMove),f.removeEventListener("pointercancel",this.handlePointerCancel),f.removeEventListener("pointerout",this.handlePointerOut),f.removeEventListener("pointerup",this.handlePointerUp)}save(){localStorage.setItem("camera",JSON.stringify({translation:this.translation,scale:this.scale}))}load(){const e=localStorage.getItem("camera");if(e){const t=JSON.parse(e);this.translation=t.translation,this.scale=t.scale}}}var U=function(e,t,n,i){return new(n||(n=Promise))((function(s,r){function o(e){try{h(i.next(e))}catch(e){r(e)}}function a(e){try{h(i.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};class k extends M{constructor(e,t){super(),this.bounds=e,this.remainingMines=t,this.currentElapsed=0,this.clock=null,this.handlePointerDown=e=>{S({x:e.clientX,y:e.clientY},this.closeHitbox)&&this.callEventListeners("close",{})}}startClock(){if(!this.clock){let e=Date.now(),t=Math.floor(this.currentElapsed/1e3);this.clock=setInterval((()=>U(this,void 0,void 0,(function*(){const n=Date.now();this.currentElapsed+=n-e,Math.floor(this.currentElapsed/1e3)!==t&&(yield this.draw(),t=Math.floor(this.currentElapsed/1e3)),e=n}))),100)}}stopClock(){null!=this.clock&&clearInterval(this.clock)}resize(e){this.bounds=e}draw(){return U(this,void 0,void 0,(function*(){return new Promise((e=>{x({x:w.TILES.HIDDEN.x+.1*w.TILES.HIDDEN.w,y:w.TILES.HIDDEN.y,w:.8*w.TILES.HIDDEN.w,h:w.TILES.HIDDEN.h},this.bounds),e()})).then((()=>{const e=.8*this.bounds.h,t=this.bounds.y+(this.bounds.h/2-e/2);{const n=p(Math.floor(this.currentElapsed/1e3),3,!0),i=function(e,t){return t/v*w.ICONS[0].w*e.length}(n,e),s={x:this.bounds.x+(this.bounds.w/2-i),y:t};D(n,s,e);const r={x:s.x-1.1*e,y:t,w:e,h:e};x(w.ICONS.CLOCK,r)}{const n={x:this.bounds.x+this.bounds.w/2,y:t,w:e,h:e};x(w.ICONS.MINE,n);const i={x:n.x+n.w,y:t};if(this.remainingMines===1/0){const t=Object.assign(Object.assign({},i),{w:e/w.ICONS.INFINITY.h*w.ICONS.INFINITY.w,h:e});x(w.ICONS.INFINITY,t)}else D(p(this.remainingMines,2,!0),i,e)}this.closeHitbox={x:this.bounds.x+this.bounds.w-this.bounds.h,y:this.bounds.y,w:this.bounds.h,h:this.bounds.h},x(w.ICONS.CROSS,this.closeHitbox)}))}))}registerEvents(){f.addEventListener("pointerdown",this.handlePointerDown)}deregisterEvents(){f.removeEventListener("pointerdown",this.handlePointerDown)}}var z=function(e,t,n,i){return new(n||(n=Promise))((function(s,r){function o(e){try{h(i.next(e))}catch(e){r(e)}}function a(e){try{h(i.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};d("Creating WASM worker");const F=new Worker(new URL(n.p+n.u(303),n.b)),W=new Map;d("Registering WebIO event listener for Go"),F.addEventListener("message",(e=>{if(e.data){const t=e.data,[n,i]=W.get(t.id);t.success?n(t.data):(d("Error response for '"+t.cmd+"': "+t.data),i(t.data))}}));let B=!1;const j=[];function V(e,t,n){return new Promise(((i,s)=>{const r=function(e,t){return{cmd:e,id:e+Date.now(),data:t}}(e,t);W.set(r.id,[i,s]),n||B?F.postMessage(r):(d(e+" message received, but worker hasn't connected yet. Adding to queue"),j.push(r))}))}function J(e){return z(this,void 0,void 0,(function*(){const t=V("ping",null,!0),n=new Promise(((t,n)=>setTimeout(n,e)));try{return yield Promise.race([t,n]),B=!0,j.forEach((e=>{F.postMessage(e)})),j.length=0,!0}catch(e){return!1}}))}var X;function Z(e){return V("init",e)}function G(e){return V("flag",e)}(function(){return z(this,void 0,void 0,(function*(){let e=0,t=100;for(;!B&&e<5;)d("Sending ping with timeout "+t+"ms"),e++,(yield J(t))||(t*=2,d("Ping timeout reached"));if(e>=5)throw new Error("Max pings 5 reached, assuming WASM module is not functional")}))})().then((()=>{d("Response to ping received, worker connected")})),function(e){e.Start="start",e.Playing="playing",e.Win="win",e.Loss="loss"}(X||(X={}));const $={id:"modal.close_button",sprite:w.ICONS.CROSS,scale:1},K={id:"modal.back_button",sprite:w.MODAL.BACK,hoveredSprite:b(w.MODAL.BACK_HOVERED),scale:1.25,interactable:!0};class q extends I{constructor(e){super(e)}draw(){const e=Object.create(null,{draw:{get:()=>super.draw}});return t=this,n=void 0,s=function*(){yield new Promise((e=>{const t=f.width,n=f.height;y.fillStyle="rgba(0, 0, 0, 0.4)",y.fillRect(0,0,t,n);const i=t>n?.8*n:.8*t,s=t/2-i/2,r=n/2-i/2,o=i/10;for(let e=0;e<10;e++)for(let t=0;t<10;t++){const n={x:s+t*o,y:r+e*o,w:o,h:o};let i={x:w.TILES.EMPTY.x+w.TILES.EMPTY.w/2,y:w.TILES.EMPTY.y+w.TILES.EMPTY.h/2,w:1,h:1};0!==t&&9!==t&&0!==e&&9!==e||(i=w.TILES.HIDDEN),x(i,n),9===t&&0===e&&(x($.sprite,n),this.elementHitboxes.set($.id,n))}e({x:s+o,y:r+o,w:i-2*o,h:i-2*o})})).then((t=>e.draw.call(this,t)))},new((i=void 0)||(i=Promise))((function(e,r){function o(e){try{h(s.next(e))}catch(e){r(e)}}function a(e){try{h(s.throw(e))}catch(e){r(e)}}function h(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}h((s=s.apply(t,n||[])).next())}));var t,n,i,s}}const Q={id:"modal.retry.title",sprite:w.RETRY_MODAL.TITLE,scale:1},ee={id:"modal.retry.retry_button",sprite:w.RETRY_MODAL.RETRY,hoveredSprite:b(w.RETRY_MODAL.RETRY_HOVERED),scale:1.25,interactable:!0},te=[Q,ee,K],ne=q.bind(q,te),ie={id:"modal.success.title",sprite:w.SUCCESS_MODAL.TITLE,scale:1},se={id:"modal.success.reset_button",sprite:w.SUCCESS_MODAL.RESET,hoveredSprite:b(w.SUCCESS_MODAL.RESET_HOVERED),scale:1.25,interactable:!0},re=[ie,se,K],oe=q.bind(q,re);class ae extends e{constructor(e,t){super(e),this.modal=new t,this.modal.addEventListener("hover",(()=>this.stack.draw())),this.modal.addEventListener("press",(e=>{switch(e.pressedElement){case $.id:this.pop();break;case K.id:this.parent.pop()}}))}draw(){return e=this,t=void 0,i=function*(){yield this.modal.draw()},new((n=void 0)||(n=Promise))((function(s,r){function o(e){try{h(i.next(e))}catch(e){r(e)}}function a(e){try{h(i.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}));var e,t,n,i}registerEvents(){this.modal.registerEvents()}deregisterEvents(){this.modal.deregisterEvents()}}var he=function(e,t,n,i){return new(n||(n=Promise))((function(s,r){function o(e){try{h(i.next(e))}catch(e){r(e)}}function a(e){try{h(i.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}))};function ce(e){e.preventDefault()}class le extends e{constructor(e,t,n){super(e),this.props=t;const i=le.bounds();this.handleResize=()=>{const e=le.bounds();this.bar.resize(e.bar),this.camera.resize(e.camera),this.draw()},this.handleState=e=>{switch(this.bar.currentElapsed=e.timer,this.gameState=e.state,this.gameState){case X.Win:this.bar.stopClock(),d("Win detected, displaying success modal"),this.createEndGameModal(oe,se.id);break;case X.Loss:this.bar.stopClock(),d("Loss detected, displaying retry modal"),setTimeout((()=>this.createEndGameModal(ne,ee.id)),1e3)}},this.handleFlag=e=>{this.bar.remainingMines=e.remainingMines,this.draw(!0)},this.handlePress=e=>{var t;this.gameState!==X.Win&&this.gameState!==X.Loss?0===e.button?(t=e.pos,V("uncover",t)).then((e=>he(this,void 0,void 0,(function*(){this.gameState===X.Start&&this.bar.startClock(),yield this.draw(!0),this.handleState(e)})))):2===e.button&&G(e.pos).then(this.handleFlag):this.gameState===X.Win?this.createEndGameModal(oe,se.id):this.gameState===X.Loss&&this.createEndGameModal(ne,ee.id)},this.handleLongPress=e=>{this.gameState!==X.Win&&this.gameState!==X.Loss&&0===e.button&&G(e.pos).then(this.handleFlag)};let s,r=1/0;"numMines"in this.props&&(r=this.props.numMines),this.bar=new k(i.bar,r),this.bar.addEventListener("close",(()=>{this.pop()})),"w"in this.props&&"h"in this.props&&(s={w:this.props.w,h:this.props.h}),this.camera=new Y(i.camera,s),this.camera.addEventListener("press",this.handlePress),this.camera.addEventListener("longpress",this.handleLongPress),this.camera.addEventListener("move",(()=>this.draw())),this.appearance=null,this.lastAppearanceRequestTimestamp=0,n?(V("state").then((e=>{this.bar.remainingMines=e.remainingMines,this.bar.currentElapsed=e.timer,e.state!==X.Start&&this.bar.startClock()})),this.camera.load()):this.reset(),this.autosave=setInterval((()=>this.save()),5e3),this.registerEvents()}static bounds(){const e={x:0,y:0,w:f.width,h:Math.min(.075*f.width,.075*f.height)};return{bar:e,camera:{x:0,y:e.y+e.h,w:f.width,h:f.height-(e.y+e.h)}}}reset(){let e;if(this.camera.reset(),this.bar.stopClock(),this.bar.currentElapsed=0,"numMines"in this.props&&(this.bar.remainingMines=this.props.numMines),this.gameState=X.Start,"w"in this.props&&"h"in this.props&&"numMines"in this.props)e=Z({width:this.props.w,height:this.props.h,mines:this.props.numMines});else{if(!("mineDensity"in this.props))throw new Error("unknown game props type");e=Z({mineDensity:this.props.mineDensity})}e.then((()=>this.draw(!0)))}createEndGameModal(e,t){this.stack.push(ae,e).modal.addEventListener("press",(e=>{e.pressedElement===t&&(this.stack.pop(),this.reset(),this.stack.draw())}))}shouldUpdateAppearance(){if(null==this.appearance)return!0;if(Date.now()-this.lastAppearanceRequestTimestamp<100)return!1;const e=this.camera.visibleTiles;return e.x<this.appearance.rect.x+this.appearance.rect.w/6||e.y<this.appearance.rect.y+this.appearance.rect.h/6||e.x+e.w>this.appearance.rect.x+this.appearance.rect.w-this.appearance.rect.w/6||e.y+e.h>this.appearance.rect.y+this.appearance.rect.h-this.appearance.rect.h/6}draw(e){return he(this,void 0,void 0,(function*(){if(e||this.shouldUpdateAppearance()){const e=this.camera.visibleTiles;e.x-=e.w/2,e.y-=e.h/2,e.w*=2,e.h*=2,d(`redrawing, rect x${e.x} y ${e.y} w ${e.w} h ${e.h}`),this.lastAppearanceRequestTimestamp=Date.now(),this.appearance={data:yield(t=e,V("appearance",t)),rect:e}}var t;y.clearRect(0,0,f.width,f.height),yield this.camera.draw(this.appearance.data).then((()=>this.bar.draw()))}))}registerEvents(){window.addEventListener("resize",this.handleResize),f.addEventListener("contextmenu",ce),this.bar.registerEvents(),this.camera.registerEvents()}deregisterEvents(){window.removeEventListener("resize",this.handleResize),f.removeEventListener("contextmenu",ce),this.bar.deregisterEvents(),this.camera.deregisterEvents()}onPop(){this.bar.stopClock(),clearInterval(this.autosave)}save(){V("save").then((e=>{localStorage.setItem("saveData",e)})),this.camera.save()}static load(e){return he(this,void 0,void 0,(function*(){const t=localStorage.getItem("saveData");if(t){d("Previous game found, attempting to load");try{const i=yield(n=t,V("load",n));let s;"width"in i&&"height"in i&&"mines"in i?s={w:i.width,h:i.height,numMines:i.mines}:"mineDensity"in i?s={mineDensity:i.mineDensity}:(d(`Unknown game properties: ${JSON.stringify(i)}. Reverting to main menu`),localStorage.removeItem("saveData"),localStorage.removeItem("camera")),d("Game loaded successfully"),e.push(le,s,!0)}catch(e){d("Error while loading game, reverting to main menu"),localStorage.removeItem("saveData"),localStorage.removeItem("camera")}}var n;return null}))}}var ue=n(379),de=n.n(ue),pe=n(795),me=n.n(pe),ve=n(569),we=n.n(ve),fe=n(565),ye=n.n(fe),Ee=n(216),ge=n.n(Ee),xe=n(589),De=n.n(xe),Me=n(250),be={};function Se(){f.width=window.innerWidth,f.height=window.innerHeight,y.imageSmoothingEnabled=!1,y.webkitImageSmoothingEnabled=!1,y.mozImageSmoothingEnabled=!1}be.styleTagTransform=De(),be.setAttributes=ye(),be.insert=we().bind(null,"head"),be.domAPI=me(),be.insertStyleElement=ge(),de()(Me.Z,be),Me.Z&&Me.Z.locals&&Me.Z.locals,window.addEventListener("resize",Se),Se();const Te=new class{constructor(){this.states=[]}push(e,...t){this.top()&&this.top().deregisterEvents();const n=new e(this,...t);return this.states.push(n),this.draw(),n}pop(){const e=this.states.pop();return e.deregisterEvents(),e.onPop(),this.top()&&this.top().registerEvents(),this.draw(),e}top(){return this.states[this.states.length-1]}draw(){return e=this,t=void 0,i=function*(){for(const e of this.states)yield e.draw()},new((n=void 0)||(n=Promise))((function(s,r){function o(e){try{h(i.next(e))}catch(e){r(e)}}function a(e){try{h(i.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}));var e,t,n,i}};Te.push(class extends e{constructor(e){super(e),this.mainMenu=new R,this.mainMenu.addEventListener("press",(t=>{let n;switch(t.pressedElement){case N.id:n={w:9,h:9,numMines:10};break;case A.id:n={w:16,h:16,numMines:40};break;case P.id:n={w:30,h:16,numMines:99};break;case C.id:n={mineDensity:40}}e.push(le,n)}))}draw(){return e=this,t=void 0,i=function*(){yield this.mainMenu.draw()},new((n=void 0)||(n=Promise))((function(s,r){function o(e){try{h(i.next(e))}catch(e){r(e)}}function a(e){try{h(i.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}h((i=i.apply(e,t||[])).next())}));var e,t,n,i}registerEvents(){this.mainMenu.registerEvents()}deregisterEvents(){this.mainMenu.deregisterEvents()}}),le.load(Te),g.then((()=>Te.draw()))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,